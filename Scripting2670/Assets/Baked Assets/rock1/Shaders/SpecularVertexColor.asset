%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!48 &4800000
Shader:
  m_ObjectHideFlags: 0
  m_PrefabParentObject: {fileID: 0}
  m_PrefabInternal: {fileID: 0}
  m_Name: 
  m_ParsedForm:
    m_PropInfo:
      m_Props:
      - m_Name: _Color
        m_Description: Main Color
        m_Attributes: []
        m_Type: 0
        m_Flags: 0
        m_DefValue[0]: 1
        m_DefValue[1]: 1
        m_DefValue[2]: 1
        m_DefValue[3]: 1
        m_DefTexture:
          m_DefaultName: 
          m_TexDim: 1
      - m_Name: _SpecColor
        m_Description: Specular Color
        m_Attributes: []
        m_Type: 0
        m_Flags: 0
        m_DefValue[0]: 0.5
        m_DefValue[1]: 0.5
        m_DefValue[2]: 0.5
        m_DefValue[3]: 1
        m_DefTexture:
          m_DefaultName: 
          m_TexDim: 1
      - m_Name: _Shininess
        m_Description: Shininess
        m_Attributes: []
        m_Type: 3
        m_Flags: 0
        m_DefValue[0]: 0.078125
        m_DefValue[1]: 0.03
        m_DefValue[2]: 1
        m_DefValue[3]: 0
        m_DefTexture:
          m_DefaultName: 
          m_TexDim: 1
      - m_Name: _MainTex
        m_Description: Base (RGB) Gloss (A)
        m_Attributes: []
        m_Type: 4
        m_Flags: 0
        m_DefValue[0]: 0
        m_DefValue[1]: 0
        m_DefValue[2]: 0
        m_DefValue[3]: 0
        m_DefTexture:
          m_DefaultName: white
          m_TexDim: 2
      - m_Name: _BumpMap
        m_Description: Normalmap
        m_Attributes: []
        m_Type: 4
        m_Flags: 0
        m_DefValue[0]: 0
        m_DefValue[1]: 0
        m_DefValue[2]: 0
        m_DefValue[3]: 0
        m_DefTexture:
          m_DefaultName: bump
          m_TexDim: 2
    m_SubShaders:
    - m_Passes:
      - m_NameIndices: {}
        m_Type: 0
        m_State:
          serializedVersion: 2
          m_Name: FORWARD
          rtBlend0:
            srcBlend:
              val: 1
              name: <noninit>
            destBlend:
              val: 0
              name: <noninit>
            srcBlendAlpha:
              val: 1
              name: <noninit>
            destBlendAlpha:
              val: 0
              name: <noninit>
            blendOp:
              val: 0
              name: <noninit>
            blendOpAlpha:
              val: 0
              name: <noninit>
            colMask:
              val: 15
              name: <noninit>
          rtBlend1:
            srcBlend:
              val: 1
              name: <noninit>
            destBlend:
              val: 0
              name: <noninit>
            srcBlendAlpha:
              val: 1
              name: <noninit>
            destBlendAlpha:
              val: 0
              name: <noninit>
            blendOp:
              val: 0
              name: <noninit>
            blendOpAlpha:
              val: 0
              name: <noninit>
            colMask:
              val: 15
              name: <noninit>
          rtBlend2:
            srcBlend:
              val: 1
              name: <noninit>
            destBlend:
              val: 0
              name: <noninit>
            srcBlendAlpha:
              val: 1
              name: <noninit>
            destBlendAlpha:
              val: 0
              name: <noninit>
            blendOp:
              val: 0
              name: <noninit>
            blendOpAlpha:
              val: 0
              name: <noninit>
            colMask:
              val: 15
              name: <noninit>
          rtBlend3:
            srcBlend:
              val: 1
              name: <noninit>
            destBlend:
              val: 0
              name: <noninit>
            srcBlendAlpha:
              val: 1
              name: <noninit>
            destBlendAlpha:
              val: 0
              name: <noninit>
            blendOp:
              val: 0
              name: <noninit>
            blendOpAlpha:
              val: 0
              name: <noninit>
            colMask:
              val: 15
              name: <noninit>
          rtBlend4:
            srcBlend:
              val: 1
              name: <noninit>
            destBlend:
              val: 0
              name: <noninit>
            srcBlendAlpha:
              val: 1
              name: <noninit>
            destBlendAlpha:
              val: 0
              name: <noninit>
            blendOp:
              val: 0
              name: <noninit>
            blendOpAlpha:
              val: 0
              name: <noninit>
            colMask:
              val: 15
              name: <noninit>
          rtBlend5:
            srcBlend:
              val: 1
              name: <noninit>
            destBlend:
              val: 0
              name: <noninit>
            srcBlendAlpha:
              val: 1
              name: <noninit>
            destBlendAlpha:
              val: 0
              name: <noninit>
            blendOp:
              val: 0
              name: <noninit>
            blendOpAlpha:
              val: 0
              name: <noninit>
            colMask:
              val: 15
              name: <noninit>
          rtBlend6:
            srcBlend:
              val: 1
              name: <noninit>
            destBlend:
              val: 0
              name: <noninit>
            srcBlendAlpha:
              val: 1
              name: <noninit>
            destBlendAlpha:
              val: 0
              name: <noninit>
            blendOp:
              val: 0
              name: <noninit>
            blendOpAlpha:
              val: 0
              name: <noninit>
            colMask:
              val: 15
              name: <noninit>
          rtBlend7:
            srcBlend:
              val: 1
              name: <noninit>
            destBlend:
              val: 0
              name: <noninit>
            srcBlendAlpha:
              val: 1
              name: <noninit>
            destBlendAlpha:
              val: 0
              name: <noninit>
            blendOp:
              val: 0
              name: <noninit>
            blendOpAlpha:
              val: 0
              name: <noninit>
            colMask:
              val: 15
              name: <noninit>
          rtSeparateBlend: 0
          zTest:
            val: 4
            name: <noninit>
          zWrite:
            val: 1
            name: <noninit>
          culling:
            val: 2
            name: <noninit>
          offsetFactor:
            val: 0
            name: <noninit>
          offsetUnits:
            val: 0
            name: <noninit>
          alphaToMask:
            val: 0
            name: <noninit>
          stencilOp:
            pass:
              val: 0
              name: <noninit>
            fail:
              val: 0
              name: <noninit>
            zFail:
              val: 0
              name: <noninit>
            comp:
              val: 8
              name: <noninit>
          stencilOpFront:
            pass:
              val: 0
              name: <noninit>
            fail:
              val: 0
              name: <noninit>
            zFail:
              val: 0
              name: <noninit>
            comp:
              val: 8
              name: <noninit>
          stencilOpBack:
            pass:
              val: 0
              name: <noninit>
            fail:
              val: 0
              name: <noninit>
            zFail:
              val: 0
              name: <noninit>
            comp:
              val: 8
              name: <noninit>
          stencilReadMask:
            val: 255
            name: <noninit>
          stencilWriteMask:
            val: 255
            name: <noninit>
          stencilRef:
            val: 0
            name: <noninit>
          fogStart:
            val: 0
            name: unity_FogStart
          fogEnd:
            val: 0
            name: unity_FogEnd
          fogDensity:
            val: 0
            name: unity_FogDensity
          fogColor:
            x:
              val: 0
              name: <noninit>
            y:
              val: 0
              name: <noninit>
            z:
              val: 0
              name: <noninit>
            w:
              val: 0
              name: <noninit>
            name: unity_FogColor
          fogMode: -1
          gpuProgramID: 49395
          m_Tags:
            tags:
              LIGHTMODE: FORWARDBASE
              RenderType: Opaque
              SHADOWSUPPORT: true
          m_LOD: 400
          lighting: 0
        m_ProgramMask: 6
        progVertex:
          m_SubPrograms: []
        progFragment:
          m_SubPrograms: []
        progGeometry:
          m_SubPrograms: []
        progHull:
          m_SubPrograms: []
        progDomain:
          m_SubPrograms: []
        m_HasInstancingVariant: 1
        m_UseName: 
        m_Name: 
        m_TextureName: 
        m_Tags:
          tags: {}
      - m_NameIndices: {}
        m_Type: 0
        m_State:
          serializedVersion: 2
          m_Name: FORWARD
          rtBlend0:
            srcBlend:
              val: 1
              name: <noninit>
            destBlend:
              val: 1
              name: <noninit>
            srcBlendAlpha:
              val: 1
              name: <noninit>
            destBlendAlpha:
              val: 1
              name: <noninit>
            blendOp:
              val: 0
              name: <noninit>
            blendOpAlpha:
              val: 0
              name: <noninit>
            colMask:
              val: 15
              name: <noninit>
          rtBlend1:
            srcBlend:
              val: 1
              name: <noninit>
            destBlend:
              val: 0
              name: <noninit>
            srcBlendAlpha:
              val: 1
              name: <noninit>
            destBlendAlpha:
              val: 0
              name: <noninit>
            blendOp:
              val: 0
              name: <noninit>
            blendOpAlpha:
              val: 0
              name: <noninit>
            colMask:
              val: 15
              name: <noninit>
          rtBlend2:
            srcBlend:
              val: 1
              name: <noninit>
            destBlend:
              val: 0
              name: <noninit>
            srcBlendAlpha:
              val: 1
              name: <noninit>
            destBlendAlpha:
              val: 0
              name: <noninit>
            blendOp:
              val: 0
              name: <noninit>
            blendOpAlpha:
              val: 0
              name: <noninit>
            colMask:
              val: 15
              name: <noninit>
          rtBlend3:
            srcBlend:
              val: 1
              name: <noninit>
            destBlend:
              val: 0
              name: <noninit>
            srcBlendAlpha:
              val: 1
              name: <noninit>
            destBlendAlpha:
              val: 0
              name: <noninit>
            blendOp:
              val: 0
              name: <noninit>
            blendOpAlpha:
              val: 0
              name: <noninit>
            colMask:
              val: 15
              name: <noninit>
          rtBlend4:
            srcBlend:
              val: 1
              name: <noninit>
            destBlend:
              val: 0
              name: <noninit>
            srcBlendAlpha:
              val: 1
              name: <noninit>
            destBlendAlpha:
              val: 0
              name: <noninit>
            blendOp:
              val: 0
              name: <noninit>
            blendOpAlpha:
              val: 0
              name: <noninit>
            colMask:
              val: 15
              name: <noninit>
          rtBlend5:
            srcBlend:
              val: 1
              name: <noninit>
            destBlend:
              val: 0
              name: <noninit>
            srcBlendAlpha:
              val: 1
              name: <noninit>
            destBlendAlpha:
              val: 0
              name: <noninit>
            blendOp:
              val: 0
              name: <noninit>
            blendOpAlpha:
              val: 0
              name: <noninit>
            colMask:
              val: 15
              name: <noninit>
          rtBlend6:
            srcBlend:
              val: 1
              name: <noninit>
            destBlend:
              val: 0
              name: <noninit>
            srcBlendAlpha:
              val: 1
              name: <noninit>
            destBlendAlpha:
              val: 0
              name: <noninit>
            blendOp:
              val: 0
              name: <noninit>
            blendOpAlpha:
              val: 0
              name: <noninit>
            colMask:
              val: 15
              name: <noninit>
          rtBlend7:
            srcBlend:
              val: 1
              name: <noninit>
            destBlend:
              val: 0
              name: <noninit>
            srcBlendAlpha:
              val: 1
              name: <noninit>
            destBlendAlpha:
              val: 0
              name: <noninit>
            blendOp:
              val: 0
              name: <noninit>
            blendOpAlpha:
              val: 0
              name: <noninit>
            colMask:
              val: 15
              name: <noninit>
          rtSeparateBlend: 0
          zTest:
            val: 4
            name: <noninit>
          zWrite:
            val: 0
            name: <noninit>
          culling:
            val: 2
            name: <noninit>
          offsetFactor:
            val: 0
            name: <noninit>
          offsetUnits:
            val: 0
            name: <noninit>
          alphaToMask:
            val: 0
            name: <noninit>
          stencilOp:
            pass:
              val: 0
              name: <noninit>
            fail:
              val: 0
              name: <noninit>
            zFail:
              val: 0
              name: <noninit>
            comp:
              val: 8
              name: <noninit>
          stencilOpFront:
            pass:
              val: 0
              name: <noninit>
            fail:
              val: 0
              name: <noninit>
            zFail:
              val: 0
              name: <noninit>
            comp:
              val: 8
              name: <noninit>
          stencilOpBack:
            pass:
              val: 0
              name: <noninit>
            fail:
              val: 0
              name: <noninit>
            zFail:
              val: 0
              name: <noninit>
            comp:
              val: 8
              name: <noninit>
          stencilReadMask:
            val: 255
            name: <noninit>
          stencilWriteMask:
            val: 255
            name: <noninit>
          stencilRef:
            val: 0
            name: <noninit>
          fogStart:
            val: 0
            name: unity_FogStart
          fogEnd:
            val: 0
            name: unity_FogEnd
          fogDensity:
            val: 0
            name: unity_FogDensity
          fogColor:
            x:
              val: 0
              name: <noninit>
            y:
              val: 0
              name: <noninit>
            z:
              val: 0
              name: <noninit>
            w:
              val: 0
              name: <noninit>
            name: unity_FogColor
          fogMode: -1
          gpuProgramID: 115528
          m_Tags:
            tags:
              LIGHTMODE: FORWARDADD
              RenderType: Opaque
          m_LOD: 400
          lighting: 0
        m_ProgramMask: 6
        progVertex:
          m_SubPrograms: []
        progFragment:
          m_SubPrograms: []
        progGeometry:
          m_SubPrograms: []
        progHull:
          m_SubPrograms: []
        progDomain:
          m_SubPrograms: []
        m_HasInstancingVariant: 0
        m_UseName: 
        m_Name: 
        m_TextureName: 
        m_Tags:
          tags: {}
      - m_NameIndices: {}
        m_Type: 0
        m_State:
          serializedVersion: 2
          m_Name: PREPASS
          rtBlend0:
            srcBlend:
              val: 1
              name: <noninit>
            destBlend:
              val: 0
              name: <noninit>
            srcBlendAlpha:
              val: 1
              name: <noninit>
            destBlendAlpha:
              val: 0
              name: <noninit>
            blendOp:
              val: 0
              name: <noninit>
            blendOpAlpha:
              val: 0
              name: <noninit>
            colMask:
              val: 15
              name: <noninit>
          rtBlend1:
            srcBlend:
              val: 1
              name: <noninit>
            destBlend:
              val: 0
              name: <noninit>
            srcBlendAlpha:
              val: 1
              name: <noninit>
            destBlendAlpha:
              val: 0
              name: <noninit>
            blendOp:
              val: 0
              name: <noninit>
            blendOpAlpha:
              val: 0
              name: <noninit>
            colMask:
              val: 15
              name: <noninit>
          rtBlend2:
            srcBlend:
              val: 1
              name: <noninit>
            destBlend:
              val: 0
              name: <noninit>
            srcBlendAlpha:
              val: 1
              name: <noninit>
            destBlendAlpha:
              val: 0
              name: <noninit>
            blendOp:
              val: 0
              name: <noninit>
            blendOpAlpha:
              val: 0
              name: <noninit>
            colMask:
              val: 15
              name: <noninit>
          rtBlend3:
            srcBlend:
              val: 1
              name: <noninit>
            destBlend:
              val: 0
              name: <noninit>
            srcBlendAlpha:
              val: 1
              name: <noninit>
            destBlendAlpha:
              val: 0
              name: <noninit>
            blendOp:
              val: 0
              name: <noninit>
            blendOpAlpha:
              val: 0
              name: <noninit>
            colMask:
              val: 15
              name: <noninit>
          rtBlend4:
            srcBlend:
              val: 1
              name: <noninit>
            destBlend:
              val: 0
              name: <noninit>
            srcBlendAlpha:
              val: 1
              name: <noninit>
            destBlendAlpha:
              val: 0
              name: <noninit>
            blendOp:
              val: 0
              name: <noninit>
            blendOpAlpha:
              val: 0
              name: <noninit>
            colMask:
              val: 15
              name: <noninit>
          rtBlend5:
            srcBlend:
              val: 1
              name: <noninit>
            destBlend:
              val: 0
              name: <noninit>
            srcBlendAlpha:
              val: 1
              name: <noninit>
            destBlendAlpha:
              val: 0
              name: <noninit>
            blendOp:
              val: 0
              name: <noninit>
            blendOpAlpha:
              val: 0
              name: <noninit>
            colMask:
              val: 15
              name: <noninit>
          rtBlend6:
            srcBlend:
              val: 1
              name: <noninit>
            destBlend:
              val: 0
              name: <noninit>
            srcBlendAlpha:
              val: 1
              name: <noninit>
            destBlendAlpha:
              val: 0
              name: <noninit>
            blendOp:
              val: 0
              name: <noninit>
            blendOpAlpha:
              val: 0
              name: <noninit>
            colMask:
              val: 15
              name: <noninit>
          rtBlend7:
            srcBlend:
              val: 1
              name: <noninit>
            destBlend:
              val: 0
              name: <noninit>
            srcBlendAlpha:
              val: 1
              name: <noninit>
            destBlendAlpha:
              val: 0
              name: <noninit>
            blendOp:
              val: 0
              name: <noninit>
            blendOpAlpha:
              val: 0
              name: <noninit>
            colMask:
              val: 15
              name: <noninit>
          rtSeparateBlend: 0
          zTest:
            val: 4
            name: <noninit>
          zWrite:
            val: 1
            name: <noninit>
          culling:
            val: 2
            name: <noninit>
          offsetFactor:
            val: 0
            name: <noninit>
          offsetUnits:
            val: 0
            name: <noninit>
          alphaToMask:
            val: 0
            name: <noninit>
          stencilOp:
            pass:
              val: 0
              name: <noninit>
            fail:
              val: 0
              name: <noninit>
            zFail:
              val: 0
              name: <noninit>
            comp:
              val: 8
              name: <noninit>
          stencilOpFront:
            pass:
              val: 0
              name: <noninit>
            fail:
              val: 0
              name: <noninit>
            zFail:
              val: 0
              name: <noninit>
            comp:
              val: 8
              name: <noninit>
          stencilOpBack:
            pass:
              val: 0
              name: <noninit>
            fail:
              val: 0
              name: <noninit>
            zFail:
              val: 0
              name: <noninit>
            comp:
              val: 8
              name: <noninit>
          stencilReadMask:
            val: 255
            name: <noninit>
          stencilWriteMask:
            val: 255
            name: <noninit>
          stencilRef:
            val: 0
            name: <noninit>
          fogStart:
            val: 0
            name: unity_FogStart
          fogEnd:
            val: 0
            name: unity_FogEnd
          fogDensity:
            val: 0
            name: unity_FogDensity
          fogColor:
            x:
              val: 0
              name: <noninit>
            y:
              val: 0
              name: <noninit>
            z:
              val: 0
              name: <noninit>
            w:
              val: 0
              name: <noninit>
            name: unity_FogColor
          fogMode: -1
          gpuProgramID: 167427
          m_Tags:
            tags:
              LIGHTMODE: PREPASSBASE
              RenderType: Opaque
          m_LOD: 400
          lighting: 0
        m_ProgramMask: 6
        progVertex:
          m_SubPrograms: []
        progFragment:
          m_SubPrograms: []
        progGeometry:
          m_SubPrograms: []
        progHull:
          m_SubPrograms: []
        progDomain:
          m_SubPrograms: []
        m_HasInstancingVariant: 1
        m_UseName: 
        m_Name: 
        m_TextureName: 
        m_Tags:
          tags: {}
      - m_NameIndices: {}
        m_Type: 0
        m_State:
          serializedVersion: 2
          m_Name: PREPASS
          rtBlend0:
            srcBlend:
              val: 1
              name: <noninit>
            destBlend:
              val: 0
              name: <noninit>
            srcBlendAlpha:
              val: 1
              name: <noninit>
            destBlendAlpha:
              val: 0
              name: <noninit>
            blendOp:
              val: 0
              name: <noninit>
            blendOpAlpha:
              val: 0
              name: <noninit>
            colMask:
              val: 15
              name: <noninit>
          rtBlend1:
            srcBlend:
              val: 1
              name: <noninit>
            destBlend:
              val: 0
              name: <noninit>
            srcBlendAlpha:
              val: 1
              name: <noninit>
            destBlendAlpha:
              val: 0
              name: <noninit>
            blendOp:
              val: 0
              name: <noninit>
            blendOpAlpha:
              val: 0
              name: <noninit>
            colMask:
              val: 15
              name: <noninit>
          rtBlend2:
            srcBlend:
              val: 1
              name: <noninit>
            destBlend:
              val: 0
              name: <noninit>
            srcBlendAlpha:
              val: 1
              name: <noninit>
            destBlendAlpha:
              val: 0
              name: <noninit>
            blendOp:
              val: 0
              name: <noninit>
            blendOpAlpha:
              val: 0
              name: <noninit>
            colMask:
              val: 15
              name: <noninit>
          rtBlend3:
            srcBlend:
              val: 1
              name: <noninit>
            destBlend:
              val: 0
              name: <noninit>
            srcBlendAlpha:
              val: 1
              name: <noninit>
            destBlendAlpha:
              val: 0
              name: <noninit>
            blendOp:
              val: 0
              name: <noninit>
            blendOpAlpha:
              val: 0
              name: <noninit>
            colMask:
              val: 15
              name: <noninit>
          rtBlend4:
            srcBlend:
              val: 1
              name: <noninit>
            destBlend:
              val: 0
              name: <noninit>
            srcBlendAlpha:
              val: 1
              name: <noninit>
            destBlendAlpha:
              val: 0
              name: <noninit>
            blendOp:
              val: 0
              name: <noninit>
            blendOpAlpha:
              val: 0
              name: <noninit>
            colMask:
              val: 15
              name: <noninit>
          rtBlend5:
            srcBlend:
              val: 1
              name: <noninit>
            destBlend:
              val: 0
              name: <noninit>
            srcBlendAlpha:
              val: 1
              name: <noninit>
            destBlendAlpha:
              val: 0
              name: <noninit>
            blendOp:
              val: 0
              name: <noninit>
            blendOpAlpha:
              val: 0
              name: <noninit>
            colMask:
              val: 15
              name: <noninit>
          rtBlend6:
            srcBlend:
              val: 1
              name: <noninit>
            destBlend:
              val: 0
              name: <noninit>
            srcBlendAlpha:
              val: 1
              name: <noninit>
            destBlendAlpha:
              val: 0
              name: <noninit>
            blendOp:
              val: 0
              name: <noninit>
            blendOpAlpha:
              val: 0
              name: <noninit>
            colMask:
              val: 15
              name: <noninit>
          rtBlend7:
            srcBlend:
              val: 1
              name: <noninit>
            destBlend:
              val: 0
              name: <noninit>
            srcBlendAlpha:
              val: 1
              name: <noninit>
            destBlendAlpha:
              val: 0
              name: <noninit>
            blendOp:
              val: 0
              name: <noninit>
            blendOpAlpha:
              val: 0
              name: <noninit>
            colMask:
              val: 15
              name: <noninit>
          rtSeparateBlend: 0
          zTest:
            val: 4
            name: <noninit>
          zWrite:
            val: 0
            name: <noninit>
          culling:
            val: 2
            name: <noninit>
          offsetFactor:
            val: 0
            name: <noninit>
          offsetUnits:
            val: 0
            name: <noninit>
          alphaToMask:
            val: 0
            name: <noninit>
          stencilOp:
            pass:
              val: 0
              name: <noninit>
            fail:
              val: 0
              name: <noninit>
            zFail:
              val: 0
              name: <noninit>
            comp:
              val: 8
              name: <noninit>
          stencilOpFront:
            pass:
              val: 0
              name: <noninit>
            fail:
              val: 0
              name: <noninit>
            zFail:
              val: 0
              name: <noninit>
            comp:
              val: 8
              name: <noninit>
          stencilOpBack:
            pass:
              val: 0
              name: <noninit>
            fail:
              val: 0
              name: <noninit>
            zFail:
              val: 0
              name: <noninit>
            comp:
              val: 8
              name: <noninit>
          stencilReadMask:
            val: 255
            name: <noninit>
          stencilWriteMask:
            val: 255
            name: <noninit>
          stencilRef:
            val: 0
            name: <noninit>
          fogStart:
            val: 0
            name: unity_FogStart
          fogEnd:
            val: 0
            name: unity_FogEnd
          fogDensity:
            val: 0
            name: unity_FogDensity
          fogColor:
            x:
              val: 0
              name: <noninit>
            y:
              val: 0
              name: <noninit>
            z:
              val: 0
              name: <noninit>
            w:
              val: 0
              name: <noninit>
            name: unity_FogColor
          fogMode: -1
          gpuProgramID: 231618
          m_Tags:
            tags:
              LIGHTMODE: PREPASSFINAL
              RenderType: Opaque
          m_LOD: 400
          lighting: 0
        m_ProgramMask: 6
        progVertex:
          m_SubPrograms: []
        progFragment:
          m_SubPrograms: []
        progGeometry:
          m_SubPrograms: []
        progHull:
          m_SubPrograms: []
        progDomain:
          m_SubPrograms: []
        m_HasInstancingVariant: 1
        m_UseName: 
        m_Name: 
        m_TextureName: 
        m_Tags:
          tags: {}
      - m_NameIndices: {}
        m_Type: 0
        m_State:
          serializedVersion: 2
          m_Name: DEFERRED
          rtBlend0:
            srcBlend:
              val: 1
              name: <noninit>
            destBlend:
              val: 0
              name: <noninit>
            srcBlendAlpha:
              val: 1
              name: <noninit>
            destBlendAlpha:
              val: 0
              name: <noninit>
            blendOp:
              val: 0
              name: <noninit>
            blendOpAlpha:
              val: 0
              name: <noninit>
            colMask:
              val: 15
              name: <noninit>
          rtBlend1:
            srcBlend:
              val: 1
              name: <noninit>
            destBlend:
              val: 0
              name: <noninit>
            srcBlendAlpha:
              val: 1
              name: <noninit>
            destBlendAlpha:
              val: 0
              name: <noninit>
            blendOp:
              val: 0
              name: <noninit>
            blendOpAlpha:
              val: 0
              name: <noninit>
            colMask:
              val: 15
              name: <noninit>
          rtBlend2:
            srcBlend:
              val: 1
              name: <noninit>
            destBlend:
              val: 0
              name: <noninit>
            srcBlendAlpha:
              val: 1
              name: <noninit>
            destBlendAlpha:
              val: 0
              name: <noninit>
            blendOp:
              val: 0
              name: <noninit>
            blendOpAlpha:
              val: 0
              name: <noninit>
            colMask:
              val: 15
              name: <noninit>
          rtBlend3:
            srcBlend:
              val: 1
              name: <noninit>
            destBlend:
              val: 0
              name: <noninit>
            srcBlendAlpha:
              val: 1
              name: <noninit>
            destBlendAlpha:
              val: 0
              name: <noninit>
            blendOp:
              val: 0
              name: <noninit>
            blendOpAlpha:
              val: 0
              name: <noninit>
            colMask:
              val: 15
              name: <noninit>
          rtBlend4:
            srcBlend:
              val: 1
              name: <noninit>
            destBlend:
              val: 0
              name: <noninit>
            srcBlendAlpha:
              val: 1
              name: <noninit>
            destBlendAlpha:
              val: 0
              name: <noninit>
            blendOp:
              val: 0
              name: <noninit>
            blendOpAlpha:
              val: 0
              name: <noninit>
            colMask:
              val: 15
              name: <noninit>
          rtBlend5:
            srcBlend:
              val: 1
              name: <noninit>
            destBlend:
              val: 0
              name: <noninit>
            srcBlendAlpha:
              val: 1
              name: <noninit>
            destBlendAlpha:
              val: 0
              name: <noninit>
            blendOp:
              val: 0
              name: <noninit>
            blendOpAlpha:
              val: 0
              name: <noninit>
            colMask:
              val: 15
              name: <noninit>
          rtBlend6:
            srcBlend:
              val: 1
              name: <noninit>
            destBlend:
              val: 0
              name: <noninit>
            srcBlendAlpha:
              val: 1
              name: <noninit>
            destBlendAlpha:
              val: 0
              name: <noninit>
            blendOp:
              val: 0
              name: <noninit>
            blendOpAlpha:
              val: 0
              name: <noninit>
            colMask:
              val: 15
              name: <noninit>
          rtBlend7:
            srcBlend:
              val: 1
              name: <noninit>
            destBlend:
              val: 0
              name: <noninit>
            srcBlendAlpha:
              val: 1
              name: <noninit>
            destBlendAlpha:
              val: 0
              name: <noninit>
            blendOp:
              val: 0
              name: <noninit>
            blendOpAlpha:
              val: 0
              name: <noninit>
            colMask:
              val: 15
              name: <noninit>
          rtSeparateBlend: 0
          zTest:
            val: 4
            name: <noninit>
          zWrite:
            val: 1
            name: <noninit>
          culling:
            val: 2
            name: <noninit>
          offsetFactor:
            val: 0
            name: <noninit>
          offsetUnits:
            val: 0
            name: <noninit>
          alphaToMask:
            val: 0
            name: <noninit>
          stencilOp:
            pass:
              val: 0
              name: <noninit>
            fail:
              val: 0
              name: <noninit>
            zFail:
              val: 0
              name: <noninit>
            comp:
              val: 8
              name: <noninit>
          stencilOpFront:
            pass:
              val: 0
              name: <noninit>
            fail:
              val: 0
              name: <noninit>
            zFail:
              val: 0
              name: <noninit>
            comp:
              val: 8
              name: <noninit>
          stencilOpBack:
            pass:
              val: 0
              name: <noninit>
            fail:
              val: 0
              name: <noninit>
            zFail:
              val: 0
              name: <noninit>
            comp:
              val: 8
              name: <noninit>
          stencilReadMask:
            val: 255
            name: <noninit>
          stencilWriteMask:
            val: 255
            name: <noninit>
          stencilRef:
            val: 0
            name: <noninit>
          fogStart:
            val: 0
            name: unity_FogStart
          fogEnd:
            val: 0
            name: unity_FogEnd
          fogDensity:
            val: 0
            name: unity_FogDensity
          fogColor:
            x:
              val: 0
              name: <noninit>
            y:
              val: 0
              name: <noninit>
            z:
              val: 0
              name: <noninit>
            w:
              val: 0
              name: <noninit>
            name: unity_FogColor
          fogMode: -1
          gpuProgramID: 305908
          m_Tags:
            tags:
              LIGHTMODE: DEFERRED
              RenderType: Opaque
          m_LOD: 400
          lighting: 0
        m_ProgramMask: 6
        progVertex:
          m_SubPrograms: []
        progFragment:
          m_SubPrograms: []
        progGeometry:
          m_SubPrograms: []
        progHull:
          m_SubPrograms: []
        progDomain:
          m_SubPrograms: []
        m_HasInstancingVariant: 1
        m_UseName: 
        m_Name: 
        m_TextureName: 
        m_Tags:
          tags: {}
      - m_NameIndices: {}
        m_Type: 0
        m_State:
          serializedVersion: 2
          m_Name: META
          rtBlend0:
            srcBlend:
              val: 1
              name: <noninit>
            destBlend:
              val: 0
              name: <noninit>
            srcBlendAlpha:
              val: 1
              name: <noninit>
            destBlendAlpha:
              val: 0
              name: <noninit>
            blendOp:
              val: 0
              name: <noninit>
            blendOpAlpha:
              val: 0
              name: <noninit>
            colMask:
              val: 15
              name: <noninit>
          rtBlend1:
            srcBlend:
              val: 1
              name: <noninit>
            destBlend:
              val: 0
              name: <noninit>
            srcBlendAlpha:
              val: 1
              name: <noninit>
            destBlendAlpha:
              val: 0
              name: <noninit>
            blendOp:
              val: 0
              name: <noninit>
            blendOpAlpha:
              val: 0
              name: <noninit>
            colMask:
              val: 15
              name: <noninit>
          rtBlend2:
            srcBlend:
              val: 1
              name: <noninit>
            destBlend:
              val: 0
              name: <noninit>
            srcBlendAlpha:
              val: 1
              name: <noninit>
            destBlendAlpha:
              val: 0
              name: <noninit>
            blendOp:
              val: 0
              name: <noninit>
            blendOpAlpha:
              val: 0
              name: <noninit>
            colMask:
              val: 15
              name: <noninit>
          rtBlend3:
            srcBlend:
              val: 1
              name: <noninit>
            destBlend:
              val: 0
              name: <noninit>
            srcBlendAlpha:
              val: 1
              name: <noninit>
            destBlendAlpha:
              val: 0
              name: <noninit>
            blendOp:
              val: 0
              name: <noninit>
            blendOpAlpha:
              val: 0
              name: <noninit>
            colMask:
              val: 15
              name: <noninit>
          rtBlend4:
            srcBlend:
              val: 1
              name: <noninit>
            destBlend:
              val: 0
              name: <noninit>
            srcBlendAlpha:
              val: 1
              name: <noninit>
            destBlendAlpha:
              val: 0
              name: <noninit>
            blendOp:
              val: 0
              name: <noninit>
            blendOpAlpha:
              val: 0
              name: <noninit>
            colMask:
              val: 15
              name: <noninit>
          rtBlend5:
            srcBlend:
              val: 1
              name: <noninit>
            destBlend:
              val: 0
              name: <noninit>
            srcBlendAlpha:
              val: 1
              name: <noninit>
            destBlendAlpha:
              val: 0
              name: <noninit>
            blendOp:
              val: 0
              name: <noninit>
            blendOpAlpha:
              val: 0
              name: <noninit>
            colMask:
              val: 15
              name: <noninit>
          rtBlend6:
            srcBlend:
              val: 1
              name: <noninit>
            destBlend:
              val: 0
              name: <noninit>
            srcBlendAlpha:
              val: 1
              name: <noninit>
            destBlendAlpha:
              val: 0
              name: <noninit>
            blendOp:
              val: 0
              name: <noninit>
            blendOpAlpha:
              val: 0
              name: <noninit>
            colMask:
              val: 15
              name: <noninit>
          rtBlend7:
            srcBlend:
              val: 1
              name: <noninit>
            destBlend:
              val: 0
              name: <noninit>
            srcBlendAlpha:
              val: 1
              name: <noninit>
            destBlendAlpha:
              val: 0
              name: <noninit>
            blendOp:
              val: 0
              name: <noninit>
            blendOpAlpha:
              val: 0
              name: <noninit>
            colMask:
              val: 15
              name: <noninit>
          rtSeparateBlend: 0
          zTest:
            val: 4
            name: <noninit>
          zWrite:
            val: 1
            name: <noninit>
          culling:
            val: 0
            name: <noninit>
          offsetFactor:
            val: 0
            name: <noninit>
          offsetUnits:
            val: 0
            name: <noninit>
          alphaToMask:
            val: 0
            name: <noninit>
          stencilOp:
            pass:
              val: 0
              name: <noninit>
            fail:
              val: 0
              name: <noninit>
            zFail:
              val: 0
              name: <noninit>
            comp:
              val: 8
              name: <noninit>
          stencilOpFront:
            pass:
              val: 0
              name: <noninit>
            fail:
              val: 0
              name: <noninit>
            zFail:
              val: 0
              name: <noninit>
            comp:
              val: 8
              name: <noninit>
          stencilOpBack:
            pass:
              val: 0
              name: <noninit>
            fail:
              val: 0
              name: <noninit>
            zFail:
              val: 0
              name: <noninit>
            comp:
              val: 8
              name: <noninit>
          stencilReadMask:
            val: 255
            name: <noninit>
          stencilWriteMask:
            val: 255
            name: <noninit>
          stencilRef:
            val: 0
            name: <noninit>
          fogStart:
            val: 0
            name: unity_FogStart
          fogEnd:
            val: 0
            name: unity_FogEnd
          fogDensity:
            val: 0
            name: unity_FogDensity
          fogColor:
            x:
              val: 0
              name: <noninit>
            y:
              val: 0
              name: <noninit>
            z:
              val: 0
              name: <noninit>
            w:
              val: 0
              name: <noninit>
            name: unity_FogColor
          fogMode: -1
          gpuProgramID: 383441
          m_Tags:
            tags:
              LIGHTMODE: META
              RenderType: Opaque
          m_LOD: 400
          lighting: 0
        m_ProgramMask: 6
        progVertex:
          m_SubPrograms: []
        progFragment:
          m_SubPrograms: []
        progGeometry:
          m_SubPrograms: []
        progHull:
          m_SubPrograms: []
        progDomain:
          m_SubPrograms: []
        m_HasInstancingVariant: 0
        m_UseName: 
        m_Name: 
        m_TextureName: 
        m_Tags:
          tags: {}
      m_Tags:
        tags:
          RenderType: Opaque
      m_LOD: 400
    m_Name: Houdini/SpecularVertexColor
    m_CustomEditorName: 
    m_FallbackName: Specular
    m_Dependencies: []
    m_DisableNoSubshadersMessage: 0
  platforms: 
  offsets: 
  compressedLengths: 
  decompressedLengths: 
  compressedBlob: 
  m_Dependencies:
  - {fileID: 3, guid: 0000000000000000f000000000000000, type: 0}
  - {fileID: 6, guid: 0000000000000000f000000000000000, type: 0}
  m_ShaderIsBaked: 0
  m_DefaultTextures: {}
  m_CompileInfo:
    m_Snippets:
      45143:
        serializedVersion: 2
        m_Code: "#line 21 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          multi_compile_instancing\n#pragma multi_compile_fog\n#pragma multi_compile_fwdbase\n#include
          \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n#include
          \"UnityShaderUtilities.cginc\"\n// -------- variant for: <when no other
          keywords are defined>\n#if !defined(INSTANCING_ON)\n// Surface shader code
          generated based on:\n// writes to per-pixel normal: no\n// writes to emission:
          no\n// writes to occlusion: no\n// needs world space reflection vector:
          no\n// needs world space normal vector: no\n// needs screen space position:
          no\n// needs world space position: no\n// needs view direction: no\n// needs
          world space view direction: no\n// needs world space position for lighting:
          YES\n// needs world space view direction for lighting: YES\n// needs world
          space view direction for lightmaps: no\n// needs vertex color: no\n// needs
          VFACE: no\n// passes tangent-to-world matrix to pixel shader: no\n// reads
          from normal: no\n// 1 texcoords actually used\n//   float2 _MainTex\n#define
          UNITY_PASS_FORWARDBASE\n#include \"UnityCG.cginc\"\n#include \"Lighting.cginc\"\n#include
          \"AutoLight.cginc\"\n\n#define INTERNAL_DATA\n#define WorldReflectionVector(data,normal)
          data.worldRefl\n#define WorldNormalVector(data,normal) normal\n\n// Original
          surface shader snippet:\n#line 11 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n/*
          UNITY: Original start of shader */\n//#pragma surface surf BlinnPhong\n\nsampler2D
          _MainTex;\nfixed4 _Color;\nhalf _Shininess;\n\nstruct Input {\n    float2
          uv_MainTex;\n};\n\nvoid surf (Input IN, inout SurfaceOutput o) {\n    fixed4
          tex = tex2D(_MainTex, IN.uv_MainTex);\n    o.Albedo = tex.rgb * _Color.rgb;\n
          \   o.Gloss = tex.a;\n    o.Alpha = tex.a * _Color.a;\n    o.Specular =
          _Shininess;\n}\n\n\n// vertex-to-fragment interpolation data\n// no lightmaps:\n#ifndef
          LIGHTMAP_ON\nstruct v2f_surf {\n  UNITY_POSITION(pos);\n  float2 pack0 :
          TEXCOORD0; // _MainTex\n  half3 worldNormal : TEXCOORD1;\n  float3 worldPos
          : TEXCOORD2;\n  #if UNITY_SHOULD_SAMPLE_SH\n  half3 sh : TEXCOORD3; // SH\n
          \ #endif\n  UNITY_SHADOW_COORDS(4)\n  UNITY_FOG_COORDS(5)\n  #if SHADER_TARGET
          >= 30\n  float4 lmap : TEXCOORD6;\n  #endif\n  UNITY_VERTEX_INPUT_INSTANCE_ID\n
          \ UNITY_VERTEX_OUTPUT_STEREO\n};\n#endif\n// with lightmaps:\n#ifdef LIGHTMAP_ON\nstruct
          v2f_surf {\n  UNITY_POSITION(pos);\n  float2 pack0 : TEXCOORD0; // _MainTex\n
          \ half3 worldNormal : TEXCOORD1;\n  float3 worldPos : TEXCOORD2;\n  float4
          lmap : TEXCOORD3;\n  UNITY_SHADOW_COORDS(4)\n  UNITY_FOG_COORDS(5)\n  #ifdef
          DIRLIGHTMAP_COMBINED\n  fixed3 tSpace0 : TEXCOORD6;\n  fixed3 tSpace1 :
          TEXCOORD7;\n  fixed3 tSpace2 : TEXCOORD8;\n  #endif\n  UNITY_VERTEX_INPUT_INSTANCE_ID\n
          \ UNITY_VERTEX_OUTPUT_STEREO\n};\n#endif\nfloat4 _MainTex_ST;\n\n// vertex
          shader\nv2f_surf vert_surf (appdata_full v) {\n  UNITY_SETUP_INSTANCE_ID(v);\n
          \ v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n  UNITY_TRANSFER_INSTANCE_ID(v,o);\n
          \ UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);\n  o.pos = UnityObjectToClipPos(v.vertex);\n
          \ o.pack0.xy = TRANSFORM_TEX(v.texcoord, _MainTex);\n  float3 worldPos =
          mul(unity_ObjectToWorld, v.vertex).xyz;\n  fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);\n
          \ #if defined(LIGHTMAP_ON) && defined(DIRLIGHTMAP_COMBINED)\n  fixed3 worldTangent
          = UnityObjectToWorldDir(v.tangent.xyz);\n  fixed tangentSign = v.tangent.w
          * unity_WorldTransformParams.w;\n  fixed3 worldBinormal = cross(worldNormal,
          worldTangent) * tangentSign;\n  #endif\n  #if defined(LIGHTMAP_ON) && defined(DIRLIGHTMAP_COMBINED)\n
          \ o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);\n
          \ o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);\n
          \ o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);\n
          \ #endif\n  o.worldPos = worldPos;\n  o.worldNormal = worldNormal;\n  #ifdef
          DYNAMICLIGHTMAP_ON\n  o.lmap.zw = v.texcoord2.xy * unity_DynamicLightmapST.xy
          + unity_DynamicLightmapST.zw;\n  #endif\n  #ifdef LIGHTMAP_ON\n  o.lmap.xy
          = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;\n  #endif\n\n
          \ // SH/ambient and vertex lights\n  #ifndef LIGHTMAP_ON\n    #if UNITY_SHOULD_SAMPLE_SH\n
          \     o.sh = 0;\n      // Approximated illumination from non-important point
          lights\n      #ifdef VERTEXLIGHT_ON\n        o.sh += Shade4PointLights (\n
          \         unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,\n          unity_LightColor[0].rgb,
          unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,\n
          \         unity_4LightAtten0, worldPos, worldNormal);\n      #endif\n      o.sh
          = ShadeSHPerVertex (worldNormal, o.sh);\n    #endif\n  #endif // !LIGHTMAP_ON\n\n
          \ UNITY_TRANSFER_SHADOW(o,v.texcoord1.xy); // pass shadow coordinates to
          pixel shader\n  UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to
          pixel shader\n  return o;\n}\n\n// fragment shader\nfixed4 frag_surf (v2f_surf
          IN) : SV_Target {\n  UNITY_SETUP_INSTANCE_ID(IN);\n  // prepare and unpack
          data\n  Input surfIN;\n  UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n  surfIN.uv_MainTex.x
          = 1.0;\n  surfIN.uv_MainTex = IN.pack0.xy;\n  float3 worldPos = IN.worldPos;\n
          \ #ifndef USING_DIRECTIONAL_LIGHT\n    fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));\n
          \ #else\n    fixed3 lightDir = _WorldSpaceLightPos0.xyz;\n  #endif\n  fixed3
          worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));\n  #ifdef UNITY_COMPILER_HLSL\n
          \ SurfaceOutput o = (SurfaceOutput)0;\n  #else\n  SurfaceOutput o;\n  #endif\n
          \ o.Albedo = 0.0;\n  o.Emission = 0.0;\n  o.Specular = 0.0;\n  o.Alpha =
          0.0;\n  o.Gloss = 0.0;\n  fixed3 normalWorldVertex = fixed3(0,0,1);\n  o.Normal
          = IN.worldNormal;\n  normalWorldVertex = IN.worldNormal;\n\n  // call surface
          function\n  surf (surfIN, o);\n\n  // compute lighting & shadowing factor\n
          \ UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)\n  fixed4 c = 0;\n\n  //
          Setup lighting environment\n  UnityGI gi;\n  UNITY_INITIALIZE_OUTPUT(UnityGI,
          gi);\n  gi.indirect.diffuse = 0;\n  gi.indirect.specular = 0;\n  gi.light.color
          = _LightColor0.rgb;\n  gi.light.dir = lightDir;\n  // Call GI (lightmaps/SH/reflections)
          lighting function\n  UnityGIInput giInput;\n  UNITY_INITIALIZE_OUTPUT(UnityGIInput,
          giInput);\n  giInput.light = gi.light;\n  giInput.worldPos = worldPos;\n
          \ giInput.worldViewDir = worldViewDir;\n  giInput.atten = atten;\n  #if
          defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)\n    giInput.lightmapUV
          = IN.lmap;\n  #else\n    giInput.lightmapUV = 0.0;\n  #endif\n  #if UNITY_SHOULD_SAMPLE_SH\n
          \   giInput.ambient = IN.sh;\n  #else\n    giInput.ambient.rgb = 0.0;\n
          \ #endif\n  giInput.probeHDR[0] = unity_SpecCube0_HDR;\n  giInput.probeHDR[1]
          = unity_SpecCube1_HDR;\n  #if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)\n
          \   giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for
          blending\n  #endif\n  #ifdef UNITY_SPECCUBE_BOX_PROJECTION\n    giInput.boxMax[0]
          = unity_SpecCube0_BoxMax;\n    giInput.probePosition[0] = unity_SpecCube0_ProbePosition;\n
          \   giInput.boxMax[1] = unity_SpecCube1_BoxMax;\n    giInput.boxMin[1] =
          unity_SpecCube1_BoxMin;\n    giInput.probePosition[1] = unity_SpecCube1_ProbePosition;\n
          \ #endif\n  LightingBlinnPhong_GI(o, giInput, gi);\n\n  // realtime lighting:
          call lighting function\n  c += LightingBlinnPhong (o, worldViewDir, gi);\n
          \ UNITY_APPLY_FOG(IN.fogCoord, c); // apply fog\n  UNITY_OPAQUE_ALPHA(c.a);\n
          \ return c;\n}\n\n\n#endif\n\n// -------- variant for: INSTANCING_ON \n#if
          defined(INSTANCING_ON)\n// Surface shader code generated based on:\n// writes
          to per-pixel normal: no\n// writes to emission: no\n// writes to occlusion:
          no\n// needs world space reflection vector: no\n// needs world space normal
          vector: no\n// needs screen space position: no\n// needs world space position:
          no\n// needs view direction: no\n// needs world space view direction: no\n//
          needs world space position for lighting: YES\n// needs world space view
          direction for lighting: YES\n// needs world space view direction for lightmaps:
          no\n// needs vertex color: no\n// needs VFACE: no\n// passes tangent-to-world
          matrix to pixel shader: no\n// reads from normal: no\n// 1 texcoords actually
          used\n//   float2 _MainTex\n#define UNITY_PASS_FORWARDBASE\n#include \"UnityCG.cginc\"\n#include
          \"Lighting.cginc\"\n#include \"AutoLight.cginc\"\n\n#define INTERNAL_DATA\n#define
          WorldReflectionVector(data,normal) data.worldRefl\n#define WorldNormalVector(data,normal)
          normal\n\n// Original surface shader snippet:\n#line 11 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n/*
          UNITY: Original start of shader */\n//#pragma surface surf BlinnPhong\n\nsampler2D
          _MainTex;\nfixed4 _Color;\nhalf _Shininess;\n\nstruct Input {\n    float2
          uv_MainTex;\n};\n\nvoid surf (Input IN, inout SurfaceOutput o) {\n    fixed4
          tex = tex2D(_MainTex, IN.uv_MainTex);\n    o.Albedo = tex.rgb * _Color.rgb;\n
          \   o.Gloss = tex.a;\n    o.Alpha = tex.a * _Color.a;\n    o.Specular =
          _Shininess;\n}\n\n\n// vertex-to-fragment interpolation data\n// no lightmaps:\n#ifndef
          LIGHTMAP_ON\nstruct v2f_surf {\n  UNITY_POSITION(pos);\n  float2 pack0 :
          TEXCOORD0; // _MainTex\n  half3 worldNormal : TEXCOORD1;\n  float3 worldPos
          : TEXCOORD2;\n  #if UNITY_SHOULD_SAMPLE_SH\n  half3 sh : TEXCOORD3; // SH\n
          \ #endif\n  UNITY_SHADOW_COORDS(4)\n  UNITY_FOG_COORDS(5)\n  #if SHADER_TARGET
          >= 30\n  float4 lmap : TEXCOORD6;\n  #endif\n  UNITY_VERTEX_INPUT_INSTANCE_ID\n
          \ UNITY_VERTEX_OUTPUT_STEREO\n};\n#endif\n// with lightmaps:\n#ifdef LIGHTMAP_ON\nstruct
          v2f_surf {\n  UNITY_POSITION(pos);\n  float2 pack0 : TEXCOORD0; // _MainTex\n
          \ half3 worldNormal : TEXCOORD1;\n  float3 worldPos : TEXCOORD2;\n  float4
          lmap : TEXCOORD3;\n  UNITY_SHADOW_COORDS(4)\n  UNITY_FOG_COORDS(5)\n  #ifdef
          DIRLIGHTMAP_COMBINED\n  fixed3 tSpace0 : TEXCOORD6;\n  fixed3 tSpace1 :
          TEXCOORD7;\n  fixed3 tSpace2 : TEXCOORD8;\n  #endif\n  UNITY_VERTEX_INPUT_INSTANCE_ID\n
          \ UNITY_VERTEX_OUTPUT_STEREO\n};\n#endif\nfloat4 _MainTex_ST;\n\n// vertex
          shader\nv2f_surf vert_surf (appdata_full v) {\n  UNITY_SETUP_INSTANCE_ID(v);\n
          \ v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n  UNITY_TRANSFER_INSTANCE_ID(v,o);\n
          \ UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);\n  o.pos = UnityObjectToClipPos(v.vertex);\n
          \ o.pack0.xy = TRANSFORM_TEX(v.texcoord, _MainTex);\n  float3 worldPos =
          mul(unity_ObjectToWorld, v.vertex).xyz;\n  fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);\n
          \ #if defined(LIGHTMAP_ON) && defined(DIRLIGHTMAP_COMBINED)\n  fixed3 worldTangent
          = UnityObjectToWorldDir(v.tangent.xyz);\n  fixed tangentSign = v.tangent.w
          * unity_WorldTransformParams.w;\n  fixed3 worldBinormal = cross(worldNormal,
          worldTangent) * tangentSign;\n  #endif\n  #if defined(LIGHTMAP_ON) && defined(DIRLIGHTMAP_COMBINED)\n
          \ o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);\n
          \ o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);\n
          \ o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);\n
          \ #endif\n  o.worldPos = worldPos;\n  o.worldNormal = worldNormal;\n  #ifdef
          DYNAMICLIGHTMAP_ON\n  o.lmap.zw = v.texcoord2.xy * unity_DynamicLightmapST.xy
          + unity_DynamicLightmapST.zw;\n  #endif\n  #ifdef LIGHTMAP_ON\n  o.lmap.xy
          = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;\n  #endif\n\n
          \ // SH/ambient and vertex lights\n  #ifndef LIGHTMAP_ON\n    #if UNITY_SHOULD_SAMPLE_SH\n
          \     o.sh = 0;\n      // Approximated illumination from non-important point
          lights\n      #ifdef VERTEXLIGHT_ON\n        o.sh += Shade4PointLights (\n
          \         unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,\n          unity_LightColor[0].rgb,
          unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,\n
          \         unity_4LightAtten0, worldPos, worldNormal);\n      #endif\n      o.sh
          = ShadeSHPerVertex (worldNormal, o.sh);\n    #endif\n  #endif // !LIGHTMAP_ON\n\n
          \ UNITY_TRANSFER_SHADOW(o,v.texcoord1.xy); // pass shadow coordinates to
          pixel shader\n  UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to
          pixel shader\n  return o;\n}\n\n// fragment shader\nfixed4 frag_surf (v2f_surf
          IN) : SV_Target {\n  UNITY_SETUP_INSTANCE_ID(IN);\n  // prepare and unpack
          data\n  Input surfIN;\n  UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n  surfIN.uv_MainTex.x
          = 1.0;\n  surfIN.uv_MainTex = IN.pack0.xy;\n  float3 worldPos = IN.worldPos;\n
          \ #ifndef USING_DIRECTIONAL_LIGHT\n    fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));\n
          \ #else\n    fixed3 lightDir = _WorldSpaceLightPos0.xyz;\n  #endif\n  fixed3
          worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));\n  #ifdef UNITY_COMPILER_HLSL\n
          \ SurfaceOutput o = (SurfaceOutput)0;\n  #else\n  SurfaceOutput o;\n  #endif\n
          \ o.Albedo = 0.0;\n  o.Emission = 0.0;\n  o.Specular = 0.0;\n  o.Alpha =
          0.0;\n  o.Gloss = 0.0;\n  fixed3 normalWorldVertex = fixed3(0,0,1);\n  o.Normal
          = IN.worldNormal;\n  normalWorldVertex = IN.worldNormal;\n\n  // call surface
          function\n  surf (surfIN, o);\n\n  // compute lighting & shadowing factor\n
          \ UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)\n  fixed4 c = 0;\n\n  //
          Setup lighting environment\n  UnityGI gi;\n  UNITY_INITIALIZE_OUTPUT(UnityGI,
          gi);\n  gi.indirect.diffuse = 0;\n  gi.indirect.specular = 0;\n  gi.light.color
          = _LightColor0.rgb;\n  gi.light.dir = lightDir;\n  // Call GI (lightmaps/SH/reflections)
          lighting function\n  UnityGIInput giInput;\n  UNITY_INITIALIZE_OUTPUT(UnityGIInput,
          giInput);\n  giInput.light = gi.light;\n  giInput.worldPos = worldPos;\n
          \ giInput.worldViewDir = worldViewDir;\n  giInput.atten = atten;\n  #if
          defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)\n    giInput.lightmapUV
          = IN.lmap;\n  #else\n    giInput.lightmapUV = 0.0;\n  #endif\n  #if UNITY_SHOULD_SAMPLE_SH\n
          \   giInput.ambient = IN.sh;\n  #else\n    giInput.ambient.rgb = 0.0;\n
          \ #endif\n  giInput.probeHDR[0] = unity_SpecCube0_HDR;\n  giInput.probeHDR[1]
          = unity_SpecCube1_HDR;\n  #if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)\n
          \   giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for
          blending\n  #endif\n  #ifdef UNITY_SPECCUBE_BOX_PROJECTION\n    giInput.boxMax[0]
          = unity_SpecCube0_BoxMax;\n    giInput.probePosition[0] = unity_SpecCube0_ProbePosition;\n
          \   giInput.boxMax[1] = unity_SpecCube1_BoxMax;\n    giInput.boxMin[1] =
          unity_SpecCube1_BoxMin;\n    giInput.probePosition[1] = unity_SpecCube1_ProbePosition;\n
          \ #endif\n  LightingBlinnPhong_GI(o, giInput, gi);\n\n  // realtime lighting:
          call lighting function\n  c += LightingBlinnPhong (o, worldViewDir, gi);\n
          \ UNITY_APPLY_FOG(IN.fogCoord, c); // apply fog\n  UNITY_OPAQUE_ALPHA(c.a);\n
          \ return c;\n}\n\n\n#endif\n\n\n"
        m_AssetPath: Assets/DefaultResourcesExtra
        m_PlatformMask: 4294967295
        m_HardwareTierVariantsMask: 0
        m_StartLine: 23
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: 4f737aa83347f31e93238fe60ecde340
        m_FromOther: 1
        m_Language: 0
        m_VariantsUser0:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        - - __
          - INSTANCING_ON
        m_VariantsUser1:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        - - __
          - INSTANCING_ON
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0:
        - - DIRECTIONAL
        - - DIRECTIONAL
          - SHADOWS_SHADOWMASK
        - - DIRECTIONAL
          - DYNAMICLIGHTMAP_ON
        - - DIRECTIONAL
          - LIGHTMAP_ON
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DYNAMICLIGHTMAP_ON
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - LIGHTMAP_SHADOW_MIXING
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DYNAMICLIGHTMAP_ON
          - LIGHTMAP_SHADOW_MIXING
        - - DIRECTIONAL
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - LIGHTMAP_SHADOW_MIXING
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - LIGHTMAP_SHADOW_MIXING
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - SHADOWS_SHADOWMASK
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SHADOWMASK
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - SHADOWS_SHADOWMASK
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SHADOWMASK
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
        - - DIRECTIONAL
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
        - - DIRECTIONAL
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
        - - DIRECTIONAL
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
        - - DIRECTIONAL
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - SHADOWS_SCREEN
          - LIGHTMAP_SHADOW_MIXING
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - LIGHTMAP_SHADOW_MIXING
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
        - - DIRECTIONAL
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - SHADOWS_SCREEN
          - LIGHTMAP_SHADOW_MIXING
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - LIGHTMAP_SHADOW_MIXING
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
        - - DIRECTIONAL
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - DYNAMICLIGHTMAP_ON
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
        m_VariantsBuiltin1:
        - - DIRECTIONAL
        - - DIRECTIONAL
          - SHADOWS_SHADOWMASK
        - - DIRECTIONAL
          - DYNAMICLIGHTMAP_ON
        - - DIRECTIONAL
          - LIGHTMAP_ON
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DYNAMICLIGHTMAP_ON
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - LIGHTMAP_SHADOW_MIXING
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DYNAMICLIGHTMAP_ON
          - LIGHTMAP_SHADOW_MIXING
        - - DIRECTIONAL
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - LIGHTMAP_SHADOW_MIXING
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - LIGHTMAP_SHADOW_MIXING
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - SHADOWS_SHADOWMASK
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SHADOWMASK
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - SHADOWS_SHADOWMASK
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SHADOWMASK
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
        - - DIRECTIONAL
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
        - - DIRECTIONAL
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
        - - DIRECTIONAL
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
        - - DIRECTIONAL
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - SHADOWS_SCREEN
          - LIGHTMAP_SHADOW_MIXING
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - LIGHTMAP_SHADOW_MIXING
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
        - - DIRECTIONAL
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - SHADOWS_SCREEN
          - LIGHTMAP_SHADOW_MIXING
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - LIGHTMAP_SHADOW_MIXING
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_BaseRequirements: 33
        m_KeywordTargetInfo:
        - keywordName: SHADOWS_SOFT
          requirements: 227
        - keywordName: DIRLIGHTMAP_COMBINED
          requirements: 227
        - keywordName: DIRLIGHTMAP_SEPARATE
          requirements: 227
        - keywordName: DYNAMICLIGHTMAP_ON
          requirements: 227
        - keywordName: SHADOWS_SCREEN
          requirements: 227
        - keywordName: INSTANCING_ON
          requirements: 2048
        - keywordName: PROCEDURAL_INSTANCING_ON
          requirements: 16384
        - keywordName: STEREO_MULTIVIEW_ON
          requirements: 4087
        - keywordName: STEREO_INSTANCING_ON
          requirements: 4087
        m_NonStrippedUserKeywords: FOG_EXP FOG_EXP2 FOG_LINEAR INSTANCING_ON
        m_BuiltinKeywords: DIRECTIONAL DIRLIGHTMAP_COMBINED DYNAMICLIGHTMAP_ON LIGHTMAP_ON
          LIGHTMAP_SHADOW_MIXING SHADOWS_SCREEN SHADOWS_SHADOWMASK VERTEXLIGHT_ON
      49395:
        serializedVersion: 2
        m_Code: "#line 21 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          multi_compile_instancing\n#pragma multi_compile_fog\n#pragma multi_compile_fwdbase\n#include
          \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n#include
          \"UnityShaderUtilities.cginc\"\n// -------- variant for: <when no other
          keywords are defined>\n#if !defined(INSTANCING_ON)\n// Surface shader code
          generated based on:\n// writes to per-pixel normal: YES\n// writes to emission:
          no\n// writes to occlusion: no\n// needs world space reflection vector:
          no\n// needs world space normal vector: no\n// needs screen space position:
          no\n// needs world space position: no\n// needs view direction: no\n// needs
          world space view direction: no\n// needs world space position for lighting:
          YES\n// needs world space view direction for lighting: YES\n// needs world
          space view direction for lightmaps: no\n// needs vertex color: YES\n// needs
          VFACE: no\n// passes tangent-to-world matrix to pixel shader: YES\n// reads
          from normal: no\n// 2 texcoords actually used\n//   float2 _MainTex\n//
          \  float2 _BumpMap\n#define UNITY_PASS_FORWARDBASE\n#include \"UnityCG.cginc\"\n#include
          \"Lighting.cginc\"\n#include \"AutoLight.cginc\"\n\n#define INTERNAL_DATA
          half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;\n#define
          WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal),
          dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))\n#define
          WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal),
          dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))\n\n//
          Original surface shader snippet:\n#line 11 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n/*
          UNITY: Original start of shader */\n\t\t\t//#pragma surface surf BlinnPhong\n\n\t\t\tsampler2D
          _MainTex;\n\t\t\tsampler2D _BumpMap;\n\t\t\tfixed4 _Color;\n\t\t\thalf _Shininess;\n\n\t\t\tstruct
          Input {\n\t\t\t\tfloat2 uv_MainTex;\n\t\t\t\tfloat2 uv_BumpMap;\n\t\t\t\tfloat4
          color: Color;\n\t\t\t};\n\n\t\t\tvoid surf ( Input IN, inout SurfaceOutput
          o ) {\n\t\t\t\tfixed4 tex = tex2D( _MainTex, IN.uv_MainTex );\n\t\t\t\to.Albedo
          = tex.rgb * _Color.rgb * IN.color.rgb;\n\t\t\t\to.Gloss = tex.a;\n\t\t\t\to.Alpha
          = tex.a * _Color.a;\n\t\t\t\to.Specular = _Shininess;\n\t\t\t\to.Normal
          = UnpackNormal( tex2D( _BumpMap, IN.uv_BumpMap ) );\n\t\t\t}\n\t\t\n\n//
          vertex-to-fragment interpolation data\n// no lightmaps:\n#ifndef LIGHTMAP_ON\nstruct
          v2f_surf {\n  UNITY_POSITION(pos);\n  float4 pack0 : TEXCOORD0; // _MainTex
          _BumpMap\n  float4 tSpace0 : TEXCOORD1;\n  float4 tSpace1 : TEXCOORD2;\n
          \ float4 tSpace2 : TEXCOORD3;\n  fixed4 color : COLOR0;\n  #if UNITY_SHOULD_SAMPLE_SH\n
          \ half3 sh : TEXCOORD4; // SH\n  #endif\n  UNITY_SHADOW_COORDS(5)\n  UNITY_FOG_COORDS(6)\n
          \ #if SHADER_TARGET >= 30\n  float4 lmap : TEXCOORD7;\n  #endif\n  UNITY_VERTEX_INPUT_INSTANCE_ID\n
          \ UNITY_VERTEX_OUTPUT_STEREO\n};\n#endif\n// with lightmaps:\n#ifdef LIGHTMAP_ON\nstruct
          v2f_surf {\n  UNITY_POSITION(pos);\n  float4 pack0 : TEXCOORD0; // _MainTex
          _BumpMap\n  float4 tSpace0 : TEXCOORD1;\n  float4 tSpace1 : TEXCOORD2;\n
          \ float4 tSpace2 : TEXCOORD3;\n  fixed4 color : COLOR0;\n  float4 lmap :
          TEXCOORD4;\n  UNITY_SHADOW_COORDS(5)\n  UNITY_FOG_COORDS(6)\n  UNITY_VERTEX_INPUT_INSTANCE_ID\n
          \ UNITY_VERTEX_OUTPUT_STEREO\n};\n#endif\nfloat4 _MainTex_ST;\nfloat4 _BumpMap_ST;\n\n//
          vertex shader\nv2f_surf vert_surf (appdata_full v) {\n  UNITY_SETUP_INSTANCE_ID(v);\n
          \ v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n  UNITY_TRANSFER_INSTANCE_ID(v,o);\n
          \ UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);\n  o.pos = UnityObjectToClipPos(v.vertex);\n
          \ o.pack0.xy = TRANSFORM_TEX(v.texcoord, _MainTex);\n  o.pack0.zw = TRANSFORM_TEX(v.texcoord,
          _BumpMap);\n  float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;\n
          \ fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);\n  fixed3 worldTangent
          = UnityObjectToWorldDir(v.tangent.xyz);\n  fixed tangentSign = v.tangent.w
          * unity_WorldTransformParams.w;\n  fixed3 worldBinormal = cross(worldNormal,
          worldTangent) * tangentSign;\n  o.tSpace0 = float4(worldTangent.x, worldBinormal.x,
          worldNormal.x, worldPos.x);\n  o.tSpace1 = float4(worldTangent.y, worldBinormal.y,
          worldNormal.y, worldPos.y);\n  o.tSpace2 = float4(worldTangent.z, worldBinormal.z,
          worldNormal.z, worldPos.z);\n  o.color = v.color;\n  #ifdef DYNAMICLIGHTMAP_ON\n
          \ o.lmap.zw = v.texcoord2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;\n
          \ #endif\n  #ifdef LIGHTMAP_ON\n  o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy
          + unity_LightmapST.zw;\n  #endif\n\n  // SH/ambient and vertex lights\n
          \ #ifndef LIGHTMAP_ON\n    #if UNITY_SHOULD_SAMPLE_SH\n      o.sh = 0;\n
          \     // Approximated illumination from non-important point lights\n      #ifdef
          VERTEXLIGHT_ON\n        o.sh += Shade4PointLights (\n          unity_4LightPosX0,
          unity_4LightPosY0, unity_4LightPosZ0,\n          unity_LightColor[0].rgb,
          unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,\n
          \         unity_4LightAtten0, worldPos, worldNormal);\n      #endif\n      o.sh
          = ShadeSHPerVertex (worldNormal, o.sh);\n    #endif\n  #endif // !LIGHTMAP_ON\n\n
          \ UNITY_TRANSFER_SHADOW(o,v.texcoord1.xy); // pass shadow coordinates to
          pixel shader\n  UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to
          pixel shader\n  return o;\n}\n\n// fragment shader\nfixed4 frag_surf (v2f_surf
          IN) : SV_Target {\n  UNITY_SETUP_INSTANCE_ID(IN);\n  // prepare and unpack
          data\n  Input surfIN;\n  UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n  surfIN.uv_MainTex.x
          = 1.0;\n  surfIN.uv_BumpMap.x = 1.0;\n  surfIN.color.x = 1.0;\n  surfIN.uv_MainTex
          = IN.pack0.xy;\n  surfIN.uv_BumpMap = IN.pack0.zw;\n  float3 worldPos =
          float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);\n  #ifndef USING_DIRECTIONAL_LIGHT\n
          \   fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n
          \   fixed3 lightDir = _WorldSpaceLightPos0.xyz;\n  #endif\n  fixed3 worldViewDir
          = normalize(UnityWorldSpaceViewDir(worldPos));\n  surfIN.color = IN.color;\n
          \ #ifdef UNITY_COMPILER_HLSL\n  SurfaceOutput o = (SurfaceOutput)0;\n  #else\n
          \ SurfaceOutput o;\n  #endif\n  o.Albedo = 0.0;\n  o.Emission = 0.0;\n  o.Specular
          = 0.0;\n  o.Alpha = 0.0;\n  o.Gloss = 0.0;\n  fixed3 normalWorldVertex =
          fixed3(0,0,1);\n\n  // call surface function\n  surf (surfIN, o);\n\n  //
          compute lighting & shadowing factor\n  UNITY_LIGHT_ATTENUATION(atten, IN,
          worldPos)\n  fixed4 c = 0;\n  fixed3 worldN;\n  worldN.x = dot(IN.tSpace0.xyz,
          o.Normal);\n  worldN.y = dot(IN.tSpace1.xyz, o.Normal);\n  worldN.z = dot(IN.tSpace2.xyz,
          o.Normal);\n  o.Normal = worldN;\n\n  // Setup lighting environment\n  UnityGI
          gi;\n  UNITY_INITIALIZE_OUTPUT(UnityGI, gi);\n  gi.indirect.diffuse = 0;\n
          \ gi.indirect.specular = 0;\n  gi.light.color = _LightColor0.rgb;\n  gi.light.dir
          = lightDir;\n  // Call GI (lightmaps/SH/reflections) lighting function\n
          \ UnityGIInput giInput;\n  UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);\n
          \ giInput.light = gi.light;\n  giInput.worldPos = worldPos;\n  giInput.worldViewDir
          = worldViewDir;\n  giInput.atten = atten;\n  #if defined(LIGHTMAP_ON) ||
          defined(DYNAMICLIGHTMAP_ON)\n    giInput.lightmapUV = IN.lmap;\n  #else\n
          \   giInput.lightmapUV = 0.0;\n  #endif\n  #if UNITY_SHOULD_SAMPLE_SH\n
          \   giInput.ambient = IN.sh;\n  #else\n    giInput.ambient.rgb = 0.0;\n
          \ #endif\n  giInput.probeHDR[0] = unity_SpecCube0_HDR;\n  giInput.probeHDR[1]
          = unity_SpecCube1_HDR;\n  #if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)\n
          \   giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for
          blending\n  #endif\n  #ifdef UNITY_SPECCUBE_BOX_PROJECTION\n    giInput.boxMax[0]
          = unity_SpecCube0_BoxMax;\n    giInput.probePosition[0] = unity_SpecCube0_ProbePosition;\n
          \   giInput.boxMax[1] = unity_SpecCube1_BoxMax;\n    giInput.boxMin[1] =
          unity_SpecCube1_BoxMin;\n    giInput.probePosition[1] = unity_SpecCube1_ProbePosition;\n
          \ #endif\n  LightingBlinnPhong_GI(o, giInput, gi);\n\n  // realtime lighting:
          call lighting function\n  c += LightingBlinnPhong (o, worldViewDir, gi);\n
          \ UNITY_APPLY_FOG(IN.fogCoord, c); // apply fog\n  UNITY_OPAQUE_ALPHA(c.a);\n
          \ return c;\n}\n\n\n#endif\n\n// -------- variant for: INSTANCING_ON \n#if
          defined(INSTANCING_ON)\n// Surface shader code generated based on:\n// writes
          to per-pixel normal: YES\n// writes to emission: no\n// writes to occlusion:
          no\n// needs world space reflection vector: no\n// needs world space normal
          vector: no\n// needs screen space position: no\n// needs world space position:
          no\n// needs view direction: no\n// needs world space view direction: no\n//
          needs world space position for lighting: YES\n// needs world space view
          direction for lighting: YES\n// needs world space view direction for lightmaps:
          no\n// needs vertex color: YES\n// needs VFACE: no\n// passes tangent-to-world
          matrix to pixel shader: YES\n// reads from normal: no\n// 2 texcoords actually
          used\n//   float2 _MainTex\n//   float2 _BumpMap\n#define UNITY_PASS_FORWARDBASE\n#include
          \"UnityCG.cginc\"\n#include \"Lighting.cginc\"\n#include \"AutoLight.cginc\"\n\n#define
          INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3
          internalSurfaceTtoW2;\n#define WorldReflectionVector(data,normal) reflect
          (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal),
          dot(data.internalSurfaceTtoW2,normal)))\n#define WorldNormalVector(data,normal)
          fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal),
          dot(data.internalSurfaceTtoW2,normal))\n\n// Original surface shader snippet:\n#line
          11 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n/*
          UNITY: Original start of shader */\n\t\t\t//#pragma surface surf BlinnPhong\n\n\t\t\tsampler2D
          _MainTex;\n\t\t\tsampler2D _BumpMap;\n\t\t\tfixed4 _Color;\n\t\t\thalf _Shininess;\n\n\t\t\tstruct
          Input {\n\t\t\t\tfloat2 uv_MainTex;\n\t\t\t\tfloat2 uv_BumpMap;\n\t\t\t\tfloat4
          color: Color;\n\t\t\t};\n\n\t\t\tvoid surf ( Input IN, inout SurfaceOutput
          o ) {\n\t\t\t\tfixed4 tex = tex2D( _MainTex, IN.uv_MainTex );\n\t\t\t\to.Albedo
          = tex.rgb * _Color.rgb * IN.color.rgb;\n\t\t\t\to.Gloss = tex.a;\n\t\t\t\to.Alpha
          = tex.a * _Color.a;\n\t\t\t\to.Specular = _Shininess;\n\t\t\t\to.Normal
          = UnpackNormal( tex2D( _BumpMap, IN.uv_BumpMap ) );\n\t\t\t}\n\t\t\n\n//
          vertex-to-fragment interpolation data\n// no lightmaps:\n#ifndef LIGHTMAP_ON\nstruct
          v2f_surf {\n  UNITY_POSITION(pos);\n  float4 pack0 : TEXCOORD0; // _MainTex
          _BumpMap\n  float4 tSpace0 : TEXCOORD1;\n  float4 tSpace1 : TEXCOORD2;\n
          \ float4 tSpace2 : TEXCOORD3;\n  fixed4 color : COLOR0;\n  #if UNITY_SHOULD_SAMPLE_SH\n
          \ half3 sh : TEXCOORD4; // SH\n  #endif\n  UNITY_SHADOW_COORDS(5)\n  UNITY_FOG_COORDS(6)\n
          \ #if SHADER_TARGET >= 30\n  float4 lmap : TEXCOORD7;\n  #endif\n  UNITY_VERTEX_INPUT_INSTANCE_ID\n
          \ UNITY_VERTEX_OUTPUT_STEREO\n};\n#endif\n// with lightmaps:\n#ifdef LIGHTMAP_ON\nstruct
          v2f_surf {\n  UNITY_POSITION(pos);\n  float4 pack0 : TEXCOORD0; // _MainTex
          _BumpMap\n  float4 tSpace0 : TEXCOORD1;\n  float4 tSpace1 : TEXCOORD2;\n
          \ float4 tSpace2 : TEXCOORD3;\n  fixed4 color : COLOR0;\n  float4 lmap :
          TEXCOORD4;\n  UNITY_SHADOW_COORDS(5)\n  UNITY_FOG_COORDS(6)\n  UNITY_VERTEX_INPUT_INSTANCE_ID\n
          \ UNITY_VERTEX_OUTPUT_STEREO\n};\n#endif\nfloat4 _MainTex_ST;\nfloat4 _BumpMap_ST;\n\n//
          vertex shader\nv2f_surf vert_surf (appdata_full v) {\n  UNITY_SETUP_INSTANCE_ID(v);\n
          \ v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n  UNITY_TRANSFER_INSTANCE_ID(v,o);\n
          \ UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);\n  o.pos = UnityObjectToClipPos(v.vertex);\n
          \ o.pack0.xy = TRANSFORM_TEX(v.texcoord, _MainTex);\n  o.pack0.zw = TRANSFORM_TEX(v.texcoord,
          _BumpMap);\n  float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;\n
          \ fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);\n  fixed3 worldTangent
          = UnityObjectToWorldDir(v.tangent.xyz);\n  fixed tangentSign = v.tangent.w
          * unity_WorldTransformParams.w;\n  fixed3 worldBinormal = cross(worldNormal,
          worldTangent) * tangentSign;\n  o.tSpace0 = float4(worldTangent.x, worldBinormal.x,
          worldNormal.x, worldPos.x);\n  o.tSpace1 = float4(worldTangent.y, worldBinormal.y,
          worldNormal.y, worldPos.y);\n  o.tSpace2 = float4(worldTangent.z, worldBinormal.z,
          worldNormal.z, worldPos.z);\n  o.color = v.color;\n  #ifdef DYNAMICLIGHTMAP_ON\n
          \ o.lmap.zw = v.texcoord2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;\n
          \ #endif\n  #ifdef LIGHTMAP_ON\n  o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy
          + unity_LightmapST.zw;\n  #endif\n\n  // SH/ambient and vertex lights\n
          \ #ifndef LIGHTMAP_ON\n    #if UNITY_SHOULD_SAMPLE_SH\n      o.sh = 0;\n
          \     // Approximated illumination from non-important point lights\n      #ifdef
          VERTEXLIGHT_ON\n        o.sh += Shade4PointLights (\n          unity_4LightPosX0,
          unity_4LightPosY0, unity_4LightPosZ0,\n          unity_LightColor[0].rgb,
          unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,\n
          \         unity_4LightAtten0, worldPos, worldNormal);\n      #endif\n      o.sh
          = ShadeSHPerVertex (worldNormal, o.sh);\n    #endif\n  #endif // !LIGHTMAP_ON\n\n
          \ UNITY_TRANSFER_SHADOW(o,v.texcoord1.xy); // pass shadow coordinates to
          pixel shader\n  UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to
          pixel shader\n  return o;\n}\n\n// fragment shader\nfixed4 frag_surf (v2f_surf
          IN) : SV_Target {\n  UNITY_SETUP_INSTANCE_ID(IN);\n  // prepare and unpack
          data\n  Input surfIN;\n  UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n  surfIN.uv_MainTex.x
          = 1.0;\n  surfIN.uv_BumpMap.x = 1.0;\n  surfIN.color.x = 1.0;\n  surfIN.uv_MainTex
          = IN.pack0.xy;\n  surfIN.uv_BumpMap = IN.pack0.zw;\n  float3 worldPos =
          float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);\n  #ifndef USING_DIRECTIONAL_LIGHT\n
          \   fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n
          \   fixed3 lightDir = _WorldSpaceLightPos0.xyz;\n  #endif\n  fixed3 worldViewDir
          = normalize(UnityWorldSpaceViewDir(worldPos));\n  surfIN.color = IN.color;\n
          \ #ifdef UNITY_COMPILER_HLSL\n  SurfaceOutput o = (SurfaceOutput)0;\n  #else\n
          \ SurfaceOutput o;\n  #endif\n  o.Albedo = 0.0;\n  o.Emission = 0.0;\n  o.Specular
          = 0.0;\n  o.Alpha = 0.0;\n  o.Gloss = 0.0;\n  fixed3 normalWorldVertex =
          fixed3(0,0,1);\n\n  // call surface function\n  surf (surfIN, o);\n\n  //
          compute lighting & shadowing factor\n  UNITY_LIGHT_ATTENUATION(atten, IN,
          worldPos)\n  fixed4 c = 0;\n  fixed3 worldN;\n  worldN.x = dot(IN.tSpace0.xyz,
          o.Normal);\n  worldN.y = dot(IN.tSpace1.xyz, o.Normal);\n  worldN.z = dot(IN.tSpace2.xyz,
          o.Normal);\n  o.Normal = worldN;\n\n  // Setup lighting environment\n  UnityGI
          gi;\n  UNITY_INITIALIZE_OUTPUT(UnityGI, gi);\n  gi.indirect.diffuse = 0;\n
          \ gi.indirect.specular = 0;\n  gi.light.color = _LightColor0.rgb;\n  gi.light.dir
          = lightDir;\n  // Call GI (lightmaps/SH/reflections) lighting function\n
          \ UnityGIInput giInput;\n  UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);\n
          \ giInput.light = gi.light;\n  giInput.worldPos = worldPos;\n  giInput.worldViewDir
          = worldViewDir;\n  giInput.atten = atten;\n  #if defined(LIGHTMAP_ON) ||
          defined(DYNAMICLIGHTMAP_ON)\n    giInput.lightmapUV = IN.lmap;\n  #else\n
          \   giInput.lightmapUV = 0.0;\n  #endif\n  #if UNITY_SHOULD_SAMPLE_SH\n
          \   giInput.ambient = IN.sh;\n  #else\n    giInput.ambient.rgb = 0.0;\n
          \ #endif\n  giInput.probeHDR[0] = unity_SpecCube0_HDR;\n  giInput.probeHDR[1]
          = unity_SpecCube1_HDR;\n  #if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)\n
          \   giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for
          blending\n  #endif\n  #ifdef UNITY_SPECCUBE_BOX_PROJECTION\n    giInput.boxMax[0]
          = unity_SpecCube0_BoxMax;\n    giInput.probePosition[0] = unity_SpecCube0_ProbePosition;\n
          \   giInput.boxMax[1] = unity_SpecCube1_BoxMax;\n    giInput.boxMin[1] =
          unity_SpecCube1_BoxMin;\n    giInput.probePosition[1] = unity_SpecCube1_ProbePosition;\n
          \ #endif\n  LightingBlinnPhong_GI(o, giInput, gi);\n\n  // realtime lighting:
          call lighting function\n  c += LightingBlinnPhong (o, worldViewDir, gi);\n
          \ UNITY_APPLY_FOG(IN.fogCoord, c); // apply fog\n  UNITY_OPAQUE_ALPHA(c.a);\n
          \ return c;\n}\n\n\n#endif\n\n\n"
        m_AssetPath: Assets/Houdini/Shaders
        m_PlatformMask: 4294967295
        m_HardwareTierVariantsMask: 0
        m_StartLine: 23
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: 4f737aa83347f31e93238fe60ecde340
        m_FromOther: 0
        m_Language: 0
        m_VariantsUser0:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        - - __
          - INSTANCING_ON
        m_VariantsUser1:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        - - __
          - INSTANCING_ON
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0:
        - - DIRECTIONAL
        - - DIRECTIONAL
          - SHADOWS_SHADOWMASK
        - - DIRECTIONAL
          - DYNAMICLIGHTMAP_ON
        - - DIRECTIONAL
          - LIGHTMAP_ON
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DYNAMICLIGHTMAP_ON
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - LIGHTMAP_SHADOW_MIXING
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DYNAMICLIGHTMAP_ON
          - LIGHTMAP_SHADOW_MIXING
        - - DIRECTIONAL
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - LIGHTMAP_SHADOW_MIXING
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - LIGHTMAP_SHADOW_MIXING
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - SHADOWS_SHADOWMASK
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SHADOWMASK
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - SHADOWS_SHADOWMASK
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SHADOWMASK
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
        - - DIRECTIONAL
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
        - - DIRECTIONAL
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
        - - DIRECTIONAL
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
        - - DIRECTIONAL
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - SHADOWS_SCREEN
          - LIGHTMAP_SHADOW_MIXING
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - LIGHTMAP_SHADOW_MIXING
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
        - - DIRECTIONAL
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - SHADOWS_SCREEN
          - LIGHTMAP_SHADOW_MIXING
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - LIGHTMAP_SHADOW_MIXING
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
        - - DIRECTIONAL
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - DYNAMICLIGHTMAP_ON
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
        m_VariantsBuiltin1:
        - - DIRECTIONAL
        - - DIRECTIONAL
          - SHADOWS_SHADOWMASK
        - - DIRECTIONAL
          - DYNAMICLIGHTMAP_ON
        - - DIRECTIONAL
          - LIGHTMAP_ON
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DYNAMICLIGHTMAP_ON
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - LIGHTMAP_SHADOW_MIXING
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DYNAMICLIGHTMAP_ON
          - LIGHTMAP_SHADOW_MIXING
        - - DIRECTIONAL
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - LIGHTMAP_SHADOW_MIXING
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - LIGHTMAP_SHADOW_MIXING
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - SHADOWS_SHADOWMASK
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SHADOWMASK
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - SHADOWS_SHADOWMASK
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SHADOWMASK
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
        - - DIRECTIONAL
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
        - - DIRECTIONAL
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
        - - DIRECTIONAL
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
        - - DIRECTIONAL
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - SHADOWS_SCREEN
          - LIGHTMAP_SHADOW_MIXING
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - LIGHTMAP_SHADOW_MIXING
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
        - - DIRECTIONAL
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - SHADOWS_SCREEN
          - LIGHTMAP_SHADOW_MIXING
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - LIGHTMAP_SHADOW_MIXING
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_SHADOWMASK
          - LIGHTMAP_SHADOW_MIXING
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_BaseRequirements: 33
        m_KeywordTargetInfo:
        - keywordName: SHADOWS_SOFT
          requirements: 227
        - keywordName: DIRLIGHTMAP_COMBINED
          requirements: 227
        - keywordName: DIRLIGHTMAP_SEPARATE
          requirements: 227
        - keywordName: DYNAMICLIGHTMAP_ON
          requirements: 227
        - keywordName: SHADOWS_SCREEN
          requirements: 227
        - keywordName: INSTANCING_ON
          requirements: 2048
        - keywordName: PROCEDURAL_INSTANCING_ON
          requirements: 16384
        - keywordName: STEREO_MULTIVIEW_ON
          requirements: 4087
        - keywordName: STEREO_INSTANCING_ON
          requirements: 4087
        m_NonStrippedUserKeywords: FOG_EXP FOG_EXP2 FOG_LINEAR INSTANCING_ON
        m_BuiltinKeywords: DIRECTIONAL DIRLIGHTMAP_COMBINED DYNAMICLIGHTMAP_ON LIGHTMAP_ON
          LIGHTMAP_SHADOW_MIXING SHADOWS_SCREEN SHADOWS_SHADOWMASK VERTEXLIGHT_ON
      63614:
        serializedVersion: 2
        m_Code: "#line 84 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n#include
          \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n#include
          \"UnityShaderUtilities.cginc\"\n#line 84 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n/*
          UNITY: Original start of shader */\n#pragma vertex vert\n#pragma fragment
          frag\n#pragma target 2.0\n#pragma multi_compile_shadowcaster\n#pragma multi_compile_instancing
          // allow instanced shadow pass for most of the shaders\n#include \"UnityCG.cginc\"\n\nstruct
          v2f {\n    V2F_SHADOW_CASTER;\n    UNITY_VERTEX_OUTPUT_STEREO\n};\n\nv2f
          vert( appdata_base v )\n{\n    v2f o;\n    UNITY_SETUP_INSTANCE_ID(v);\n
          \   UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);\n    TRANSFER_SHADOW_CASTER_NORMALOFFSET(o)\n
          \   return o;\n}\n\nfloat4 frag( v2f i ) : SV_Target\n{\n    SHADOW_CASTER_FRAGMENT(i)\n}\n"
        m_AssetPath: Assets/DefaultResourcesExtra
        m_PlatformMask: 4294967295
        m_HardwareTierVariantsMask: 0
        m_StartLine: 86
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: 8127ba044fc50c24c026c3f0eb9dafd9
        m_FromOther: 1
        m_Language: 0
        m_VariantsUser0:
        - - __
          - INSTANCING_ON
        m_VariantsUser1:
        - - __
          - INSTANCING_ON
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0:
        - - SHADOWS_DEPTH
        - - SHADOWS_CUBE
        m_VariantsBuiltin1:
        - - SHADOWS_DEPTH
        - - SHADOWS_CUBE
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_BaseRequirements: 1
        m_KeywordTargetInfo:
        - keywordName: SHADOWS_SOFT
          requirements: 227
        - keywordName: DIRLIGHTMAP_COMBINED
          requirements: 227
        - keywordName: DIRLIGHTMAP_SEPARATE
          requirements: 227
        - keywordName: DYNAMICLIGHTMAP_ON
          requirements: 227
        - keywordName: SHADOWS_SCREEN
          requirements: 227
        - keywordName: INSTANCING_ON
          requirements: 2048
        - keywordName: PROCEDURAL_INSTANCING_ON
          requirements: 16384
        - keywordName: STEREO_MULTIVIEW_ON
          requirements: 4087
        - keywordName: STEREO_INSTANCING_ON
          requirements: 4087
        m_NonStrippedUserKeywords: INSTANCING_ON
        m_BuiltinKeywords: SHADOWS_CUBE SHADOWS_DEPTH
      67096:
        serializedVersion: 2
        m_Code: "#line 217 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          multi_compile_instancing\n#pragma multi_compile_fog\n#pragma skip_variants
          INSTANCING_ON\n#pragma multi_compile_fwdadd\n#include \"HLSLSupport.cginc\"\n#include
          \"UnityShaderVariables.cginc\"\n#include \"UnityShaderUtilities.cginc\"\n//
          -------- variant for: <when no other keywords are defined>\n#if !defined(INSTANCING_ON)\n//
          Surface shader code generated based on:\n// writes to per-pixel normal:
          no\n// writes to emission: no\n// writes to occlusion: no\n// needs world
          space reflection vector: no\n// needs world space normal vector: no\n//
          needs screen space position: no\n// needs world space position: no\n// needs
          view direction: no\n// needs world space view direction: no\n// needs world
          space position for lighting: YES\n// needs world space view direction for
          lighting: YES\n// needs world space view direction for lightmaps: no\n//
          needs vertex color: no\n// needs VFACE: no\n// passes tangent-to-world matrix
          to pixel shader: no\n// reads from normal: no\n// 1 texcoords actually used\n//
          \  float2 _MainTex\n#define UNITY_PASS_FORWARDADD\n#include \"UnityCG.cginc\"\n#include
          \"Lighting.cginc\"\n#include \"AutoLight.cginc\"\n\n#define INTERNAL_DATA\n#define
          WorldReflectionVector(data,normal) data.worldRefl\n#define WorldNormalVector(data,normal)
          normal\n\n// Original surface shader snippet:\n#line 11 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n/*
          UNITY: Original start of shader */\n//#pragma surface surf BlinnPhong\n\nsampler2D
          _MainTex;\nfixed4 _Color;\nhalf _Shininess;\n\nstruct Input {\n    float2
          uv_MainTex;\n};\n\nvoid surf (Input IN, inout SurfaceOutput o) {\n    fixed4
          tex = tex2D(_MainTex, IN.uv_MainTex);\n    o.Albedo = tex.rgb * _Color.rgb;\n
          \   o.Gloss = tex.a;\n    o.Alpha = tex.a * _Color.a;\n    o.Specular =
          _Shininess;\n}\n\n\n// vertex-to-fragment interpolation data\nstruct v2f_surf
          {\n  UNITY_POSITION(pos);\n  float2 pack0 : TEXCOORD0; // _MainTex\n  half3
          worldNormal : TEXCOORD1;\n  float3 worldPos : TEXCOORD2;\n  UNITY_SHADOW_COORDS(3)\n
          \ UNITY_FOG_COORDS(4)\n  UNITY_VERTEX_INPUT_INSTANCE_ID\n  UNITY_VERTEX_OUTPUT_STEREO\n};\nfloat4
          _MainTex_ST;\n\n// vertex shader\nv2f_surf vert_surf (appdata_full v) {\n
          \ UNITY_SETUP_INSTANCE_ID(v);\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n
          \ UNITY_TRANSFER_INSTANCE_ID(v,o);\n  UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);\n
          \ o.pos = UnityObjectToClipPos(v.vertex);\n  o.pack0.xy = TRANSFORM_TEX(v.texcoord,
          _MainTex);\n  float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;\n
          \ fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);\n  o.worldPos
          = worldPos;\n  o.worldNormal = worldNormal;\n\n  UNITY_TRANSFER_SHADOW(o,v.texcoord1.xy);
          // pass shadow coordinates to pixel shader\n  UNITY_TRANSFER_FOG(o,o.pos);
          // pass fog coordinates to pixel shader\n  return o;\n}\n\n// fragment shader\nfixed4
          frag_surf (v2f_surf IN) : SV_Target {\n  UNITY_SETUP_INSTANCE_ID(IN);\n
          \ // prepare and unpack data\n  Input surfIN;\n  UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n
          \ surfIN.uv_MainTex.x = 1.0;\n  surfIN.uv_MainTex = IN.pack0.xy;\n  float3
          worldPos = IN.worldPos;\n  #ifndef USING_DIRECTIONAL_LIGHT\n    fixed3 lightDir
          = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n    fixed3 lightDir
          = _WorldSpaceLightPos0.xyz;\n  #endif\n  fixed3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));\n
          \ #ifdef UNITY_COMPILER_HLSL\n  SurfaceOutput o = (SurfaceOutput)0;\n  #else\n
          \ SurfaceOutput o;\n  #endif\n  o.Albedo = 0.0;\n  o.Emission = 0.0;\n  o.Specular
          = 0.0;\n  o.Alpha = 0.0;\n  o.Gloss = 0.0;\n  fixed3 normalWorldVertex =
          fixed3(0,0,1);\n  o.Normal = IN.worldNormal;\n  normalWorldVertex = IN.worldNormal;\n\n
          \ // call surface function\n  surf (surfIN, o);\n  UNITY_LIGHT_ATTENUATION(atten,
          IN, worldPos)\n  fixed4 c = 0;\n\n  // Setup lighting environment\n  UnityGI
          gi;\n  UNITY_INITIALIZE_OUTPUT(UnityGI, gi);\n  gi.indirect.diffuse = 0;\n
          \ gi.indirect.specular = 0;\n  gi.light.color = _LightColor0.rgb;\n  gi.light.dir
          = lightDir;\n  gi.light.color *= atten;\n  c += LightingBlinnPhong (o, worldViewDir,
          gi);\n  c.a = 0.0;\n  UNITY_APPLY_FOG(IN.fogCoord, c); // apply fog\n  UNITY_OPAQUE_ALPHA(c.a);\n
          \ return c;\n}\n\n\n#endif\n\n\n"
        m_AssetPath: Assets/DefaultResourcesExtra
        m_PlatformMask: 4294967295
        m_HardwareTierVariantsMask: 0
        m_StartLine: 219
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: 4f737aa83347f31e93238fe60ecde340
        m_FromOther: 1
        m_Language: 0
        m_VariantsUser0:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser1:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0:
        - - POINT
        - - DIRECTIONAL
        - - SPOT
        - - POINT_COOKIE
        - - DIRECTIONAL_COOKIE
        m_VariantsBuiltin1:
        - - POINT
        - - DIRECTIONAL
        - - SPOT
        - - POINT_COOKIE
        - - DIRECTIONAL_COOKIE
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_BaseRequirements: 33
        m_KeywordTargetInfo:
        - keywordName: SHADOWS_SOFT
          requirements: 227
        - keywordName: DIRLIGHTMAP_COMBINED
          requirements: 227
        - keywordName: DIRLIGHTMAP_SEPARATE
          requirements: 227
        - keywordName: DYNAMICLIGHTMAP_ON
          requirements: 227
        - keywordName: SHADOWS_SCREEN
          requirements: 227
        - keywordName: INSTANCING_ON
          requirements: 2048
        - keywordName: PROCEDURAL_INSTANCING_ON
          requirements: 16384
        - keywordName: STEREO_MULTIVIEW_ON
          requirements: 4087
        - keywordName: STEREO_INSTANCING_ON
          requirements: 4087
        m_NonStrippedUserKeywords: FOG_EXP FOG_EXP2 FOG_LINEAR
        m_BuiltinKeywords: DIRECTIONAL DIRECTIONAL_COOKIE POINT POINT_COOKIE SPOT
      78978:
        serializedVersion: 2
        m_Code: "#pragma vertex vert\n#pragma fragment frag\n#pragma target 2.0\n#include
          \"UnityCG.cginc\"\n#pragma multi_compile_fog\n#define USING_FOG (defined(FOG_LINEAR)
          || defined(FOG_EXP) || defined(FOG_EXP2))\n\n// ES2.0/WebGL/3DS can not
          do loops with non-constant-expression iteration counts :(\n#if defined(SHADER_API_GLES)\n
          \ #define LIGHT_LOOP_LIMIT 8\n#elif defined(SHADER_API_N3DS)\n  #define
          LIGHT_LOOP_LIMIT 4\n#else\n  #define LIGHT_LOOP_LIMIT unity_VertexLightParams.x\n#endif\n#define
          ENABLE_SPECULAR (!defined(SHADER_API_N3DS))\n\n// Compile specialized variants
          for when positional (point/spot) and spot lights are present\n#pragma multi_compile
          __ POINT SPOT\n\n// Compute illumination from one light, given attenuation\nhalf3
          computeLighting (int idx, half3 dirToLight, half3 eyeNormal, half3 viewDir,
          half4 diffuseColor, half shininess, half atten, inout half3 specColor) {\n
          \ half NdotL = max(dot(eyeNormal, dirToLight), 0.0);\n  // diffuse\n  half3
          color = NdotL * diffuseColor.rgb * unity_LightColor[idx].rgb;\n  // specular\n
          \ if (NdotL > 0.0) {\n    half3 h = normalize(dirToLight + viewDir);\n    half
          HdotN = max(dot(eyeNormal, h), 0.0);\n    half sp = saturate(pow(HdotN,
          shininess));\n    specColor += (atten * sp) * unity_LightColor[idx].rgb;\n
          \ }\n  return color * atten;\n}\n\n// Compute attenuation & illumination
          from one light\nhalf3 computeOneLight(int idx, float3 eyePosition, half3
          eyeNormal, half3 viewDir, half4 diffuseColor, half shininess, inout half3
          specColor) {\n  float3 dirToLight = unity_LightPosition[idx].xyz;\n  half
          att = 1.0;\n  #if defined(POINT) || defined(SPOT)\n    dirToLight -= eyePosition
          * unity_LightPosition[idx].w;\n    // distance attenuation\n    float distSqr
          = dot(dirToLight, dirToLight);\n    att /= (1.0 + unity_LightAtten[idx].z
          * distSqr);\n    if (unity_LightPosition[idx].w != 0 && distSqr > unity_LightAtten[idx].w)
          att = 0.0; // set to 0 if outside of range\n    distSqr = max(distSqr, 0.000001);
          // don't produce NaNs if some vertex position overlaps with the light\n
          \   dirToLight *= rsqrt(distSqr);\n    #if defined(SPOT)\n      // spot
          angle attenuation\n      half rho = max(dot(dirToLight, unity_SpotDirection[idx].xyz),
          0.0);\n      half spotAtt = (rho - unity_LightAtten[idx].x) * unity_LightAtten[idx].y;\n
          \     att *= saturate(spotAtt);\n    #endif\n  #endif\n  att *= 0.5; //
          passed in light colors are 2x brighter than what used to be in FFP\n  return
          min (computeLighting (idx, dirToLight, eyeNormal, viewDir, diffuseColor,
          shininess, att, specColor), 1.0);\n}\n\n// uniforms\nhalf4 _Color;\nhalf4
          _SpecColor;\nhalf4 _Emission;\nhalf _Shininess;\nint4 unity_VertexLightParams;
          // x: light count, y: zero, z: one (y/z needed by d3d9 vs loop instruction)\nfloat4
          _MainTex_ST;\n\n// vertex shader input data\nstruct appdata {\n  float3
          pos : POSITION;\n  float3 normal : NORMAL;\n  float3 uv0 : TEXCOORD0;\n
          \ UNITY_VERTEX_INPUT_INSTANCE_ID\n};\n\n// vertex-to-fragment interpolators\nstruct
          v2f {\n  fixed4 color : COLOR0;\n  #if ENABLE_SPECULAR\n  fixed3 specColor
          : COLOR1;\n  #endif\n  float2 uv0 : TEXCOORD0;\n  #if USING_FOG\n    fixed
          fog : TEXCOORD1;\n  #endif\n  float4 pos : SV_POSITION;\n  UNITY_VERTEX_OUTPUT_STEREO\n};\n\n//
          vertex shader\nv2f vert (appdata IN) {\n  v2f o;\n  UNITY_SETUP_INSTANCE_ID(IN);\n
          \ UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);\n  half4 color = half4(0,0,0,1.1);\n
          \ float3 eyePos = mul (UNITY_MATRIX_MV, float4(IN.pos,1)).xyz;\n  half3
          eyeNormal = normalize (mul ((float3x3)UNITY_MATRIX_IT_MV, IN.normal).xyz);\n
          \ half3 viewDir = 0.0;\n  viewDir = -normalize (eyePos);\n  // lighting\n
          \ half3 lcolor = _Emission.rgb + _Color.rgb * glstate_lightmodel_ambient.rgb;\n
          \ half3 specColor = 0.0;\n  half shininess = _Shininess * 128.0;\n  for
          (int il = 0; il < LIGHT_LOOP_LIMIT; ++il) {\n    lcolor += computeOneLight(il,
          eyePos, eyeNormal, viewDir, _Color, shininess, specColor);\n  }\n  color.rgb
          = lcolor.rgb;\n  color.a = _Color.a;\n  specColor *= _SpecColor.rgb;\n  o.color
          = saturate(color);\n  #if ENABLE_SPECULAR\n  o.specColor = saturate(specColor);\n
          \ #endif\n  // compute texture coordinates\n  o.uv0 = IN.uv0.xy * _MainTex_ST.xy
          + _MainTex_ST.zw;\n  // fog\n  #if USING_FOG\n    float fogCoord = length(eyePos.xyz);
          // radial fog distance\n    UNITY_CALC_FOG_FACTOR_RAW(fogCoord);\n    o.fog
          = saturate(unityFogFactor);\n  #endif\n  // transform position\n  o.pos
          = UnityObjectToClipPos(IN.pos);\n  return o;\n}\n\n// textures\nsampler2D
          _MainTex;\n\n// fragment shader\nfixed4 frag (v2f IN) : SV_Target {\n  fixed4
          col;\n  fixed4 tex, tmp0, tmp1, tmp2;\n  // SetTexture #0\n  tex = tex2D
          (_MainTex, IN.uv0.xy);\n  col.rgb = tex * IN.color;\n  col *= 2;\n  col.a
          = fixed4(1,1,1,1).a;\n  #if ENABLE_SPECULAR\n  // add specular color\n  col.rgb
          += IN.specColor;\n  #endif\n  // fog\n  #if USING_FOG\n    col.rgb = lerp
          (unity_FogColor.rgb, col.rgb, IN.fog);\n  #endif\n  return col;\n}\n\n//
          texenvs\n//! TexEnv0: 02010103 01060004 [_MainTex] [ffffffff]\n"
        m_AssetPath: 
        m_PlatformMask: 4294967295
        m_HardwareTierVariantsMask: 0
        m_StartLine: 1
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: 00000000000000000000000000000000
        m_FromOther: 1
        m_Language: 0
        m_VariantsUser0:
        - - _
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        - - _
          - POINT
          - SPOT
        m_VariantsUser1:
        - - _
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        - - _
          - POINT
          - SPOT
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0: []
        m_VariantsBuiltin1: []
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_BaseRequirements: 1
        m_KeywordTargetInfo: []
        m_NonStrippedUserKeywords: FOG_EXP FOG_EXP2 FOG_LINEAR POINT SPOT
        m_BuiltinKeywords: 
      115528:
        serializedVersion: 2
        m_Code: "#line 224 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          multi_compile_instancing\n#pragma multi_compile_fog\n#pragma skip_variants
          INSTANCING_ON\n#pragma multi_compile_fwdadd\n#include \"HLSLSupport.cginc\"\n#include
          \"UnityShaderVariables.cginc\"\n#include \"UnityShaderUtilities.cginc\"\n//
          -------- variant for: <when no other keywords are defined>\n#if !defined(INSTANCING_ON)\n//
          Surface shader code generated based on:\n// writes to per-pixel normal:
          YES\n// writes to emission: no\n// writes to occlusion: no\n// needs world
          space reflection vector: no\n// needs world space normal vector: no\n//
          needs screen space position: no\n// needs world space position: no\n// needs
          view direction: no\n// needs world space view direction: no\n// needs world
          space position for lighting: YES\n// needs world space view direction for
          lighting: YES\n// needs world space view direction for lightmaps: no\n//
          needs vertex color: YES\n// needs VFACE: no\n// passes tangent-to-world
          matrix to pixel shader: YES\n// reads from normal: no\n// 2 texcoords actually
          used\n//   float2 _MainTex\n//   float2 _BumpMap\n#define UNITY_PASS_FORWARDADD\n#include
          \"UnityCG.cginc\"\n#include \"Lighting.cginc\"\n#include \"AutoLight.cginc\"\n\n#define
          INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3
          internalSurfaceTtoW2;\n#define WorldReflectionVector(data,normal) reflect
          (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal),
          dot(data.internalSurfaceTtoW2,normal)))\n#define WorldNormalVector(data,normal)
          fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal),
          dot(data.internalSurfaceTtoW2,normal))\n\n// Original surface shader snippet:\n#line
          11 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n/*
          UNITY: Original start of shader */\n\t\t\t//#pragma surface surf BlinnPhong\n\n\t\t\tsampler2D
          _MainTex;\n\t\t\tsampler2D _BumpMap;\n\t\t\tfixed4 _Color;\n\t\t\thalf _Shininess;\n\n\t\t\tstruct
          Input {\n\t\t\t\tfloat2 uv_MainTex;\n\t\t\t\tfloat2 uv_BumpMap;\n\t\t\t\tfloat4
          color: Color;\n\t\t\t};\n\n\t\t\tvoid surf ( Input IN, inout SurfaceOutput
          o ) {\n\t\t\t\tfixed4 tex = tex2D( _MainTex, IN.uv_MainTex );\n\t\t\t\to.Albedo
          = tex.rgb * _Color.rgb * IN.color.rgb;\n\t\t\t\to.Gloss = tex.a;\n\t\t\t\to.Alpha
          = tex.a * _Color.a;\n\t\t\t\to.Specular = _Shininess;\n\t\t\t\to.Normal
          = UnpackNormal( tex2D( _BumpMap, IN.uv_BumpMap ) );\n\t\t\t}\n\t\t\n\n//
          vertex-to-fragment interpolation data\nstruct v2f_surf {\n  UNITY_POSITION(pos);\n
          \ float4 pack0 : TEXCOORD0; // _MainTex _BumpMap\n  fixed3 tSpace0 : TEXCOORD1;\n
          \ fixed3 tSpace1 : TEXCOORD2;\n  fixed3 tSpace2 : TEXCOORD3;\n  float3 worldPos
          : TEXCOORD4;\n  fixed4 color : COLOR0;\n  UNITY_SHADOW_COORDS(5)\n  UNITY_FOG_COORDS(6)\n
          \ UNITY_VERTEX_INPUT_INSTANCE_ID\n  UNITY_VERTEX_OUTPUT_STEREO\n};\nfloat4
          _MainTex_ST;\nfloat4 _BumpMap_ST;\n\n// vertex shader\nv2f_surf vert_surf
          (appdata_full v) {\n  UNITY_SETUP_INSTANCE_ID(v);\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n
          \ UNITY_TRANSFER_INSTANCE_ID(v,o);\n  UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);\n
          \ o.pos = UnityObjectToClipPos(v.vertex);\n  o.pack0.xy = TRANSFORM_TEX(v.texcoord,
          _MainTex);\n  o.pack0.zw = TRANSFORM_TEX(v.texcoord, _BumpMap);\n  float3
          worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;\n  fixed3 worldNormal
          = UnityObjectToWorldNormal(v.normal);\n  fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);\n
          \ fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;\n  fixed3
          worldBinormal = cross(worldNormal, worldTangent) * tangentSign;\n  o.tSpace0
          = fixed3(worldTangent.x, worldBinormal.x, worldNormal.x);\n  o.tSpace1 =
          fixed3(worldTangent.y, worldBinormal.y, worldNormal.y);\n  o.tSpace2 = fixed3(worldTangent.z,
          worldBinormal.z, worldNormal.z);\n  o.worldPos = worldPos;\n  o.color =
          v.color;\n\n  UNITY_TRANSFER_SHADOW(o,v.texcoord1.xy); // pass shadow coordinates
          to pixel shader\n  UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates
          to pixel shader\n  return o;\n}\n\n// fragment shader\nfixed4 frag_surf
          (v2f_surf IN) : SV_Target {\n  UNITY_SETUP_INSTANCE_ID(IN);\n  // prepare
          and unpack data\n  Input surfIN;\n  UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n
          \ surfIN.uv_MainTex.x = 1.0;\n  surfIN.uv_BumpMap.x = 1.0;\n  surfIN.color.x
          = 1.0;\n  surfIN.uv_MainTex = IN.pack0.xy;\n  surfIN.uv_BumpMap = IN.pack0.zw;\n
          \ float3 worldPos = IN.worldPos;\n  #ifndef USING_DIRECTIONAL_LIGHT\n    fixed3
          lightDir = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n    fixed3
          lightDir = _WorldSpaceLightPos0.xyz;\n  #endif\n  fixed3 worldViewDir =
          normalize(UnityWorldSpaceViewDir(worldPos));\n  surfIN.color = IN.color;\n
          \ #ifdef UNITY_COMPILER_HLSL\n  SurfaceOutput o = (SurfaceOutput)0;\n  #else\n
          \ SurfaceOutput o;\n  #endif\n  o.Albedo = 0.0;\n  o.Emission = 0.0;\n  o.Specular
          = 0.0;\n  o.Alpha = 0.0;\n  o.Gloss = 0.0;\n  fixed3 normalWorldVertex =
          fixed3(0,0,1);\n\n  // call surface function\n  surf (surfIN, o);\n  UNITY_LIGHT_ATTENUATION(atten,
          IN, worldPos)\n  fixed4 c = 0;\n  fixed3 worldN;\n  worldN.x = dot(IN.tSpace0.xyz,
          o.Normal);\n  worldN.y = dot(IN.tSpace1.xyz, o.Normal);\n  worldN.z = dot(IN.tSpace2.xyz,
          o.Normal);\n  o.Normal = worldN;\n\n  // Setup lighting environment\n  UnityGI
          gi;\n  UNITY_INITIALIZE_OUTPUT(UnityGI, gi);\n  gi.indirect.diffuse = 0;\n
          \ gi.indirect.specular = 0;\n  gi.light.color = _LightColor0.rgb;\n  gi.light.dir
          = lightDir;\n  gi.light.color *= atten;\n  c += LightingBlinnPhong (o, worldViewDir,
          gi);\n  c.a = 0.0;\n  UNITY_APPLY_FOG(IN.fogCoord, c); // apply fog\n  UNITY_OPAQUE_ALPHA(c.a);\n
          \ return c;\n}\n\n\n#endif\n\n\n"
        m_AssetPath: Assets/Houdini/Shaders
        m_PlatformMask: 4294967295
        m_HardwareTierVariantsMask: 0
        m_StartLine: 226
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: 4f737aa83347f31e93238fe60ecde340
        m_FromOther: 0
        m_Language: 0
        m_VariantsUser0:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser1:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0:
        - - POINT
        - - DIRECTIONAL
        - - SPOT
        - - POINT_COOKIE
        - - DIRECTIONAL_COOKIE
        m_VariantsBuiltin1:
        - - POINT
        - - DIRECTIONAL
        - - SPOT
        - - POINT_COOKIE
        - - DIRECTIONAL_COOKIE
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_BaseRequirements: 33
        m_KeywordTargetInfo:
        - keywordName: SHADOWS_SOFT
          requirements: 227
        - keywordName: DIRLIGHTMAP_COMBINED
          requirements: 227
        - keywordName: DIRLIGHTMAP_SEPARATE
          requirements: 227
        - keywordName: DYNAMICLIGHTMAP_ON
          requirements: 227
        - keywordName: SHADOWS_SCREEN
          requirements: 227
        - keywordName: INSTANCING_ON
          requirements: 2048
        - keywordName: PROCEDURAL_INSTANCING_ON
          requirements: 16384
        - keywordName: STEREO_MULTIVIEW_ON
          requirements: 4087
        - keywordName: STEREO_INSTANCING_ON
          requirements: 4087
        m_NonStrippedUserKeywords: FOG_EXP FOG_EXP2 FOG_LINEAR
        m_BuiltinKeywords: DIRECTIONAL DIRECTIONAL_COOKIE POINT POINT_COOKIE SPOT
      149143:
        serializedVersion: 2
        m_Code: "#line 125 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          multi_compile_instancing\n#pragma skip_variants FOG_LINEAR FOG_EXP FOG_EXP2\n\n#include
          \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n#include
          \"UnityShaderUtilities.cginc\"\n// -------- variant for: <when no other
          keywords are defined>\n#if !defined(INSTANCING_ON)\n// Surface shader code
          generated based on:\n// writes to per-pixel normal: no\n// writes to emission:
          no\n// writes to occlusion: no\n// needs world space reflection vector:
          no\n// needs world space normal vector: no\n// needs screen space position:
          no\n// needs world space position: no\n// needs view direction: no\n// needs
          world space view direction: no\n// needs world space position for lighting:
          YES\n// needs world space view direction for lighting: YES\n// needs world
          space view direction for lightmaps: no\n// needs vertex color: no\n// needs
          VFACE: no\n// passes tangent-to-world matrix to pixel shader: no\n// reads
          from normal: YES\n// 0 texcoords actually used\n#define UNITY_PASS_PREPASSBASE\n#include
          \"UnityCG.cginc\"\n#include \"Lighting.cginc\"\n\n#define INTERNAL_DATA\n#define
          WorldReflectionVector(data,normal) data.worldRefl\n#define WorldNormalVector(data,normal)
          normal\n\n// Original surface shader snippet:\n#line 11 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n/*
          UNITY: Original start of shader */\n//#pragma surface surf BlinnPhong\n\nsampler2D
          _MainTex;\nfixed4 _Color;\nhalf _Shininess;\n\nstruct Input {\n    float2
          uv_MainTex;\n};\n\nvoid surf (Input IN, inout SurfaceOutput o) {\n    fixed4
          tex = tex2D(_MainTex, IN.uv_MainTex);\n    o.Albedo = tex.rgb * _Color.rgb;\n
          \   o.Gloss = tex.a;\n    o.Alpha = tex.a * _Color.a;\n    o.Specular =
          _Shininess;\n}\n\n\n// vertex-to-fragment interpolation data\nstruct v2f_surf
          {\n  UNITY_POSITION(pos);\n  half3 worldNormal : TEXCOORD0;\n  float3 worldPos
          : TEXCOORD1;\n  UNITY_VERTEX_INPUT_INSTANCE_ID\n  UNITY_VERTEX_OUTPUT_STEREO\n};\n\n//
          vertex shader\nv2f_surf vert_surf (appdata_full v) {\n  UNITY_SETUP_INSTANCE_ID(v);\n
          \ v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n  UNITY_TRANSFER_INSTANCE_ID(v,o);\n
          \ UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);\n  o.pos = UnityObjectToClipPos(v.vertex);\n
          \ float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;\n  fixed3 worldNormal
          = UnityObjectToWorldNormal(v.normal);\n  o.worldPos = worldPos;\n  o.worldNormal
          = worldNormal;\n  return o;\n}\n\n// fragment shader\nfixed4 frag_surf (v2f_surf
          IN) : SV_Target {\n  UNITY_SETUP_INSTANCE_ID(IN);\n  // prepare and unpack
          data\n  Input surfIN;\n  UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n  surfIN.uv_MainTex.x
          = 1.0;\n  float3 worldPos = IN.worldPos;\n  #ifndef USING_DIRECTIONAL_LIGHT\n
          \   fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n
          \   fixed3 lightDir = _WorldSpaceLightPos0.xyz;\n  #endif\n  #ifdef UNITY_COMPILER_HLSL\n
          \ SurfaceOutput o = (SurfaceOutput)0;\n  #else\n  SurfaceOutput o;\n  #endif\n
          \ o.Albedo = 0.0;\n  o.Emission = 0.0;\n  o.Specular = 0.0;\n  o.Alpha =
          0.0;\n  o.Gloss = 0.0;\n  fixed3 normalWorldVertex = fixed3(0,0,1);\n  o.Normal
          = IN.worldNormal;\n  normalWorldVertex = IN.worldNormal;\n\n  // call surface
          function\n  surf (surfIN, o);\n\n  // output normal and specular\n  fixed4
          res;\n  res.rgb = o.Normal * 0.5 + 0.5;\n  res.a = o.Specular;\n  return
          res;\n}\n\n\n#endif\n\n// -------- variant for: INSTANCING_ON \n#if defined(INSTANCING_ON)\n//
          Surface shader code generated based on:\n// writes to per-pixel normal:
          no\n// writes to emission: no\n// writes to occlusion: no\n// needs world
          space reflection vector: no\n// needs world space normal vector: no\n//
          needs screen space position: no\n// needs world space position: no\n// needs
          view direction: no\n// needs world space view direction: no\n// needs world
          space position for lighting: YES\n// needs world space view direction for
          lighting: YES\n// needs world space view direction for lightmaps: no\n//
          needs vertex color: no\n// needs VFACE: no\n// passes tangent-to-world matrix
          to pixel shader: no\n// reads from normal: YES\n// 0 texcoords actually
          used\n#define UNITY_PASS_PREPASSBASE\n#include \"UnityCG.cginc\"\n#include
          \"Lighting.cginc\"\n\n#define INTERNAL_DATA\n#define WorldReflectionVector(data,normal)
          data.worldRefl\n#define WorldNormalVector(data,normal) normal\n\n// Original
          surface shader snippet:\n#line 11 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n/*
          UNITY: Original start of shader */\n//#pragma surface surf BlinnPhong\n\nsampler2D
          _MainTex;\nfixed4 _Color;\nhalf _Shininess;\n\nstruct Input {\n    float2
          uv_MainTex;\n};\n\nvoid surf (Input IN, inout SurfaceOutput o) {\n    fixed4
          tex = tex2D(_MainTex, IN.uv_MainTex);\n    o.Albedo = tex.rgb * _Color.rgb;\n
          \   o.Gloss = tex.a;\n    o.Alpha = tex.a * _Color.a;\n    o.Specular =
          _Shininess;\n}\n\n\n// vertex-to-fragment interpolation data\nstruct v2f_surf
          {\n  UNITY_POSITION(pos);\n  half3 worldNormal : TEXCOORD0;\n  float3 worldPos
          : TEXCOORD1;\n  UNITY_VERTEX_INPUT_INSTANCE_ID\n  UNITY_VERTEX_OUTPUT_STEREO\n};\n\n//
          vertex shader\nv2f_surf vert_surf (appdata_full v) {\n  UNITY_SETUP_INSTANCE_ID(v);\n
          \ v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n  UNITY_TRANSFER_INSTANCE_ID(v,o);\n
          \ UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);\n  o.pos = UnityObjectToClipPos(v.vertex);\n
          \ float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;\n  fixed3 worldNormal
          = UnityObjectToWorldNormal(v.normal);\n  o.worldPos = worldPos;\n  o.worldNormal
          = worldNormal;\n  return o;\n}\n\n// fragment shader\nfixed4 frag_surf (v2f_surf
          IN) : SV_Target {\n  UNITY_SETUP_INSTANCE_ID(IN);\n  // prepare and unpack
          data\n  Input surfIN;\n  UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n  surfIN.uv_MainTex.x
          = 1.0;\n  float3 worldPos = IN.worldPos;\n  #ifndef USING_DIRECTIONAL_LIGHT\n
          \   fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n
          \   fixed3 lightDir = _WorldSpaceLightPos0.xyz;\n  #endif\n  #ifdef UNITY_COMPILER_HLSL\n
          \ SurfaceOutput o = (SurfaceOutput)0;\n  #else\n  SurfaceOutput o;\n  #endif\n
          \ o.Albedo = 0.0;\n  o.Emission = 0.0;\n  o.Specular = 0.0;\n  o.Alpha =
          0.0;\n  o.Gloss = 0.0;\n  fixed3 normalWorldVertex = fixed3(0,0,1);\n  o.Normal
          = IN.worldNormal;\n  normalWorldVertex = IN.worldNormal;\n\n  // call surface
          function\n  surf (surfIN, o);\n\n  // output normal and specular\n  fixed4
          res;\n  res.rgb = o.Normal * 0.5 + 0.5;\n  res.a = o.Specular;\n  return
          res;\n}\n\n\n#endif\n\n\n"
        m_AssetPath: Assets/DefaultResourcesExtra
        m_PlatformMask: 4294967295
        m_HardwareTierVariantsMask: 0
        m_StartLine: 127
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: 50ca834ae523391965756df6e6a0c31b
        m_FromOther: 1
        m_Language: 0
        m_VariantsUser0:
        - - __
          - INSTANCING_ON
        m_VariantsUser1:
        - - __
          - INSTANCING_ON
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0: []
        m_VariantsBuiltin1: []
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_BaseRequirements: 33
        m_KeywordTargetInfo:
        - keywordName: SHADOWS_SOFT
          requirements: 227
        - keywordName: DIRLIGHTMAP_COMBINED
          requirements: 227
        - keywordName: DIRLIGHTMAP_SEPARATE
          requirements: 227
        - keywordName: DYNAMICLIGHTMAP_ON
          requirements: 227
        - keywordName: SHADOWS_SCREEN
          requirements: 227
        - keywordName: INSTANCING_ON
          requirements: 2048
        - keywordName: PROCEDURAL_INSTANCING_ON
          requirements: 16384
        - keywordName: STEREO_MULTIVIEW_ON
          requirements: 4087
        - keywordName: STEREO_INSTANCING_ON
          requirements: 4087
        m_NonStrippedUserKeywords: INSTANCING_ON
        m_BuiltinKeywords: 
      153878:
        serializedVersion: 2
        m_Code: "#pragma vertex vert\n#pragma fragment frag\n#pragma target 2.0\n#include
          \"UnityCG.cginc\"\n#pragma multi_compile_fog\n#define USING_FOG (defined(FOG_LINEAR)
          || defined(FOG_EXP) || defined(FOG_EXP2))\n\n// uniforms\nfloat4 _MainTex_ST;\n\n//
          vertex shader input data\nstruct appdata {\n  float3 pos : POSITION;\n  float3
          uv1 : TEXCOORD1;\n  float3 uv0 : TEXCOORD0;\n  UNITY_VERTEX_INPUT_INSTANCE_ID\n};\n\n//
          vertex-to-fragment interpolators\nstruct v2f {\n  fixed4 color : COLOR0;\n
          \ float2 uv0 : TEXCOORD0;\n  float2 uv1 : TEXCOORD1;\n  #if USING_FOG\n
          \   fixed fog : TEXCOORD2;\n  #endif\n  float4 pos : SV_POSITION;\n  UNITY_VERTEX_OUTPUT_STEREO\n};\n\n//
          vertex shader\nv2f vert (appdata IN) {\n  v2f o;\n  UNITY_SETUP_INSTANCE_ID(IN);\n
          \ UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);\n  half4 color = half4(0,0,0,1.1);\n
          \ float3 eyePos = mul (UNITY_MATRIX_MV, float4(IN.pos,1)).xyz;\n  half3
          viewDir = 0.0;\n  o.color = saturate(color);\n  // compute texture coordinates\n
          \ o.uv0 = IN.uv1.xy * unity_LightmapST.xy + unity_LightmapST.zw;\n  o.uv1
          = IN.uv0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n  // fog\n  #if USING_FOG\n
          \   float fogCoord = length(eyePos.xyz); // radial fog distance\n    UNITY_CALC_FOG_FACTOR_RAW(fogCoord);\n
          \   o.fog = saturate(unityFogFactor);\n  #endif\n  // transform position\n
          \ o.pos = UnityObjectToClipPos(IN.pos);\n  return o;\n}\n\n// textures\nsampler2D
          _MainTex;\nfixed4 _Color;\n\n// fragment shader\nfixed4 frag (v2f IN) :
          SV_Target {\n  fixed4 col;\n  fixed4 tex, tmp0, tmp1, tmp2;\n  // SetTexture
          #0\n  tex = UNITY_SAMPLE_TEX2D (unity_Lightmap, IN.uv0.xy);\n  col = tex
          * _Color;\n  // SetTexture #1\n  tex = tex2D (_MainTex, IN.uv1.xy);\n  col.rgb
          = tex * col;\n  col *= 2;\n  col.a = fixed4(1,1,1,1).a;\n  // fog\n  #if
          USING_FOG\n    col.rgb = lerp (unity_FogColor.rgb, col.rgb, IN.fog);\n  #endif\n
          \ return col;\n}\n\n// texenvs\n//! TexEnv0: 01010102 01010102 [unity_Lightmap]
          [_Color] usesLightmapST\n//! TexEnv1: 02010100 01060004 [_MainTex] [ffffffff]\n"
        m_AssetPath: 
        m_PlatformMask: 4294967295
        m_HardwareTierVariantsMask: 0
        m_StartLine: 1
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: 00000000000000000000000000000000
        m_FromOther: 1
        m_Language: 0
        m_VariantsUser0:
        - - _
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser1:
        - - _
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0: []
        m_VariantsBuiltin1: []
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_BaseRequirements: 1
        m_KeywordTargetInfo: []
        m_NonStrippedUserKeywords: FOG_EXP FOG_EXP2 FOG_LINEAR
        m_BuiltinKeywords: 
      167427:
        serializedVersion: 2
        m_Code: "#line 147 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          multi_compile_instancing\n#pragma skip_variants FOG_LINEAR FOG_EXP FOG_EXP2\n\n#include
          \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n#include
          \"UnityShaderUtilities.cginc\"\n// -------- variant for: <when no other
          keywords are defined>\n#if !defined(INSTANCING_ON)\n// Surface shader code
          generated based on:\n// writes to per-pixel normal: YES\n// writes to emission:
          no\n// writes to occlusion: no\n// needs world space reflection vector:
          no\n// needs world space normal vector: no\n// needs screen space position:
          no\n// needs world space position: no\n// needs view direction: no\n// needs
          world space view direction: no\n// needs world space position for lighting:
          YES\n// needs world space view direction for lighting: YES\n// needs world
          space view direction for lightmaps: no\n// needs vertex color: no\n// needs
          VFACE: no\n// passes tangent-to-world matrix to pixel shader: YES\n// reads
          from normal: no\n// 1 texcoords actually used\n//   float2 _BumpMap\n#define
          UNITY_PASS_PREPASSBASE\n#include \"UnityCG.cginc\"\n#include \"Lighting.cginc\"\n\n#define
          INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3
          internalSurfaceTtoW2;\n#define WorldReflectionVector(data,normal) reflect
          (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal),
          dot(data.internalSurfaceTtoW2,normal)))\n#define WorldNormalVector(data,normal)
          fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal),
          dot(data.internalSurfaceTtoW2,normal))\n\n// Original surface shader snippet:\n#line
          11 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n/*
          UNITY: Original start of shader */\n\t\t\t//#pragma surface surf BlinnPhong\n\n\t\t\tsampler2D
          _MainTex;\n\t\t\tsampler2D _BumpMap;\n\t\t\tfixed4 _Color;\n\t\t\thalf _Shininess;\n\n\t\t\tstruct
          Input {\n\t\t\t\tfloat2 uv_MainTex;\n\t\t\t\tfloat2 uv_BumpMap;\n\t\t\t\tfloat4
          color: Color;\n\t\t\t};\n\n\t\t\tvoid surf ( Input IN, inout SurfaceOutput
          o ) {\n\t\t\t\tfixed4 tex = tex2D( _MainTex, IN.uv_MainTex );\n\t\t\t\to.Albedo
          = tex.rgb * _Color.rgb * IN.color.rgb;\n\t\t\t\to.Gloss = tex.a;\n\t\t\t\to.Alpha
          = tex.a * _Color.a;\n\t\t\t\to.Specular = _Shininess;\n\t\t\t\to.Normal
          = UnpackNormal( tex2D( _BumpMap, IN.uv_BumpMap ) );\n\t\t\t}\n\t\t\n\n//
          vertex-to-fragment interpolation data\nstruct v2f_surf {\n  UNITY_POSITION(pos);\n
          \ float2 pack0 : TEXCOORD0; // _BumpMap\n  float4 tSpace0 : TEXCOORD1;\n
          \ float4 tSpace1 : TEXCOORD2;\n  float4 tSpace2 : TEXCOORD3;\n  UNITY_VERTEX_INPUT_INSTANCE_ID\n
          \ UNITY_VERTEX_OUTPUT_STEREO\n};\nfloat4 _BumpMap_ST;\n\n// vertex shader\nv2f_surf
          vert_surf (appdata_full v) {\n  UNITY_SETUP_INSTANCE_ID(v);\n  v2f_surf
          o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n  UNITY_TRANSFER_INSTANCE_ID(v,o);\n
          \ UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);\n  o.pos = UnityObjectToClipPos(v.vertex);\n
          \ o.pack0.xy = TRANSFORM_TEX(v.texcoord, _BumpMap);\n  float3 worldPos =
          mul(unity_ObjectToWorld, v.vertex).xyz;\n  fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);\n
          \ fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);\n  fixed tangentSign
          = v.tangent.w * unity_WorldTransformParams.w;\n  fixed3 worldBinormal =
          cross(worldNormal, worldTangent) * tangentSign;\n  o.tSpace0 = float4(worldTangent.x,
          worldBinormal.x, worldNormal.x, worldPos.x);\n  o.tSpace1 = float4(worldTangent.y,
          worldBinormal.y, worldNormal.y, worldPos.y);\n  o.tSpace2 = float4(worldTangent.z,
          worldBinormal.z, worldNormal.z, worldPos.z);\n  return o;\n}\n\n// fragment
          shader\nfixed4 frag_surf (v2f_surf IN) : SV_Target {\n  UNITY_SETUP_INSTANCE_ID(IN);\n
          \ // prepare and unpack data\n  Input surfIN;\n  UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n
          \ surfIN.uv_MainTex.x = 1.0;\n  surfIN.uv_BumpMap.x = 1.0;\n  surfIN.color.x
          = 1.0;\n  surfIN.uv_BumpMap = IN.pack0.xy;\n  float3 worldPos = float3(IN.tSpace0.w,
          IN.tSpace1.w, IN.tSpace2.w);\n  #ifndef USING_DIRECTIONAL_LIGHT\n    fixed3
          lightDir = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n    fixed3
          lightDir = _WorldSpaceLightPos0.xyz;\n  #endif\n  #ifdef UNITY_COMPILER_HLSL\n
          \ SurfaceOutput o = (SurfaceOutput)0;\n  #else\n  SurfaceOutput o;\n  #endif\n
          \ o.Albedo = 0.0;\n  o.Emission = 0.0;\n  o.Specular = 0.0;\n  o.Alpha =
          0.0;\n  o.Gloss = 0.0;\n  fixed3 normalWorldVertex = fixed3(0,0,1);\n\n
          \ // call surface function\n  surf (surfIN, o);\n  fixed3 worldN;\n  worldN.x
          = dot(IN.tSpace0.xyz, o.Normal);\n  worldN.y = dot(IN.tSpace1.xyz, o.Normal);\n
          \ worldN.z = dot(IN.tSpace2.xyz, o.Normal);\n  o.Normal = worldN;\n\n  //
          output normal and specular\n  fixed4 res;\n  res.rgb = o.Normal * 0.5 +
          0.5;\n  res.a = o.Specular;\n  return res;\n}\n\n\n#endif\n\n// --------
          variant for: INSTANCING_ON \n#if defined(INSTANCING_ON)\n// Surface shader
          code generated based on:\n// writes to per-pixel normal: YES\n// writes
          to emission: no\n// writes to occlusion: no\n// needs world space reflection
          vector: no\n// needs world space normal vector: no\n// needs screen space
          position: no\n// needs world space position: no\n// needs view direction:
          no\n// needs world space view direction: no\n// needs world space position
          for lighting: YES\n// needs world space view direction for lighting: YES\n//
          needs world space view direction for lightmaps: no\n// needs vertex color:
          no\n// needs VFACE: no\n// passes tangent-to-world matrix to pixel shader:
          YES\n// reads from normal: no\n// 1 texcoords actually used\n//   float2
          _BumpMap\n#define UNITY_PASS_PREPASSBASE\n#include \"UnityCG.cginc\"\n#include
          \"Lighting.cginc\"\n\n#define INTERNAL_DATA half3 internalSurfaceTtoW0;
          half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;\n#define WorldReflectionVector(data,normal)
          reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal),
          dot(data.internalSurfaceTtoW2,normal)))\n#define WorldNormalVector(data,normal)
          fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal),
          dot(data.internalSurfaceTtoW2,normal))\n\n// Original surface shader snippet:\n#line
          11 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n/*
          UNITY: Original start of shader */\n\t\t\t//#pragma surface surf BlinnPhong\n\n\t\t\tsampler2D
          _MainTex;\n\t\t\tsampler2D _BumpMap;\n\t\t\tfixed4 _Color;\n\t\t\thalf _Shininess;\n\n\t\t\tstruct
          Input {\n\t\t\t\tfloat2 uv_MainTex;\n\t\t\t\tfloat2 uv_BumpMap;\n\t\t\t\tfloat4
          color: Color;\n\t\t\t};\n\n\t\t\tvoid surf ( Input IN, inout SurfaceOutput
          o ) {\n\t\t\t\tfixed4 tex = tex2D( _MainTex, IN.uv_MainTex );\n\t\t\t\to.Albedo
          = tex.rgb * _Color.rgb * IN.color.rgb;\n\t\t\t\to.Gloss = tex.a;\n\t\t\t\to.Alpha
          = tex.a * _Color.a;\n\t\t\t\to.Specular = _Shininess;\n\t\t\t\to.Normal
          = UnpackNormal( tex2D( _BumpMap, IN.uv_BumpMap ) );\n\t\t\t}\n\t\t\n\n//
          vertex-to-fragment interpolation data\nstruct v2f_surf {\n  UNITY_POSITION(pos);\n
          \ float2 pack0 : TEXCOORD0; // _BumpMap\n  float4 tSpace0 : TEXCOORD1;\n
          \ float4 tSpace1 : TEXCOORD2;\n  float4 tSpace2 : TEXCOORD3;\n  UNITY_VERTEX_INPUT_INSTANCE_ID\n
          \ UNITY_VERTEX_OUTPUT_STEREO\n};\nfloat4 _BumpMap_ST;\n\n// vertex shader\nv2f_surf
          vert_surf (appdata_full v) {\n  UNITY_SETUP_INSTANCE_ID(v);\n  v2f_surf
          o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n  UNITY_TRANSFER_INSTANCE_ID(v,o);\n
          \ UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);\n  o.pos = UnityObjectToClipPos(v.vertex);\n
          \ o.pack0.xy = TRANSFORM_TEX(v.texcoord, _BumpMap);\n  float3 worldPos =
          mul(unity_ObjectToWorld, v.vertex).xyz;\n  fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);\n
          \ fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);\n  fixed tangentSign
          = v.tangent.w * unity_WorldTransformParams.w;\n  fixed3 worldBinormal =
          cross(worldNormal, worldTangent) * tangentSign;\n  o.tSpace0 = float4(worldTangent.x,
          worldBinormal.x, worldNormal.x, worldPos.x);\n  o.tSpace1 = float4(worldTangent.y,
          worldBinormal.y, worldNormal.y, worldPos.y);\n  o.tSpace2 = float4(worldTangent.z,
          worldBinormal.z, worldNormal.z, worldPos.z);\n  return o;\n}\n\n// fragment
          shader\nfixed4 frag_surf (v2f_surf IN) : SV_Target {\n  UNITY_SETUP_INSTANCE_ID(IN);\n
          \ // prepare and unpack data\n  Input surfIN;\n  UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n
          \ surfIN.uv_MainTex.x = 1.0;\n  surfIN.uv_BumpMap.x = 1.0;\n  surfIN.color.x
          = 1.0;\n  surfIN.uv_BumpMap = IN.pack0.xy;\n  float3 worldPos = float3(IN.tSpace0.w,
          IN.tSpace1.w, IN.tSpace2.w);\n  #ifndef USING_DIRECTIONAL_LIGHT\n    fixed3
          lightDir = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n    fixed3
          lightDir = _WorldSpaceLightPos0.xyz;\n  #endif\n  #ifdef UNITY_COMPILER_HLSL\n
          \ SurfaceOutput o = (SurfaceOutput)0;\n  #else\n  SurfaceOutput o;\n  #endif\n
          \ o.Albedo = 0.0;\n  o.Emission = 0.0;\n  o.Specular = 0.0;\n  o.Alpha =
          0.0;\n  o.Gloss = 0.0;\n  fixed3 normalWorldVertex = fixed3(0,0,1);\n\n
          \ // call surface function\n  surf (surfIN, o);\n  fixed3 worldN;\n  worldN.x
          = dot(IN.tSpace0.xyz, o.Normal);\n  worldN.y = dot(IN.tSpace1.xyz, o.Normal);\n
          \ worldN.z = dot(IN.tSpace2.xyz, o.Normal);\n  o.Normal = worldN;\n\n  //
          output normal and specular\n  fixed4 res;\n  res.rgb = o.Normal * 0.5 +
          0.5;\n  res.a = o.Specular;\n  return res;\n}\n\n\n#endif\n\n\n"
        m_AssetPath: Assets/Houdini/Shaders
        m_PlatformMask: 4294967295
        m_HardwareTierVariantsMask: 0
        m_StartLine: 149
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: 50ca834ae523391965756df6e6a0c31b
        m_FromOther: 0
        m_Language: 0
        m_VariantsUser0:
        - - __
          - INSTANCING_ON
        m_VariantsUser1:
        - - __
          - INSTANCING_ON
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0: []
        m_VariantsBuiltin1: []
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_BaseRequirements: 33
        m_KeywordTargetInfo:
        - keywordName: SHADOWS_SOFT
          requirements: 227
        - keywordName: DIRLIGHTMAP_COMBINED
          requirements: 227
        - keywordName: DIRLIGHTMAP_SEPARATE
          requirements: 227
        - keywordName: DYNAMICLIGHTMAP_ON
          requirements: 227
        - keywordName: SHADOWS_SCREEN
          requirements: 227
        - keywordName: INSTANCING_ON
          requirements: 2048
        - keywordName: PROCEDURAL_INSTANCING_ON
          requirements: 16384
        - keywordName: STEREO_MULTIVIEW_ON
          requirements: 4087
        - keywordName: STEREO_INSTANCING_ON
          requirements: 4087
        m_NonStrippedUserKeywords: INSTANCING_ON
        m_BuiltinKeywords: 
      203704:
        serializedVersion: 2
        m_Code: "#line 106 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          multi_compile_instancing\n#pragma multi_compile_fog\n#pragma multi_compile_prepassfinal\n#include
          \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n#include
          \"UnityShaderUtilities.cginc\"\n// -------- variant for: <when no other
          keywords are defined>\n#if !defined(INSTANCING_ON)\n// Surface shader code
          generated based on:\n// writes to per-pixel normal: no\n// writes to emission:
          no\n// writes to occlusion: no\n// needs world space reflection vector:
          no\n// needs world space normal vector: no\n// needs screen space position:
          no\n// needs world space position: no\n// needs view direction: no\n// needs
          world space view direction: no\n// needs world space position for lighting:
          YES\n// needs world space view direction for lighting: YES\n// needs world
          space view direction for lightmaps: no\n// needs vertex color: no\n// needs
          VFACE: no\n// passes tangent-to-world matrix to pixel shader: no\n// reads
          from normal: no\n// 1 texcoords actually used\n//   float2 _MainTex\n#define
          UNITY_PASS_PREPASSFINAL\n#include \"UnityCG.cginc\"\n#include \"Lighting.cginc\"\n\n#define
          INTERNAL_DATA\n#define WorldReflectionVector(data,normal) data.worldRefl\n#define
          WorldNormalVector(data,normal) normal\n\n// Original surface shader snippet:\n#line
          11 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n/*
          UNITY: Original start of shader */\n//#pragma surface surf BlinnPhong\n\nsampler2D
          _MainTex;\nfixed4 _Color;\nhalf _Shininess;\n\nstruct Input {\n    float2
          uv_MainTex;\n};\n\nvoid surf (Input IN, inout SurfaceOutput o) {\n    fixed4
          tex = tex2D(_MainTex, IN.uv_MainTex);\n    o.Albedo = tex.rgb * _Color.rgb;\n
          \   o.Gloss = tex.a;\n    o.Alpha = tex.a * _Color.a;\n    o.Specular =
          _Shininess;\n}\n\n\n// vertex-to-fragment interpolation data\nstruct v2f_surf
          {\n  UNITY_POSITION(pos);\n  float2 pack0 : TEXCOORD0; // _MainTex\n  float3
          worldPos : TEXCOORD1;\n  float4 screen : TEXCOORD2;\n  float4 lmap : TEXCOORD3;\n#ifndef
          LIGHTMAP_ON\n  float3 vlight : TEXCOORD4;\n#else\n#ifdef DIRLIGHTMAP_OFF\n
          \ float4 lmapFadePos : TEXCOORD4;\n#endif\n#endif\n  UNITY_FOG_COORDS(5)\n
          \ #if defined(LIGHTMAP_ON) && defined(DIRLIGHTMAP_COMBINED)\n  fixed3 tSpace0
          : TEXCOORD6;\n  fixed3 tSpace1 : TEXCOORD7;\n  fixed3 tSpace2 : TEXCOORD8;\n
          \ #endif\n  UNITY_VERTEX_INPUT_INSTANCE_ID\n  UNITY_VERTEX_OUTPUT_STEREO\n};\nfloat4
          _MainTex_ST;\n\n// vertex shader\nv2f_surf vert_surf (appdata_full v) {\n
          \ UNITY_SETUP_INSTANCE_ID(v);\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n
          \ UNITY_TRANSFER_INSTANCE_ID(v,o);\n  UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);\n
          \ o.pos = UnityObjectToClipPos(v.vertex);\n  o.pack0.xy = TRANSFORM_TEX(v.texcoord,
          _MainTex);\n  float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;\n
          \ fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);\n  #if defined(LIGHTMAP_ON)
          && defined(DIRLIGHTMAP_COMBINED)\n  fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);\n
          \ fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;\n  fixed3
          worldBinormal = cross(worldNormal, worldTangent) * tangentSign;\n  #endif\n
          \ #if defined(LIGHTMAP_ON) && defined(DIRLIGHTMAP_COMBINED)\n  o.tSpace0
          = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);\n
          \ o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);\n
          \ o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);\n
          \ #endif\n  o.worldPos = worldPos;\n  o.screen = ComputeScreenPos (o.pos);\n#ifdef
          DYNAMICLIGHTMAP_ON\n  o.lmap.zw = v.texcoord2.xy * unity_DynamicLightmapST.xy
          + unity_DynamicLightmapST.zw;\n#else\n  o.lmap.zw = 0;\n#endif\n#ifdef LIGHTMAP_ON\n
          \ o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;\n
          \ #ifdef DIRLIGHTMAP_OFF\n    o.lmapFadePos.xyz = (mul(unity_ObjectToWorld,
          v.vertex).xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w;\n
          \   o.lmapFadePos.w = (-UnityObjectToViewPos(v.vertex).z) * (1.0 - unity_ShadowFadeCenterAndType.w);\n
          \ #endif\n#else\n  o.lmap.xy = 0;\n  float3 worldN = UnityObjectToWorldNormal(v.normal);\n
          \ o.vlight = ShadeSH9 (float4(worldN,1.0));\n#endif\n  UNITY_TRANSFER_FOG(o,o.pos);
          // pass fog coordinates to pixel shader\n  return o;\n}\nsampler2D _LightBuffer;\nsampler2D
          _CameraNormalsTexture;\n#ifdef LIGHTMAP_ON\nfloat4 unity_LightmapFade;\n#endif\nfixed4
          unity_Ambient;\n\n// fragment shader\nfixed4 frag_surf (v2f_surf IN) : SV_Target
          {\n  UNITY_SETUP_INSTANCE_ID(IN);\n  // prepare and unpack data\n  Input
          surfIN;\n  UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n  surfIN.uv_MainTex.x
          = 1.0;\n  surfIN.uv_MainTex = IN.pack0.xy;\n  float3 worldPos = IN.worldPos;\n
          \ #ifndef USING_DIRECTIONAL_LIGHT\n    fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));\n
          \ #else\n    fixed3 lightDir = _WorldSpaceLightPos0.xyz;\n  #endif\n  #ifdef
          UNITY_COMPILER_HLSL\n  SurfaceOutput o = (SurfaceOutput)0;\n  #else\n  SurfaceOutput
          o;\n  #endif\n  o.Albedo = 0.0;\n  o.Emission = 0.0;\n  o.Specular = 0.0;\n
          \ o.Alpha = 0.0;\n  o.Gloss = 0.0;\n  fixed3 normalWorldVertex = fixed3(0,0,1);\n\n
          \ // call surface function\n  surf (surfIN, o);\n  half4 light = tex2Dproj
          (_LightBuffer, UNITY_PROJ_COORD(IN.screen));\n#if defined (SHADER_API_MOBILE)\n
          \ light = max(light, half4(0.001, 0.001, 0.001, 0.001));\n#endif\n#ifndef
          UNITY_HDR_ON\n  light = -log2(light);\n#endif\n  #ifdef LIGHTMAP_ON\n    #ifdef
          DIRLIGHTMAP_OFF\n      // single lightmap\n      fixed4 lmtex = UNITY_SAMPLE_TEX2D(unity_Lightmap,
          IN.lmap.xy);\n      fixed3 lm = DecodeLightmap (lmtex);\n      light.rgb
          += lm;\n    #elif DIRLIGHTMAP_COMBINED\n      half4 nspec = tex2Dproj (_CameraNormalsTexture,
          UNITY_PROJ_COORD(IN.screen));\n      half3 normal = nspec.rgb * 2 - 1;\n
          \     o.Normal = normalize(normal);\n      // directional lightmaps\n      fixed4
          lmtex = UNITY_SAMPLE_TEX2D(unity_Lightmap, IN.lmap.xy);\n      half4 lm
          = half4(DecodeLightmap(lmtex), 0);\n      light += lm;\n    #endif // DIRLIGHTMAP_OFF\n
          \ #else\n    light.rgb += IN.vlight;\n  #endif // LIGHTMAP_ON\n\n  #ifdef
          DYNAMICLIGHTMAP_ON\n  fixed4 dynlmtex = UNITY_SAMPLE_TEX2D(unity_DynamicLightmap,
          IN.lmap.zw);\n  light.rgb += DecodeRealtimeLightmap (dynlmtex);\n  #endif\n\n
          \ half4 c = LightingBlinnPhong_PrePass (o, light);\n  UNITY_APPLY_FOG(IN.fogCoord,
          c); // apply fog\n  UNITY_OPAQUE_ALPHA(c.a);\n  return c;\n}\n\n\n#endif\n\n//
          -------- variant for: INSTANCING_ON \n#if defined(INSTANCING_ON)\n// Surface
          shader code generated based on:\n// writes to per-pixel normal: no\n// writes
          to emission: no\n// writes to occlusion: no\n// needs world space reflection
          vector: no\n// needs world space normal vector: no\n// needs screen space
          position: no\n// needs world space position: no\n// needs view direction:
          no\n// needs world space view direction: no\n// needs world space position
          for lighting: YES\n// needs world space view direction for lighting: YES\n//
          needs world space view direction for lightmaps: no\n// needs vertex color:
          no\n// needs VFACE: no\n// passes tangent-to-world matrix to pixel shader:
          no\n// reads from normal: no\n// 1 texcoords actually used\n//   float2
          _MainTex\n#define UNITY_PASS_PREPASSFINAL\n#include \"UnityCG.cginc\"\n#include
          \"Lighting.cginc\"\n\n#define INTERNAL_DATA\n#define WorldReflectionVector(data,normal)
          data.worldRefl\n#define WorldNormalVector(data,normal) normal\n\n// Original
          surface shader snippet:\n#line 11 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n/*
          UNITY: Original start of shader */\n//#pragma surface surf BlinnPhong\n\nsampler2D
          _MainTex;\nfixed4 _Color;\nhalf _Shininess;\n\nstruct Input {\n    float2
          uv_MainTex;\n};\n\nvoid surf (Input IN, inout SurfaceOutput o) {\n    fixed4
          tex = tex2D(_MainTex, IN.uv_MainTex);\n    o.Albedo = tex.rgb * _Color.rgb;\n
          \   o.Gloss = tex.a;\n    o.Alpha = tex.a * _Color.a;\n    o.Specular =
          _Shininess;\n}\n\n\n// vertex-to-fragment interpolation data\nstruct v2f_surf
          {\n  UNITY_POSITION(pos);\n  float2 pack0 : TEXCOORD0; // _MainTex\n  float3
          worldPos : TEXCOORD1;\n  float4 screen : TEXCOORD2;\n  float4 lmap : TEXCOORD3;\n#ifndef
          LIGHTMAP_ON\n  float3 vlight : TEXCOORD4;\n#else\n#ifdef DIRLIGHTMAP_OFF\n
          \ float4 lmapFadePos : TEXCOORD4;\n#endif\n#endif\n  UNITY_FOG_COORDS(5)\n
          \ #if defined(LIGHTMAP_ON) && defined(DIRLIGHTMAP_COMBINED)\n  fixed3 tSpace0
          : TEXCOORD6;\n  fixed3 tSpace1 : TEXCOORD7;\n  fixed3 tSpace2 : TEXCOORD8;\n
          \ #endif\n  UNITY_VERTEX_INPUT_INSTANCE_ID\n  UNITY_VERTEX_OUTPUT_STEREO\n};\nfloat4
          _MainTex_ST;\n\n// vertex shader\nv2f_surf vert_surf (appdata_full v) {\n
          \ UNITY_SETUP_INSTANCE_ID(v);\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n
          \ UNITY_TRANSFER_INSTANCE_ID(v,o);\n  UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);\n
          \ o.pos = UnityObjectToClipPos(v.vertex);\n  o.pack0.xy = TRANSFORM_TEX(v.texcoord,
          _MainTex);\n  float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;\n
          \ fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);\n  #if defined(LIGHTMAP_ON)
          && defined(DIRLIGHTMAP_COMBINED)\n  fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);\n
          \ fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;\n  fixed3
          worldBinormal = cross(worldNormal, worldTangent) * tangentSign;\n  #endif\n
          \ #if defined(LIGHTMAP_ON) && defined(DIRLIGHTMAP_COMBINED)\n  o.tSpace0
          = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);\n
          \ o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);\n
          \ o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);\n
          \ #endif\n  o.worldPos = worldPos;\n  o.screen = ComputeScreenPos (o.pos);\n#ifdef
          DYNAMICLIGHTMAP_ON\n  o.lmap.zw = v.texcoord2.xy * unity_DynamicLightmapST.xy
          + unity_DynamicLightmapST.zw;\n#else\n  o.lmap.zw = 0;\n#endif\n#ifdef LIGHTMAP_ON\n
          \ o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;\n
          \ #ifdef DIRLIGHTMAP_OFF\n    o.lmapFadePos.xyz = (mul(unity_ObjectToWorld,
          v.vertex).xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w;\n
          \   o.lmapFadePos.w = (-UnityObjectToViewPos(v.vertex).z) * (1.0 - unity_ShadowFadeCenterAndType.w);\n
          \ #endif\n#else\n  o.lmap.xy = 0;\n  float3 worldN = UnityObjectToWorldNormal(v.normal);\n
          \ o.vlight = ShadeSH9 (float4(worldN,1.0));\n#endif\n  UNITY_TRANSFER_FOG(o,o.pos);
          // pass fog coordinates to pixel shader\n  return o;\n}\nsampler2D _LightBuffer;\nsampler2D
          _CameraNormalsTexture;\n#ifdef LIGHTMAP_ON\nfloat4 unity_LightmapFade;\n#endif\nfixed4
          unity_Ambient;\n\n// fragment shader\nfixed4 frag_surf (v2f_surf IN) : SV_Target
          {\n  UNITY_SETUP_INSTANCE_ID(IN);\n  // prepare and unpack data\n  Input
          surfIN;\n  UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n  surfIN.uv_MainTex.x
          = 1.0;\n  surfIN.uv_MainTex = IN.pack0.xy;\n  float3 worldPos = IN.worldPos;\n
          \ #ifndef USING_DIRECTIONAL_LIGHT\n    fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));\n
          \ #else\n    fixed3 lightDir = _WorldSpaceLightPos0.xyz;\n  #endif\n  #ifdef
          UNITY_COMPILER_HLSL\n  SurfaceOutput o = (SurfaceOutput)0;\n  #else\n  SurfaceOutput
          o;\n  #endif\n  o.Albedo = 0.0;\n  o.Emission = 0.0;\n  o.Specular = 0.0;\n
          \ o.Alpha = 0.0;\n  o.Gloss = 0.0;\n  fixed3 normalWorldVertex = fixed3(0,0,1);\n\n
          \ // call surface function\n  surf (surfIN, o);\n  half4 light = tex2Dproj
          (_LightBuffer, UNITY_PROJ_COORD(IN.screen));\n#if defined (SHADER_API_MOBILE)\n
          \ light = max(light, half4(0.001, 0.001, 0.001, 0.001));\n#endif\n#ifndef
          UNITY_HDR_ON\n  light = -log2(light);\n#endif\n  #ifdef LIGHTMAP_ON\n    #ifdef
          DIRLIGHTMAP_OFF\n      // single lightmap\n      fixed4 lmtex = UNITY_SAMPLE_TEX2D(unity_Lightmap,
          IN.lmap.xy);\n      fixed3 lm = DecodeLightmap (lmtex);\n      light.rgb
          += lm;\n    #elif DIRLIGHTMAP_COMBINED\n      half4 nspec = tex2Dproj (_CameraNormalsTexture,
          UNITY_PROJ_COORD(IN.screen));\n      half3 normal = nspec.rgb * 2 - 1;\n
          \     o.Normal = normalize(normal);\n      // directional lightmaps\n      fixed4
          lmtex = UNITY_SAMPLE_TEX2D(unity_Lightmap, IN.lmap.xy);\n      half4 lm
          = half4(DecodeLightmap(lmtex), 0);\n      light += lm;\n    #endif // DIRLIGHTMAP_OFF\n
          \ #else\n    light.rgb += IN.vlight;\n  #endif // LIGHTMAP_ON\n\n  #ifdef
          DYNAMICLIGHTMAP_ON\n  fixed4 dynlmtex = UNITY_SAMPLE_TEX2D(unity_DynamicLightmap,
          IN.lmap.zw);\n  light.rgb += DecodeRealtimeLightmap (dynlmtex);\n  #endif\n\n
          \ half4 c = LightingBlinnPhong_PrePass (o, light);\n  UNITY_APPLY_FOG(IN.fogCoord,
          c); // apply fog\n  UNITY_OPAQUE_ALPHA(c.a);\n  return c;\n}\n\n\n#endif\n\n\n"
        m_AssetPath: Assets/DefaultResourcesExtra
        m_PlatformMask: 4294967295
        m_HardwareTierVariantsMask: 0
        m_StartLine: 108
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: 50ca834ae523391965756df6e6a0c31b
        m_FromOther: 1
        m_Language: 0
        m_VariantsUser0:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        - - __
          - INSTANCING_ON
        m_VariantsUser1:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        - - __
          - INSTANCING_ON
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0:
        - []
        - - DYNAMICLIGHTMAP_ON
        - - SHADOWS_SHADOWMASK
        - - DYNAMICLIGHTMAP_ON
          - SHADOWS_SHADOWMASK
        - - LIGHTMAP_ON
        - - LIGHTMAP_ON
          - DYNAMICLIGHTMAP_ON
        - - LIGHTMAP_ON
          - SHADOWS_SHADOWMASK
        - - LIGHTMAP_ON
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SHADOWMASK
        - - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
        - - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SHADOWMASK
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - SHADOWS_SHADOWMASK
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SHADOWMASK
        - - UNITY_HDR_ON
        - - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - UNITY_HDR_ON
          - SHADOWS_SHADOWMASK
        - - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
          - SHADOWS_SHADOWMASK
        - - LIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - UNITY_HDR_ON
          - SHADOWS_SHADOWMASK
        - - LIGHTMAP_ON
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
          - SHADOWS_SHADOWMASK
        - - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
          - SHADOWS_SHADOWMASK
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - UNITY_HDR_ON
          - SHADOWS_SHADOWMASK
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
          - SHADOWS_SHADOWMASK
        m_VariantsBuiltin1:
        - []
        - - DYNAMICLIGHTMAP_ON
        - - SHADOWS_SHADOWMASK
        - - DYNAMICLIGHTMAP_ON
          - SHADOWS_SHADOWMASK
        - - LIGHTMAP_ON
        - - LIGHTMAP_ON
          - DYNAMICLIGHTMAP_ON
        - - LIGHTMAP_ON
          - SHADOWS_SHADOWMASK
        - - LIGHTMAP_ON
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SHADOWMASK
        - - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
        - - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SHADOWMASK
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - SHADOWS_SHADOWMASK
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SHADOWMASK
        - - UNITY_HDR_ON
        - - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - UNITY_HDR_ON
          - SHADOWS_SHADOWMASK
        - - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
          - SHADOWS_SHADOWMASK
        - - LIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - UNITY_HDR_ON
          - SHADOWS_SHADOWMASK
        - - LIGHTMAP_ON
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
          - SHADOWS_SHADOWMASK
        - - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
          - SHADOWS_SHADOWMASK
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - UNITY_HDR_ON
          - SHADOWS_SHADOWMASK
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
          - SHADOWS_SHADOWMASK
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_BaseRequirements: 33
        m_KeywordTargetInfo:
        - keywordName: SHADOWS_SOFT
          requirements: 227
        - keywordName: DIRLIGHTMAP_COMBINED
          requirements: 227
        - keywordName: DIRLIGHTMAP_SEPARATE
          requirements: 227
        - keywordName: DYNAMICLIGHTMAP_ON
          requirements: 227
        - keywordName: SHADOWS_SCREEN
          requirements: 227
        - keywordName: INSTANCING_ON
          requirements: 2048
        - keywordName: PROCEDURAL_INSTANCING_ON
          requirements: 16384
        - keywordName: STEREO_MULTIVIEW_ON
          requirements: 4087
        - keywordName: STEREO_INSTANCING_ON
          requirements: 4087
        m_NonStrippedUserKeywords: FOG_EXP FOG_EXP2 FOG_LINEAR INSTANCING_ON
        m_BuiltinKeywords: DIRLIGHTMAP_COMBINED DYNAMICLIGHTMAP_ON LIGHTMAP_ON SHADOWS_SHADOWMASK
          UNITY_HDR_ON
      231618:
        serializedVersion: 2
        m_Code: "#line 124 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          multi_compile_instancing\n#pragma multi_compile_fog\n#pragma multi_compile_prepassfinal\n#include
          \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n#include
          \"UnityShaderUtilities.cginc\"\n// -------- variant for: <when no other
          keywords are defined>\n#if !defined(INSTANCING_ON)\n// Surface shader code
          generated based on:\n// writes to per-pixel normal: YES\n// writes to emission:
          no\n// writes to occlusion: no\n// needs world space reflection vector:
          no\n// needs world space normal vector: no\n// needs screen space position:
          no\n// needs world space position: no\n// needs view direction: no\n// needs
          world space view direction: no\n// needs world space position for lighting:
          YES\n// needs world space view direction for lighting: YES\n// needs world
          space view direction for lightmaps: no\n// needs vertex color: YES\n// needs
          VFACE: no\n// passes tangent-to-world matrix to pixel shader: YES\n// reads
          from normal: no\n// 1 texcoords actually used\n//   float2 _MainTex\n#define
          UNITY_PASS_PREPASSFINAL\n#include \"UnityCG.cginc\"\n#include \"Lighting.cginc\"\n\n#define
          INTERNAL_DATA\n#define WorldReflectionVector(data,normal) data.worldRefl\n#define
          WorldNormalVector(data,normal) normal\n\n// Original surface shader snippet:\n#line
          11 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n/*
          UNITY: Original start of shader */\n\t\t\t//#pragma surface surf BlinnPhong\n\n\t\t\tsampler2D
          _MainTex;\n\t\t\tsampler2D _BumpMap;\n\t\t\tfixed4 _Color;\n\t\t\thalf _Shininess;\n\n\t\t\tstruct
          Input {\n\t\t\t\tfloat2 uv_MainTex;\n\t\t\t\tfloat2 uv_BumpMap;\n\t\t\t\tfloat4
          color: Color;\n\t\t\t};\n\n\t\t\tvoid surf ( Input IN, inout SurfaceOutput
          o ) {\n\t\t\t\tfixed4 tex = tex2D( _MainTex, IN.uv_MainTex );\n\t\t\t\to.Albedo
          = tex.rgb * _Color.rgb * IN.color.rgb;\n\t\t\t\to.Gloss = tex.a;\n\t\t\t\to.Alpha
          = tex.a * _Color.a;\n\t\t\t\to.Specular = _Shininess;\n\t\t\t\to.Normal
          = UnpackNormal( tex2D( _BumpMap, IN.uv_BumpMap ) );\n\t\t\t}\n\t\t\n\n//
          vertex-to-fragment interpolation data\nstruct v2f_surf {\n  UNITY_POSITION(pos);\n
          \ float2 pack0 : TEXCOORD0; // _MainTex\n  float3 worldPos : TEXCOORD1;\n
          \ fixed4 color : COLOR0;\n  float4 screen : TEXCOORD2;\n  float4 lmap :
          TEXCOORD3;\n#ifndef LIGHTMAP_ON\n  float3 vlight : TEXCOORD4;\n#else\n#ifdef
          DIRLIGHTMAP_OFF\n  float4 lmapFadePos : TEXCOORD4;\n#endif\n#endif\n  UNITY_FOG_COORDS(5)\n
          \ #if defined(LIGHTMAP_ON) && defined(DIRLIGHTMAP_COMBINED)\n  fixed3 tSpace0
          : TEXCOORD6;\n  fixed3 tSpace1 : TEXCOORD7;\n  fixed3 tSpace2 : TEXCOORD8;\n
          \ #endif\n  UNITY_VERTEX_INPUT_INSTANCE_ID\n  UNITY_VERTEX_OUTPUT_STEREO\n};\nfloat4
          _MainTex_ST;\n\n// vertex shader\nv2f_surf vert_surf (appdata_full v) {\n
          \ UNITY_SETUP_INSTANCE_ID(v);\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n
          \ UNITY_TRANSFER_INSTANCE_ID(v,o);\n  UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);\n
          \ o.pos = UnityObjectToClipPos(v.vertex);\n  o.pack0.xy = TRANSFORM_TEX(v.texcoord,
          _MainTex);\n  float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;\n
          \ fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);\n  #if defined(LIGHTMAP_ON)
          && defined(DIRLIGHTMAP_COMBINED)\n  fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);\n
          \ fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;\n  fixed3
          worldBinormal = cross(worldNormal, worldTangent) * tangentSign;\n  #endif\n
          \ #if defined(LIGHTMAP_ON) && defined(DIRLIGHTMAP_COMBINED)\n  o.tSpace0
          = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);\n
          \ o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);\n
          \ o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);\n
          \ #endif\n  o.worldPos = worldPos;\n  o.color = v.color;\n  o.screen = ComputeScreenPos
          (o.pos);\n#ifdef DYNAMICLIGHTMAP_ON\n  o.lmap.zw = v.texcoord2.xy * unity_DynamicLightmapST.xy
          + unity_DynamicLightmapST.zw;\n#else\n  o.lmap.zw = 0;\n#endif\n#ifdef LIGHTMAP_ON\n
          \ o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;\n
          \ #ifdef DIRLIGHTMAP_OFF\n    o.lmapFadePos.xyz = (mul(unity_ObjectToWorld,
          v.vertex).xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w;\n
          \   o.lmapFadePos.w = (-UnityObjectToViewPos(v.vertex).z) * (1.0 - unity_ShadowFadeCenterAndType.w);\n
          \ #endif\n#else\n  o.lmap.xy = 0;\n  float3 worldN = UnityObjectToWorldNormal(v.normal);\n
          \ o.vlight = ShadeSH9 (float4(worldN,1.0));\n#endif\n  UNITY_TRANSFER_FOG(o,o.pos);
          // pass fog coordinates to pixel shader\n  return o;\n}\nsampler2D _LightBuffer;\nsampler2D
          _CameraNormalsTexture;\n#ifdef LIGHTMAP_ON\nfloat4 unity_LightmapFade;\n#endif\nfixed4
          unity_Ambient;\n\n// fragment shader\nfixed4 frag_surf (v2f_surf IN) : SV_Target
          {\n  UNITY_SETUP_INSTANCE_ID(IN);\n  // prepare and unpack data\n  Input
          surfIN;\n  UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n  surfIN.uv_MainTex.x
          = 1.0;\n  surfIN.uv_BumpMap.x = 1.0;\n  surfIN.color.x = 1.0;\n  surfIN.uv_MainTex
          = IN.pack0.xy;\n  float3 worldPos = IN.worldPos;\n  #ifndef USING_DIRECTIONAL_LIGHT\n
          \   fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n
          \   fixed3 lightDir = _WorldSpaceLightPos0.xyz;\n  #endif\n  surfIN.color
          = IN.color;\n  #ifdef UNITY_COMPILER_HLSL\n  SurfaceOutput o = (SurfaceOutput)0;\n
          \ #else\n  SurfaceOutput o;\n  #endif\n  o.Albedo = 0.0;\n  o.Emission =
          0.0;\n  o.Specular = 0.0;\n  o.Alpha = 0.0;\n  o.Gloss = 0.0;\n  fixed3
          normalWorldVertex = fixed3(0,0,1);\n\n  // call surface function\n  surf
          (surfIN, o);\n  half4 light = tex2Dproj (_LightBuffer, UNITY_PROJ_COORD(IN.screen));\n#if
          defined (SHADER_API_MOBILE)\n  light = max(light, half4(0.001, 0.001, 0.001,
          0.001));\n#endif\n#ifndef UNITY_HDR_ON\n  light = -log2(light);\n#endif\n
          \ #ifdef LIGHTMAP_ON\n    #ifdef DIRLIGHTMAP_OFF\n      // single lightmap\n
          \     fixed4 lmtex = UNITY_SAMPLE_TEX2D(unity_Lightmap, IN.lmap.xy);\n      fixed3
          lm = DecodeLightmap (lmtex);\n      light.rgb += lm;\n    #elif DIRLIGHTMAP_COMBINED\n
          \     half4 nspec = tex2Dproj (_CameraNormalsTexture, UNITY_PROJ_COORD(IN.screen));\n
          \     half3 normal = nspec.rgb * 2 - 1;\n      o.Normal = normalize(normal);\n
          \     // directional lightmaps\n      fixed4 lmtex = UNITY_SAMPLE_TEX2D(unity_Lightmap,
          IN.lmap.xy);\n      fixed4 lmIndTex = UNITY_SAMPLE_TEX2D_SAMPLER(unity_LightmapInd,
          unity_Lightmap, IN.lmap.xy);\n      half4 lm = half4(DecodeDirectionalLightmap
          (DecodeLightmap(lmtex), lmIndTex, o.Normal), 0);\n      light += lm;\n    #endif
          // DIRLIGHTMAP_OFF\n  #else\n    light.rgb += IN.vlight;\n  #endif // LIGHTMAP_ON\n\n
          \ #ifdef DYNAMICLIGHTMAP_ON\n  fixed4 dynlmtex = UNITY_SAMPLE_TEX2D(unity_DynamicLightmap,
          IN.lmap.zw);\n  light.rgb += DecodeRealtimeLightmap (dynlmtex);\n  #endif\n\n
          \ half4 c = LightingBlinnPhong_PrePass (o, light);\n  UNITY_APPLY_FOG(IN.fogCoord,
          c); // apply fog\n  UNITY_OPAQUE_ALPHA(c.a);\n  return c;\n}\n\n\n#endif\n\n//
          -------- variant for: INSTANCING_ON \n#if defined(INSTANCING_ON)\n// Surface
          shader code generated based on:\n// writes to per-pixel normal: YES\n//
          writes to emission: no\n// writes to occlusion: no\n// needs world space
          reflection vector: no\n// needs world space normal vector: no\n// needs
          screen space position: no\n// needs world space position: no\n// needs view
          direction: no\n// needs world space view direction: no\n// needs world space
          position for lighting: YES\n// needs world space view direction for lighting:
          YES\n// needs world space view direction for lightmaps: no\n// needs vertex
          color: YES\n// needs VFACE: no\n// passes tangent-to-world matrix to pixel
          shader: YES\n// reads from normal: no\n// 1 texcoords actually used\n//
          \  float2 _MainTex\n#define UNITY_PASS_PREPASSFINAL\n#include \"UnityCG.cginc\"\n#include
          \"Lighting.cginc\"\n\n#define INTERNAL_DATA\n#define WorldReflectionVector(data,normal)
          data.worldRefl\n#define WorldNormalVector(data,normal) normal\n\n// Original
          surface shader snippet:\n#line 11 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n/*
          UNITY: Original start of shader */\n\t\t\t//#pragma surface surf BlinnPhong\n\n\t\t\tsampler2D
          _MainTex;\n\t\t\tsampler2D _BumpMap;\n\t\t\tfixed4 _Color;\n\t\t\thalf _Shininess;\n\n\t\t\tstruct
          Input {\n\t\t\t\tfloat2 uv_MainTex;\n\t\t\t\tfloat2 uv_BumpMap;\n\t\t\t\tfloat4
          color: Color;\n\t\t\t};\n\n\t\t\tvoid surf ( Input IN, inout SurfaceOutput
          o ) {\n\t\t\t\tfixed4 tex = tex2D( _MainTex, IN.uv_MainTex );\n\t\t\t\to.Albedo
          = tex.rgb * _Color.rgb * IN.color.rgb;\n\t\t\t\to.Gloss = tex.a;\n\t\t\t\to.Alpha
          = tex.a * _Color.a;\n\t\t\t\to.Specular = _Shininess;\n\t\t\t\to.Normal
          = UnpackNormal( tex2D( _BumpMap, IN.uv_BumpMap ) );\n\t\t\t}\n\t\t\n\n//
          vertex-to-fragment interpolation data\nstruct v2f_surf {\n  UNITY_POSITION(pos);\n
          \ float2 pack0 : TEXCOORD0; // _MainTex\n  float3 worldPos : TEXCOORD1;\n
          \ fixed4 color : COLOR0;\n  float4 screen : TEXCOORD2;\n  float4 lmap :
          TEXCOORD3;\n#ifndef LIGHTMAP_ON\n  float3 vlight : TEXCOORD4;\n#else\n#ifdef
          DIRLIGHTMAP_OFF\n  float4 lmapFadePos : TEXCOORD4;\n#endif\n#endif\n  UNITY_FOG_COORDS(5)\n
          \ #if defined(LIGHTMAP_ON) && defined(DIRLIGHTMAP_COMBINED)\n  fixed3 tSpace0
          : TEXCOORD6;\n  fixed3 tSpace1 : TEXCOORD7;\n  fixed3 tSpace2 : TEXCOORD8;\n
          \ #endif\n  UNITY_VERTEX_INPUT_INSTANCE_ID\n  UNITY_VERTEX_OUTPUT_STEREO\n};\nfloat4
          _MainTex_ST;\n\n// vertex shader\nv2f_surf vert_surf (appdata_full v) {\n
          \ UNITY_SETUP_INSTANCE_ID(v);\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n
          \ UNITY_TRANSFER_INSTANCE_ID(v,o);\n  UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);\n
          \ o.pos = UnityObjectToClipPos(v.vertex);\n  o.pack0.xy = TRANSFORM_TEX(v.texcoord,
          _MainTex);\n  float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;\n
          \ fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);\n  #if defined(LIGHTMAP_ON)
          && defined(DIRLIGHTMAP_COMBINED)\n  fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);\n
          \ fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;\n  fixed3
          worldBinormal = cross(worldNormal, worldTangent) * tangentSign;\n  #endif\n
          \ #if defined(LIGHTMAP_ON) && defined(DIRLIGHTMAP_COMBINED)\n  o.tSpace0
          = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);\n
          \ o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);\n
          \ o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);\n
          \ #endif\n  o.worldPos = worldPos;\n  o.color = v.color;\n  o.screen = ComputeScreenPos
          (o.pos);\n#ifdef DYNAMICLIGHTMAP_ON\n  o.lmap.zw = v.texcoord2.xy * unity_DynamicLightmapST.xy
          + unity_DynamicLightmapST.zw;\n#else\n  o.lmap.zw = 0;\n#endif\n#ifdef LIGHTMAP_ON\n
          \ o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;\n
          \ #ifdef DIRLIGHTMAP_OFF\n    o.lmapFadePos.xyz = (mul(unity_ObjectToWorld,
          v.vertex).xyz - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w;\n
          \   o.lmapFadePos.w = (-UnityObjectToViewPos(v.vertex).z) * (1.0 - unity_ShadowFadeCenterAndType.w);\n
          \ #endif\n#else\n  o.lmap.xy = 0;\n  float3 worldN = UnityObjectToWorldNormal(v.normal);\n
          \ o.vlight = ShadeSH9 (float4(worldN,1.0));\n#endif\n  UNITY_TRANSFER_FOG(o,o.pos);
          // pass fog coordinates to pixel shader\n  return o;\n}\nsampler2D _LightBuffer;\nsampler2D
          _CameraNormalsTexture;\n#ifdef LIGHTMAP_ON\nfloat4 unity_LightmapFade;\n#endif\nfixed4
          unity_Ambient;\n\n// fragment shader\nfixed4 frag_surf (v2f_surf IN) : SV_Target
          {\n  UNITY_SETUP_INSTANCE_ID(IN);\n  // prepare and unpack data\n  Input
          surfIN;\n  UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n  surfIN.uv_MainTex.x
          = 1.0;\n  surfIN.uv_BumpMap.x = 1.0;\n  surfIN.color.x = 1.0;\n  surfIN.uv_MainTex
          = IN.pack0.xy;\n  float3 worldPos = IN.worldPos;\n  #ifndef USING_DIRECTIONAL_LIGHT\n
          \   fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n
          \   fixed3 lightDir = _WorldSpaceLightPos0.xyz;\n  #endif\n  surfIN.color
          = IN.color;\n  #ifdef UNITY_COMPILER_HLSL\n  SurfaceOutput o = (SurfaceOutput)0;\n
          \ #else\n  SurfaceOutput o;\n  #endif\n  o.Albedo = 0.0;\n  o.Emission =
          0.0;\n  o.Specular = 0.0;\n  o.Alpha = 0.0;\n  o.Gloss = 0.0;\n  fixed3
          normalWorldVertex = fixed3(0,0,1);\n\n  // call surface function\n  surf
          (surfIN, o);\n  half4 light = tex2Dproj (_LightBuffer, UNITY_PROJ_COORD(IN.screen));\n#if
          defined (SHADER_API_MOBILE)\n  light = max(light, half4(0.001, 0.001, 0.001,
          0.001));\n#endif\n#ifndef UNITY_HDR_ON\n  light = -log2(light);\n#endif\n
          \ #ifdef LIGHTMAP_ON\n    #ifdef DIRLIGHTMAP_OFF\n      // single lightmap\n
          \     fixed4 lmtex = UNITY_SAMPLE_TEX2D(unity_Lightmap, IN.lmap.xy);\n      fixed3
          lm = DecodeLightmap (lmtex);\n      light.rgb += lm;\n    #elif DIRLIGHTMAP_COMBINED\n
          \     half4 nspec = tex2Dproj (_CameraNormalsTexture, UNITY_PROJ_COORD(IN.screen));\n
          \     half3 normal = nspec.rgb * 2 - 1;\n      o.Normal = normalize(normal);\n
          \     // directional lightmaps\n      fixed4 lmtex = UNITY_SAMPLE_TEX2D(unity_Lightmap,
          IN.lmap.xy);\n      fixed4 lmIndTex = UNITY_SAMPLE_TEX2D_SAMPLER(unity_LightmapInd,
          unity_Lightmap, IN.lmap.xy);\n      half4 lm = half4(DecodeDirectionalLightmap
          (DecodeLightmap(lmtex), lmIndTex, o.Normal), 0);\n      light += lm;\n    #endif
          // DIRLIGHTMAP_OFF\n  #else\n    light.rgb += IN.vlight;\n  #endif // LIGHTMAP_ON\n\n
          \ #ifdef DYNAMICLIGHTMAP_ON\n  fixed4 dynlmtex = UNITY_SAMPLE_TEX2D(unity_DynamicLightmap,
          IN.lmap.zw);\n  light.rgb += DecodeRealtimeLightmap (dynlmtex);\n  #endif\n\n
          \ half4 c = LightingBlinnPhong_PrePass (o, light);\n  UNITY_APPLY_FOG(IN.fogCoord,
          c); // apply fog\n  UNITY_OPAQUE_ALPHA(c.a);\n  return c;\n}\n\n\n#endif\n\n\n"
        m_AssetPath: Assets/Houdini/Shaders
        m_PlatformMask: 4294967295
        m_HardwareTierVariantsMask: 0
        m_StartLine: 126
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: 50ca834ae523391965756df6e6a0c31b
        m_FromOther: 0
        m_Language: 0
        m_VariantsUser0:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        - - __
          - INSTANCING_ON
        m_VariantsUser1:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        - - __
          - INSTANCING_ON
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0:
        - []
        - - DYNAMICLIGHTMAP_ON
        - - SHADOWS_SHADOWMASK
        - - DYNAMICLIGHTMAP_ON
          - SHADOWS_SHADOWMASK
        - - LIGHTMAP_ON
        - - LIGHTMAP_ON
          - DYNAMICLIGHTMAP_ON
        - - LIGHTMAP_ON
          - SHADOWS_SHADOWMASK
        - - LIGHTMAP_ON
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SHADOWMASK
        - - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
        - - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SHADOWMASK
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - SHADOWS_SHADOWMASK
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SHADOWMASK
        - - UNITY_HDR_ON
        - - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - UNITY_HDR_ON
          - SHADOWS_SHADOWMASK
        - - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
          - SHADOWS_SHADOWMASK
        - - LIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - UNITY_HDR_ON
          - SHADOWS_SHADOWMASK
        - - LIGHTMAP_ON
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
          - SHADOWS_SHADOWMASK
        - - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
          - SHADOWS_SHADOWMASK
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - UNITY_HDR_ON
          - SHADOWS_SHADOWMASK
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
          - SHADOWS_SHADOWMASK
        m_VariantsBuiltin1:
        - []
        - - DYNAMICLIGHTMAP_ON
        - - SHADOWS_SHADOWMASK
        - - DYNAMICLIGHTMAP_ON
          - SHADOWS_SHADOWMASK
        - - LIGHTMAP_ON
        - - LIGHTMAP_ON
          - DYNAMICLIGHTMAP_ON
        - - LIGHTMAP_ON
          - SHADOWS_SHADOWMASK
        - - LIGHTMAP_ON
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SHADOWMASK
        - - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
        - - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SHADOWMASK
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - SHADOWS_SHADOWMASK
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SHADOWMASK
        - - UNITY_HDR_ON
        - - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - UNITY_HDR_ON
          - SHADOWS_SHADOWMASK
        - - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
          - SHADOWS_SHADOWMASK
        - - LIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - UNITY_HDR_ON
          - SHADOWS_SHADOWMASK
        - - LIGHTMAP_ON
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
          - SHADOWS_SHADOWMASK
        - - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
          - SHADOWS_SHADOWMASK
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - UNITY_HDR_ON
          - SHADOWS_SHADOWMASK
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
          - SHADOWS_SHADOWMASK
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_BaseRequirements: 33
        m_KeywordTargetInfo:
        - keywordName: SHADOWS_SOFT
          requirements: 227
        - keywordName: DIRLIGHTMAP_COMBINED
          requirements: 227
        - keywordName: DIRLIGHTMAP_SEPARATE
          requirements: 227
        - keywordName: DYNAMICLIGHTMAP_ON
          requirements: 227
        - keywordName: SHADOWS_SCREEN
          requirements: 227
        - keywordName: INSTANCING_ON
          requirements: 2048
        - keywordName: PROCEDURAL_INSTANCING_ON
          requirements: 16384
        - keywordName: STEREO_MULTIVIEW_ON
          requirements: 4087
        - keywordName: STEREO_INSTANCING_ON
          requirements: 4087
        m_NonStrippedUserKeywords: FOG_EXP FOG_EXP2 FOG_LINEAR INSTANCING_ON
        m_BuiltinKeywords: DIRLIGHTMAP_COMBINED DYNAMICLIGHTMAP_ON LIGHTMAP_ON SHADOWS_SHADOWMASK
          UNITY_HDR_ON
      262140:
        serializedVersion: 2
        m_Code: "#pragma vertex vert\n#pragma fragment frag\n#pragma target 2.0\n#include
          \"UnityCG.cginc\"\n#pragma multi_compile_fog\n#define USING_FOG (defined(FOG_LINEAR)
          || defined(FOG_EXP) || defined(FOG_EXP2))\n\n// uniforms\nfloat4 unity_Lightmap_ST;\nfloat4
          _MainTex_ST;\n\n// vertex shader input data\nstruct appdata {\n  float3
          pos : POSITION;\n  float3 uv1 : TEXCOORD1;\n  float3 uv0 : TEXCOORD0;\n
          \ UNITY_VERTEX_INPUT_INSTANCE_ID\n};\n\n// vertex-to-fragment interpolators\nstruct
          v2f {\n  fixed4 color : COLOR0;\n  float2 uv0 : TEXCOORD0;\n  float2 uv1
          : TEXCOORD1;\n  float2 uv2 : TEXCOORD2;\n  #if USING_FOG\n    fixed fog
          : TEXCOORD3;\n  #endif\n  float4 pos : SV_POSITION;\n  UNITY_VERTEX_OUTPUT_STEREO\n};\n\n//
          vertex shader\nv2f vert (appdata IN) {\n  v2f o;\n  UNITY_SETUP_INSTANCE_ID(IN);\n
          \ UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);\n  half4 color = half4(0,0,0,1.1);\n
          \ float3 eyePos = mul (UNITY_MATRIX_MV, float4(IN.pos,1)).xyz;\n  half3
          viewDir = 0.0;\n  o.color = saturate(color);\n  // compute texture coordinates\n
          \ o.uv0 = IN.uv1.xy * unity_LightmapST.xy + unity_LightmapST.zw;\n  o.uv1
          = IN.uv1.xy * unity_Lightmap_ST.xy + unity_Lightmap_ST.zw;\n  o.uv2 = IN.uv0.xy
          * _MainTex_ST.xy + _MainTex_ST.zw;\n  // fog\n  #if USING_FOG\n    float
          fogCoord = length(eyePos.xyz); // radial fog distance\n    UNITY_CALC_FOG_FACTOR_RAW(fogCoord);\n
          \   o.fog = saturate(unityFogFactor);\n  #endif\n  // transform position\n
          \ o.pos = UnityObjectToClipPos(IN.pos);\n  return o;\n}\n\n// textures\nsampler2D
          _MainTex;\nfixed4 _Color;\n\n// fragment shader\nfixed4 frag (v2f IN) :
          SV_Target {\n  fixed4 col;\n  fixed4 tex, tmp0, tmp1, tmp2;\n  // SetTexture
          #0\n  tex = UNITY_SAMPLE_TEX2D (unity_Lightmap, IN.uv0.xy);\n  col = tex
          * tex.a;\n  col *= 2;\n  // SetTexture #1\n  tex = UNITY_SAMPLE_TEX2D (unity_Lightmap,
          IN.uv1.xy);\n  col = col * _Color;\n  // SetTexture #2\n  tex = tex2D (_MainTex,
          IN.uv2.xy);\n  col.rgb = tex * col;\n  col *= 4;\n  col.a = fixed4(1,1,1,1).a;\n
          \ // fog\n  #if USING_FOG\n    col.rgb = lerp (unity_FogColor.rgb, col.rgb,
          IN.fog);\n  #endif\n  return col;\n}\n\n// texenvs\n//! TexEnv0: 02010105
          02010105 [unity_Lightmap] usesLightmapST\n//! TexEnv1: 01000102 01000102
          [unity_Lightmap] [_Color]\n//! TexEnv2: 04010100 01060004 [_MainTex] [ffffffff]\n"
        m_AssetPath: 
        m_PlatformMask: 4294967295
        m_HardwareTierVariantsMask: 0
        m_StartLine: 1
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: 00000000000000000000000000000000
        m_FromOther: 1
        m_Language: 0
        m_VariantsUser0:
        - - _
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser1:
        - - _
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0: []
        m_VariantsBuiltin1: []
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_BaseRequirements: 1
        m_KeywordTargetInfo: []
        m_NonStrippedUserKeywords: FOG_EXP FOG_EXP2 FOG_LINEAR
        m_BuiltinKeywords: 
      298988:
        serializedVersion: 2
        m_Code: "#line 183 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          multi_compile_instancing\n#pragma exclude_renderers nomrt\n#pragma skip_variants
          FOG_LINEAR FOG_EXP FOG_EXP2\n#pragma multi_compile_prepassfinal\n#include
          \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n#include
          \"UnityShaderUtilities.cginc\"\n// -------- variant for: <when no other
          keywords are defined>\n#if !defined(INSTANCING_ON)\n// Surface shader code
          generated based on:\n// writes to per-pixel normal: no\n// writes to emission:
          no\n// writes to occlusion: no\n// needs world space reflection vector:
          no\n// needs world space normal vector: no\n// needs screen space position:
          no\n// needs world space position: no\n// needs view direction: no\n// needs
          world space view direction: no\n// needs world space position for lighting:
          YES\n// needs world space view direction for lighting: YES\n// needs world
          space view direction for lightmaps: no\n// needs vertex color: no\n// needs
          VFACE: no\n// passes tangent-to-world matrix to pixel shader: no\n// reads
          from normal: YES\n// 1 texcoords actually used\n//   float2 _MainTex\n#define
          UNITY_PASS_DEFERRED\n#include \"UnityCG.cginc\"\n#include \"Lighting.cginc\"\n\n#define
          INTERNAL_DATA\n#define WorldReflectionVector(data,normal) data.worldRefl\n#define
          WorldNormalVector(data,normal) normal\n\n// Original surface shader snippet:\n#line
          11 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n/*
          UNITY: Original start of shader */\n//#pragma surface surf BlinnPhong\n\nsampler2D
          _MainTex;\nfixed4 _Color;\nhalf _Shininess;\n\nstruct Input {\n    float2
          uv_MainTex;\n};\n\nvoid surf (Input IN, inout SurfaceOutput o) {\n    fixed4
          tex = tex2D(_MainTex, IN.uv_MainTex);\n    o.Albedo = tex.rgb * _Color.rgb;\n
          \   o.Gloss = tex.a;\n    o.Alpha = tex.a * _Color.a;\n    o.Specular =
          _Shininess;\n}\n\n\n// vertex-to-fragment interpolation data\nstruct v2f_surf
          {\n  UNITY_POSITION(pos);\n  float2 pack0 : TEXCOORD0; // _MainTex\n  half3
          worldNormal : TEXCOORD1;\n  float3 worldPos : TEXCOORD2;\n  float4 lmap
          : TEXCOORD3;\n#ifndef LIGHTMAP_ON\n  #if UNITY_SHOULD_SAMPLE_SH\n    half3
          sh : TEXCOORD4; // SH\n  #endif\n#else\n  #ifdef DIRLIGHTMAP_OFF\n    float4
          lmapFadePos : TEXCOORD4;\n  #endif\n#endif\n  UNITY_VERTEX_INPUT_INSTANCE_ID\n
          \ UNITY_VERTEX_OUTPUT_STEREO\n};\nfloat4 _MainTex_ST;\n\n// vertex shader\nv2f_surf
          vert_surf (appdata_full v) {\n  UNITY_SETUP_INSTANCE_ID(v);\n  v2f_surf
          o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n  UNITY_TRANSFER_INSTANCE_ID(v,o);\n
          \ UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);\n  o.pos = UnityObjectToClipPos(v.vertex);\n
          \ o.pack0.xy = TRANSFORM_TEX(v.texcoord, _MainTex);\n  float3 worldPos =
          mul(unity_ObjectToWorld, v.vertex).xyz;\n  fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);\n
          \ o.worldPos = worldPos;\n  o.worldNormal = worldNormal;\n#ifdef DYNAMICLIGHTMAP_ON\n
          \ o.lmap.zw = v.texcoord2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;\n#else\n
          \ o.lmap.zw = 0;\n#endif\n#ifdef LIGHTMAP_ON\n  o.lmap.xy = v.texcoord1.xy
          * unity_LightmapST.xy + unity_LightmapST.zw;\n  #ifdef DIRLIGHTMAP_OFF\n
          \   o.lmapFadePos.xyz = (mul(unity_ObjectToWorld, v.vertex).xyz - unity_ShadowFadeCenterAndType.xyz)
          * unity_ShadowFadeCenterAndType.w;\n    o.lmapFadePos.w = (-UnityObjectToViewPos(v.vertex).z)
          * (1.0 - unity_ShadowFadeCenterAndType.w);\n  #endif\n#else\n  o.lmap.xy
          = 0;\n    #if UNITY_SHOULD_SAMPLE_SH\n      o.sh = 0;\n      o.sh = ShadeSHPerVertex
          (worldNormal, o.sh);\n    #endif\n#endif\n  return o;\n}\n#ifdef LIGHTMAP_ON\nfloat4
          unity_LightmapFade;\n#endif\nfixed4 unity_Ambient;\n\n// fragment shader\nvoid
          frag_surf (v2f_surf IN,\n    out half4 outGBuffer0 : SV_Target0,\n    out
          half4 outGBuffer1 : SV_Target1,\n    out half4 outGBuffer2 : SV_Target2,\n
          \   out half4 outEmission : SV_Target3\n#if defined(SHADOWS_SHADOWMASK)
          && (UNITY_ALLOWED_MRT_COUNT > 4)\n    , out half4 outShadowMask : SV_Target4\n#endif\n)
          {\n  UNITY_SETUP_INSTANCE_ID(IN);\n  // prepare and unpack data\n  Input
          surfIN;\n  UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n  surfIN.uv_MainTex.x
          = 1.0;\n  surfIN.uv_MainTex = IN.pack0.xy;\n  float3 worldPos = IN.worldPos;\n
          \ #ifndef USING_DIRECTIONAL_LIGHT\n    fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));\n
          \ #else\n    fixed3 lightDir = _WorldSpaceLightPos0.xyz;\n  #endif\n  fixed3
          worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));\n  #ifdef UNITY_COMPILER_HLSL\n
          \ SurfaceOutput o = (SurfaceOutput)0;\n  #else\n  SurfaceOutput o;\n  #endif\n
          \ o.Albedo = 0.0;\n  o.Emission = 0.0;\n  o.Specular = 0.0;\n  o.Alpha =
          0.0;\n  o.Gloss = 0.0;\n  fixed3 normalWorldVertex = fixed3(0,0,1);\n  o.Normal
          = IN.worldNormal;\n  normalWorldVertex = IN.worldNormal;\n\n  // call surface
          function\n  surf (surfIN, o);\nfixed3 originalNormal = o.Normal;\n  half
          atten = 1;\n\n  // Setup lighting environment\n  UnityGI gi;\n  UNITY_INITIALIZE_OUTPUT(UnityGI,
          gi);\n  gi.indirect.diffuse = 0;\n  gi.indirect.specular = 0;\n  gi.light.color
          = 0;\n  gi.light.dir = half3(0,1,0);\n  // Call GI (lightmaps/SH/reflections)
          lighting function\n  UnityGIInput giInput;\n  UNITY_INITIALIZE_OUTPUT(UnityGIInput,
          giInput);\n  giInput.light = gi.light;\n  giInput.worldPos = worldPos;\n
          \ giInput.worldViewDir = worldViewDir;\n  giInput.atten = atten;\n  #if
          defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)\n    giInput.lightmapUV
          = IN.lmap;\n  #else\n    giInput.lightmapUV = 0.0;\n  #endif\n  #if UNITY_SHOULD_SAMPLE_SH\n
          \   giInput.ambient = IN.sh;\n  #else\n    giInput.ambient.rgb = 0.0;\n
          \ #endif\n  giInput.probeHDR[0] = unity_SpecCube0_HDR;\n  giInput.probeHDR[1]
          = unity_SpecCube1_HDR;\n  #if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)\n
          \   giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for
          blending\n  #endif\n  #ifdef UNITY_SPECCUBE_BOX_PROJECTION\n    giInput.boxMax[0]
          = unity_SpecCube0_BoxMax;\n    giInput.probePosition[0] = unity_SpecCube0_ProbePosition;\n
          \   giInput.boxMax[1] = unity_SpecCube1_BoxMax;\n    giInput.boxMin[1] =
          unity_SpecCube1_BoxMin;\n    giInput.probePosition[1] = unity_SpecCube1_ProbePosition;\n
          \ #endif\n  LightingBlinnPhong_GI(o, giInput, gi);\n\n  // call lighting
          function to output g-buffer\n  outEmission = LightingBlinnPhong_Deferred
          (o, worldViewDir, gi, outGBuffer0, outGBuffer1, outGBuffer2);\n  #if defined(SHADOWS_SHADOWMASK)
          && (UNITY_ALLOWED_MRT_COUNT > 4)\n    outShadowMask = UnityGetRawBakedOcclusions
          (IN.lmap.xy, float3(0, 0, 0));\n  #endif\n  #ifndef UNITY_HDR_ON\n  outEmission.rgb
          = exp2(-outEmission.rgb);\n  #endif\n}\n\n\n#endif\n\n// -------- variant
          for: INSTANCING_ON \n#if defined(INSTANCING_ON)\n// Surface shader code
          generated based on:\n// writes to per-pixel normal: no\n// writes to emission:
          no\n// writes to occlusion: no\n// needs world space reflection vector:
          no\n// needs world space normal vector: no\n// needs screen space position:
          no\n// needs world space position: no\n// needs view direction: no\n// needs
          world space view direction: no\n// needs world space position for lighting:
          YES\n// needs world space view direction for lighting: YES\n// needs world
          space view direction for lightmaps: no\n// needs vertex color: no\n// needs
          VFACE: no\n// passes tangent-to-world matrix to pixel shader: no\n// reads
          from normal: YES\n// 1 texcoords actually used\n//   float2 _MainTex\n#define
          UNITY_PASS_DEFERRED\n#include \"UnityCG.cginc\"\n#include \"Lighting.cginc\"\n\n#define
          INTERNAL_DATA\n#define WorldReflectionVector(data,normal) data.worldRefl\n#define
          WorldNormalVector(data,normal) normal\n\n// Original surface shader snippet:\n#line
          11 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n/*
          UNITY: Original start of shader */\n//#pragma surface surf BlinnPhong\n\nsampler2D
          _MainTex;\nfixed4 _Color;\nhalf _Shininess;\n\nstruct Input {\n    float2
          uv_MainTex;\n};\n\nvoid surf (Input IN, inout SurfaceOutput o) {\n    fixed4
          tex = tex2D(_MainTex, IN.uv_MainTex);\n    o.Albedo = tex.rgb * _Color.rgb;\n
          \   o.Gloss = tex.a;\n    o.Alpha = tex.a * _Color.a;\n    o.Specular =
          _Shininess;\n}\n\n\n// vertex-to-fragment interpolation data\nstruct v2f_surf
          {\n  UNITY_POSITION(pos);\n  float2 pack0 : TEXCOORD0; // _MainTex\n  half3
          worldNormal : TEXCOORD1;\n  float3 worldPos : TEXCOORD2;\n  float4 lmap
          : TEXCOORD3;\n#ifndef LIGHTMAP_ON\n  #if UNITY_SHOULD_SAMPLE_SH\n    half3
          sh : TEXCOORD4; // SH\n  #endif\n#else\n  #ifdef DIRLIGHTMAP_OFF\n    float4
          lmapFadePos : TEXCOORD4;\n  #endif\n#endif\n  UNITY_VERTEX_INPUT_INSTANCE_ID\n
          \ UNITY_VERTEX_OUTPUT_STEREO\n};\nfloat4 _MainTex_ST;\n\n// vertex shader\nv2f_surf
          vert_surf (appdata_full v) {\n  UNITY_SETUP_INSTANCE_ID(v);\n  v2f_surf
          o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n  UNITY_TRANSFER_INSTANCE_ID(v,o);\n
          \ UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);\n  o.pos = UnityObjectToClipPos(v.vertex);\n
          \ o.pack0.xy = TRANSFORM_TEX(v.texcoord, _MainTex);\n  float3 worldPos =
          mul(unity_ObjectToWorld, v.vertex).xyz;\n  fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);\n
          \ o.worldPos = worldPos;\n  o.worldNormal = worldNormal;\n#ifdef DYNAMICLIGHTMAP_ON\n
          \ o.lmap.zw = v.texcoord2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;\n#else\n
          \ o.lmap.zw = 0;\n#endif\n#ifdef LIGHTMAP_ON\n  o.lmap.xy = v.texcoord1.xy
          * unity_LightmapST.xy + unity_LightmapST.zw;\n  #ifdef DIRLIGHTMAP_OFF\n
          \   o.lmapFadePos.xyz = (mul(unity_ObjectToWorld, v.vertex).xyz - unity_ShadowFadeCenterAndType.xyz)
          * unity_ShadowFadeCenterAndType.w;\n    o.lmapFadePos.w = (-UnityObjectToViewPos(v.vertex).z)
          * (1.0 - unity_ShadowFadeCenterAndType.w);\n  #endif\n#else\n  o.lmap.xy
          = 0;\n    #if UNITY_SHOULD_SAMPLE_SH\n      o.sh = 0;\n      o.sh = ShadeSHPerVertex
          (worldNormal, o.sh);\n    #endif\n#endif\n  return o;\n}\n#ifdef LIGHTMAP_ON\nfloat4
          unity_LightmapFade;\n#endif\nfixed4 unity_Ambient;\n\n// fragment shader\nvoid
          frag_surf (v2f_surf IN,\n    out half4 outGBuffer0 : SV_Target0,\n    out
          half4 outGBuffer1 : SV_Target1,\n    out half4 outGBuffer2 : SV_Target2,\n
          \   out half4 outEmission : SV_Target3\n#if defined(SHADOWS_SHADOWMASK)
          && (UNITY_ALLOWED_MRT_COUNT > 4)\n    , out half4 outShadowMask : SV_Target4\n#endif\n)
          {\n  UNITY_SETUP_INSTANCE_ID(IN);\n  // prepare and unpack data\n  Input
          surfIN;\n  UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n  surfIN.uv_MainTex.x
          = 1.0;\n  surfIN.uv_MainTex = IN.pack0.xy;\n  float3 worldPos = IN.worldPos;\n
          \ #ifndef USING_DIRECTIONAL_LIGHT\n    fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));\n
          \ #else\n    fixed3 lightDir = _WorldSpaceLightPos0.xyz;\n  #endif\n  fixed3
          worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));\n  #ifdef UNITY_COMPILER_HLSL\n
          \ SurfaceOutput o = (SurfaceOutput)0;\n  #else\n  SurfaceOutput o;\n  #endif\n
          \ o.Albedo = 0.0;\n  o.Emission = 0.0;\n  o.Specular = 0.0;\n  o.Alpha =
          0.0;\n  o.Gloss = 0.0;\n  fixed3 normalWorldVertex = fixed3(0,0,1);\n  o.Normal
          = IN.worldNormal;\n  normalWorldVertex = IN.worldNormal;\n\n  // call surface
          function\n  surf (surfIN, o);\nfixed3 originalNormal = o.Normal;\n  half
          atten = 1;\n\n  // Setup lighting environment\n  UnityGI gi;\n  UNITY_INITIALIZE_OUTPUT(UnityGI,
          gi);\n  gi.indirect.diffuse = 0;\n  gi.indirect.specular = 0;\n  gi.light.color
          = 0;\n  gi.light.dir = half3(0,1,0);\n  // Call GI (lightmaps/SH/reflections)
          lighting function\n  UnityGIInput giInput;\n  UNITY_INITIALIZE_OUTPUT(UnityGIInput,
          giInput);\n  giInput.light = gi.light;\n  giInput.worldPos = worldPos;\n
          \ giInput.worldViewDir = worldViewDir;\n  giInput.atten = atten;\n  #if
          defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)\n    giInput.lightmapUV
          = IN.lmap;\n  #else\n    giInput.lightmapUV = 0.0;\n  #endif\n  #if UNITY_SHOULD_SAMPLE_SH\n
          \   giInput.ambient = IN.sh;\n  #else\n    giInput.ambient.rgb = 0.0;\n
          \ #endif\n  giInput.probeHDR[0] = unity_SpecCube0_HDR;\n  giInput.probeHDR[1]
          = unity_SpecCube1_HDR;\n  #if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)\n
          \   giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for
          blending\n  #endif\n  #ifdef UNITY_SPECCUBE_BOX_PROJECTION\n    giInput.boxMax[0]
          = unity_SpecCube0_BoxMax;\n    giInput.probePosition[0] = unity_SpecCube0_ProbePosition;\n
          \   giInput.boxMax[1] = unity_SpecCube1_BoxMax;\n    giInput.boxMin[1] =
          unity_SpecCube1_BoxMin;\n    giInput.probePosition[1] = unity_SpecCube1_ProbePosition;\n
          \ #endif\n  LightingBlinnPhong_GI(o, giInput, gi);\n\n  // call lighting
          function to output g-buffer\n  outEmission = LightingBlinnPhong_Deferred
          (o, worldViewDir, gi, outGBuffer0, outGBuffer1, outGBuffer2);\n  #if defined(SHADOWS_SHADOWMASK)
          && (UNITY_ALLOWED_MRT_COUNT > 4)\n    outShadowMask = UnityGetRawBakedOcclusions
          (IN.lmap.xy, float3(0, 0, 0));\n  #endif\n  #ifndef UNITY_HDR_ON\n  outEmission.rgb
          = exp2(-outEmission.rgb);\n  #endif\n}\n\n\n#endif\n\n\n"
        m_AssetPath: Assets/DefaultResourcesExtra
        m_PlatformMask: 4294966271
        m_HardwareTierVariantsMask: 0
        m_StartLine: 185
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: 50ca834ae523391965756df6e6a0c31b
        m_FromOther: 1
        m_Language: 0
        m_VariantsUser0:
        - - __
          - INSTANCING_ON
        m_VariantsUser1:
        - - __
          - INSTANCING_ON
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0:
        - []
        - - DYNAMICLIGHTMAP_ON
        - - SHADOWS_SHADOWMASK
        - - DYNAMICLIGHTMAP_ON
          - SHADOWS_SHADOWMASK
        - - LIGHTMAP_ON
        - - LIGHTMAP_ON
          - DYNAMICLIGHTMAP_ON
        - - LIGHTMAP_ON
          - SHADOWS_SHADOWMASK
        - - LIGHTMAP_ON
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SHADOWMASK
        - - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
        - - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SHADOWMASK
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - SHADOWS_SHADOWMASK
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SHADOWMASK
        - - UNITY_HDR_ON
        - - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - UNITY_HDR_ON
          - SHADOWS_SHADOWMASK
        - - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
          - SHADOWS_SHADOWMASK
        - - LIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - UNITY_HDR_ON
          - SHADOWS_SHADOWMASK
        - - LIGHTMAP_ON
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
          - SHADOWS_SHADOWMASK
        - - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
          - SHADOWS_SHADOWMASK
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - UNITY_HDR_ON
          - SHADOWS_SHADOWMASK
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
          - SHADOWS_SHADOWMASK
        m_VariantsBuiltin1:
        - []
        - - DYNAMICLIGHTMAP_ON
        - - SHADOWS_SHADOWMASK
        - - DYNAMICLIGHTMAP_ON
          - SHADOWS_SHADOWMASK
        - - LIGHTMAP_ON
        - - LIGHTMAP_ON
          - DYNAMICLIGHTMAP_ON
        - - LIGHTMAP_ON
          - SHADOWS_SHADOWMASK
        - - LIGHTMAP_ON
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SHADOWMASK
        - - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
        - - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SHADOWMASK
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - SHADOWS_SHADOWMASK
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SHADOWMASK
        - - UNITY_HDR_ON
        - - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - UNITY_HDR_ON
          - SHADOWS_SHADOWMASK
        - - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
          - SHADOWS_SHADOWMASK
        - - LIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - UNITY_HDR_ON
          - SHADOWS_SHADOWMASK
        - - LIGHTMAP_ON
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
          - SHADOWS_SHADOWMASK
        - - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
          - SHADOWS_SHADOWMASK
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - UNITY_HDR_ON
          - SHADOWS_SHADOWMASK
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
          - SHADOWS_SHADOWMASK
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_BaseRequirements: 33
        m_KeywordTargetInfo:
        - keywordName: SHADOWS_SOFT
          requirements: 227
        - keywordName: DIRLIGHTMAP_COMBINED
          requirements: 227
        - keywordName: DIRLIGHTMAP_SEPARATE
          requirements: 227
        - keywordName: DYNAMICLIGHTMAP_ON
          requirements: 227
        - keywordName: SHADOWS_SCREEN
          requirements: 227
        - keywordName: INSTANCING_ON
          requirements: 2048
        - keywordName: PROCEDURAL_INSTANCING_ON
          requirements: 16384
        - keywordName: STEREO_MULTIVIEW_ON
          requirements: 4087
        - keywordName: STEREO_INSTANCING_ON
          requirements: 4087
        m_NonStrippedUserKeywords: INSTANCING_ON
        m_BuiltinKeywords: DIRLIGHTMAP_COMBINED DYNAMICLIGHTMAP_ON LIGHTMAP_ON SHADOWS_SHADOWMASK
          UNITY_HDR_ON
      305908:
        serializedVersion: 2
        m_Code: "#line 193 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          multi_compile_instancing\n#pragma exclude_renderers nomrt\n#pragma skip_variants
          FOG_LINEAR FOG_EXP FOG_EXP2\n#pragma multi_compile_prepassfinal\n#include
          \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n#include
          \"UnityShaderUtilities.cginc\"\n// -------- variant for: <when no other
          keywords are defined>\n#if !defined(INSTANCING_ON)\n// Surface shader code
          generated based on:\n// writes to per-pixel normal: YES\n// writes to emission:
          no\n// writes to occlusion: no\n// needs world space reflection vector:
          no\n// needs world space normal vector: no\n// needs screen space position:
          no\n// needs world space position: no\n// needs view direction: no\n// needs
          world space view direction: no\n// needs world space position for lighting:
          YES\n// needs world space view direction for lighting: YES\n// needs world
          space view direction for lightmaps: no\n// needs vertex color: YES\n// needs
          VFACE: no\n// passes tangent-to-world matrix to pixel shader: YES\n// reads
          from normal: no\n// 2 texcoords actually used\n//   float2 _MainTex\n//
          \  float2 _BumpMap\n#define UNITY_PASS_DEFERRED\n#include \"UnityCG.cginc\"\n#include
          \"Lighting.cginc\"\n\n#define INTERNAL_DATA half3 internalSurfaceTtoW0;
          half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;\n#define WorldReflectionVector(data,normal)
          reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal),
          dot(data.internalSurfaceTtoW2,normal)))\n#define WorldNormalVector(data,normal)
          fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal),
          dot(data.internalSurfaceTtoW2,normal))\n\n// Original surface shader snippet:\n#line
          11 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n/*
          UNITY: Original start of shader */\n\t\t\t//#pragma surface surf BlinnPhong\n\n\t\t\tsampler2D
          _MainTex;\n\t\t\tsampler2D _BumpMap;\n\t\t\tfixed4 _Color;\n\t\t\thalf _Shininess;\n\n\t\t\tstruct
          Input {\n\t\t\t\tfloat2 uv_MainTex;\n\t\t\t\tfloat2 uv_BumpMap;\n\t\t\t\tfloat4
          color: Color;\n\t\t\t};\n\n\t\t\tvoid surf ( Input IN, inout SurfaceOutput
          o ) {\n\t\t\t\tfixed4 tex = tex2D( _MainTex, IN.uv_MainTex );\n\t\t\t\to.Albedo
          = tex.rgb * _Color.rgb * IN.color.rgb;\n\t\t\t\to.Gloss = tex.a;\n\t\t\t\to.Alpha
          = tex.a * _Color.a;\n\t\t\t\to.Specular = _Shininess;\n\t\t\t\to.Normal
          = UnpackNormal( tex2D( _BumpMap, IN.uv_BumpMap ) );\n\t\t\t}\n\t\t\n\n//
          vertex-to-fragment interpolation data\nstruct v2f_surf {\n  UNITY_POSITION(pos);\n
          \ float4 pack0 : TEXCOORD0; // _MainTex _BumpMap\n  float4 tSpace0 : TEXCOORD1;\n
          \ float4 tSpace1 : TEXCOORD2;\n  float4 tSpace2 : TEXCOORD3;\n  fixed4 color
          : COLOR0;\n  float4 lmap : TEXCOORD4;\n#ifndef LIGHTMAP_ON\n  #if UNITY_SHOULD_SAMPLE_SH\n
          \   half3 sh : TEXCOORD5; // SH\n  #endif\n#else\n  #ifdef DIRLIGHTMAP_OFF\n
          \   float4 lmapFadePos : TEXCOORD5;\n  #endif\n#endif\n  UNITY_VERTEX_INPUT_INSTANCE_ID\n
          \ UNITY_VERTEX_OUTPUT_STEREO\n};\nfloat4 _MainTex_ST;\nfloat4 _BumpMap_ST;\n\n//
          vertex shader\nv2f_surf vert_surf (appdata_full v) {\n  UNITY_SETUP_INSTANCE_ID(v);\n
          \ v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n  UNITY_TRANSFER_INSTANCE_ID(v,o);\n
          \ UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);\n  o.pos = UnityObjectToClipPos(v.vertex);\n
          \ o.pack0.xy = TRANSFORM_TEX(v.texcoord, _MainTex);\n  o.pack0.zw = TRANSFORM_TEX(v.texcoord,
          _BumpMap);\n  float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;\n
          \ fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);\n  fixed3 worldTangent
          = UnityObjectToWorldDir(v.tangent.xyz);\n  fixed tangentSign = v.tangent.w
          * unity_WorldTransformParams.w;\n  fixed3 worldBinormal = cross(worldNormal,
          worldTangent) * tangentSign;\n  o.tSpace0 = float4(worldTangent.x, worldBinormal.x,
          worldNormal.x, worldPos.x);\n  o.tSpace1 = float4(worldTangent.y, worldBinormal.y,
          worldNormal.y, worldPos.y);\n  o.tSpace2 = float4(worldTangent.z, worldBinormal.z,
          worldNormal.z, worldPos.z);\n  o.color = v.color;\n#ifdef DYNAMICLIGHTMAP_ON\n
          \ o.lmap.zw = v.texcoord2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;\n#else\n
          \ o.lmap.zw = 0;\n#endif\n#ifdef LIGHTMAP_ON\n  o.lmap.xy = v.texcoord1.xy
          * unity_LightmapST.xy + unity_LightmapST.zw;\n  #ifdef DIRLIGHTMAP_OFF\n
          \   o.lmapFadePos.xyz = (mul(unity_ObjectToWorld, v.vertex).xyz - unity_ShadowFadeCenterAndType.xyz)
          * unity_ShadowFadeCenterAndType.w;\n    o.lmapFadePos.w = (-UnityObjectToViewPos(v.vertex).z)
          * (1.0 - unity_ShadowFadeCenterAndType.w);\n  #endif\n#else\n  o.lmap.xy
          = 0;\n    #if UNITY_SHOULD_SAMPLE_SH\n      o.sh = 0;\n      o.sh = ShadeSHPerVertex
          (worldNormal, o.sh);\n    #endif\n#endif\n  return o;\n}\n#ifdef LIGHTMAP_ON\nfloat4
          unity_LightmapFade;\n#endif\nfixed4 unity_Ambient;\n\n// fragment shader\nvoid
          frag_surf (v2f_surf IN,\n    out half4 outGBuffer0 : SV_Target0,\n    out
          half4 outGBuffer1 : SV_Target1,\n    out half4 outGBuffer2 : SV_Target2,\n
          \   out half4 outEmission : SV_Target3\n#if defined(SHADOWS_SHADOWMASK)
          && (UNITY_ALLOWED_MRT_COUNT > 4)\n    , out half4 outShadowMask : SV_Target4\n#endif\n)
          {\n  UNITY_SETUP_INSTANCE_ID(IN);\n  // prepare and unpack data\n  Input
          surfIN;\n  UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n  surfIN.uv_MainTex.x
          = 1.0;\n  surfIN.uv_BumpMap.x = 1.0;\n  surfIN.color.x = 1.0;\n  surfIN.uv_MainTex
          = IN.pack0.xy;\n  surfIN.uv_BumpMap = IN.pack0.zw;\n  float3 worldPos =
          float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);\n  #ifndef USING_DIRECTIONAL_LIGHT\n
          \   fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n
          \   fixed3 lightDir = _WorldSpaceLightPos0.xyz;\n  #endif\n  fixed3 worldViewDir
          = normalize(UnityWorldSpaceViewDir(worldPos));\n  surfIN.color = IN.color;\n
          \ #ifdef UNITY_COMPILER_HLSL\n  SurfaceOutput o = (SurfaceOutput)0;\n  #else\n
          \ SurfaceOutput o;\n  #endif\n  o.Albedo = 0.0;\n  o.Emission = 0.0;\n  o.Specular
          = 0.0;\n  o.Alpha = 0.0;\n  o.Gloss = 0.0;\n  fixed3 normalWorldVertex =
          fixed3(0,0,1);\n\n  // call surface function\n  surf (surfIN, o);\nfixed3
          originalNormal = o.Normal;\n  fixed3 worldN;\n  worldN.x = dot(IN.tSpace0.xyz,
          o.Normal);\n  worldN.y = dot(IN.tSpace1.xyz, o.Normal);\n  worldN.z = dot(IN.tSpace2.xyz,
          o.Normal);\n  o.Normal = worldN;\n  half atten = 1;\n\n  // Setup lighting
          environment\n  UnityGI gi;\n  UNITY_INITIALIZE_OUTPUT(UnityGI, gi);\n  gi.indirect.diffuse
          = 0;\n  gi.indirect.specular = 0;\n  gi.light.color = 0;\n  gi.light.dir
          = half3(0,1,0);\n  // Call GI (lightmaps/SH/reflections) lighting function\n
          \ UnityGIInput giInput;\n  UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);\n
          \ giInput.light = gi.light;\n  giInput.worldPos = worldPos;\n  giInput.worldViewDir
          = worldViewDir;\n  giInput.atten = atten;\n  #if defined(LIGHTMAP_ON) ||
          defined(DYNAMICLIGHTMAP_ON)\n    giInput.lightmapUV = IN.lmap;\n  #else\n
          \   giInput.lightmapUV = 0.0;\n  #endif\n  #if UNITY_SHOULD_SAMPLE_SH\n
          \   giInput.ambient = IN.sh;\n  #else\n    giInput.ambient.rgb = 0.0;\n
          \ #endif\n  giInput.probeHDR[0] = unity_SpecCube0_HDR;\n  giInput.probeHDR[1]
          = unity_SpecCube1_HDR;\n  #if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)\n
          \   giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for
          blending\n  #endif\n  #ifdef UNITY_SPECCUBE_BOX_PROJECTION\n    giInput.boxMax[0]
          = unity_SpecCube0_BoxMax;\n    giInput.probePosition[0] = unity_SpecCube0_ProbePosition;\n
          \   giInput.boxMax[1] = unity_SpecCube1_BoxMax;\n    giInput.boxMin[1] =
          unity_SpecCube1_BoxMin;\n    giInput.probePosition[1] = unity_SpecCube1_ProbePosition;\n
          \ #endif\n  LightingBlinnPhong_GI(o, giInput, gi);\n\n  // call lighting
          function to output g-buffer\n  outEmission = LightingBlinnPhong_Deferred
          (o, worldViewDir, gi, outGBuffer0, outGBuffer1, outGBuffer2);\n  #if defined(SHADOWS_SHADOWMASK)
          && (UNITY_ALLOWED_MRT_COUNT > 4)\n    outShadowMask = UnityGetRawBakedOcclusions
          (IN.lmap.xy, float3(0, 0, 0));\n  #endif\n  #ifndef UNITY_HDR_ON\n  outEmission.rgb
          = exp2(-outEmission.rgb);\n  #endif\n}\n\n\n#endif\n\n// -------- variant
          for: INSTANCING_ON \n#if defined(INSTANCING_ON)\n// Surface shader code
          generated based on:\n// writes to per-pixel normal: YES\n// writes to emission:
          no\n// writes to occlusion: no\n// needs world space reflection vector:
          no\n// needs world space normal vector: no\n// needs screen space position:
          no\n// needs world space position: no\n// needs view direction: no\n// needs
          world space view direction: no\n// needs world space position for lighting:
          YES\n// needs world space view direction for lighting: YES\n// needs world
          space view direction for lightmaps: no\n// needs vertex color: YES\n// needs
          VFACE: no\n// passes tangent-to-world matrix to pixel shader: YES\n// reads
          from normal: no\n// 2 texcoords actually used\n//   float2 _MainTex\n//
          \  float2 _BumpMap\n#define UNITY_PASS_DEFERRED\n#include \"UnityCG.cginc\"\n#include
          \"Lighting.cginc\"\n\n#define INTERNAL_DATA half3 internalSurfaceTtoW0;
          half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;\n#define WorldReflectionVector(data,normal)
          reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal),
          dot(data.internalSurfaceTtoW2,normal)))\n#define WorldNormalVector(data,normal)
          fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal),
          dot(data.internalSurfaceTtoW2,normal))\n\n// Original surface shader snippet:\n#line
          11 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n/*
          UNITY: Original start of shader */\n\t\t\t//#pragma surface surf BlinnPhong\n\n\t\t\tsampler2D
          _MainTex;\n\t\t\tsampler2D _BumpMap;\n\t\t\tfixed4 _Color;\n\t\t\thalf _Shininess;\n\n\t\t\tstruct
          Input {\n\t\t\t\tfloat2 uv_MainTex;\n\t\t\t\tfloat2 uv_BumpMap;\n\t\t\t\tfloat4
          color: Color;\n\t\t\t};\n\n\t\t\tvoid surf ( Input IN, inout SurfaceOutput
          o ) {\n\t\t\t\tfixed4 tex = tex2D( _MainTex, IN.uv_MainTex );\n\t\t\t\to.Albedo
          = tex.rgb * _Color.rgb * IN.color.rgb;\n\t\t\t\to.Gloss = tex.a;\n\t\t\t\to.Alpha
          = tex.a * _Color.a;\n\t\t\t\to.Specular = _Shininess;\n\t\t\t\to.Normal
          = UnpackNormal( tex2D( _BumpMap, IN.uv_BumpMap ) );\n\t\t\t}\n\t\t\n\n//
          vertex-to-fragment interpolation data\nstruct v2f_surf {\n  UNITY_POSITION(pos);\n
          \ float4 pack0 : TEXCOORD0; // _MainTex _BumpMap\n  float4 tSpace0 : TEXCOORD1;\n
          \ float4 tSpace1 : TEXCOORD2;\n  float4 tSpace2 : TEXCOORD3;\n  fixed4 color
          : COLOR0;\n  float4 lmap : TEXCOORD4;\n#ifndef LIGHTMAP_ON\n  #if UNITY_SHOULD_SAMPLE_SH\n
          \   half3 sh : TEXCOORD5; // SH\n  #endif\n#else\n  #ifdef DIRLIGHTMAP_OFF\n
          \   float4 lmapFadePos : TEXCOORD5;\n  #endif\n#endif\n  UNITY_VERTEX_INPUT_INSTANCE_ID\n
          \ UNITY_VERTEX_OUTPUT_STEREO\n};\nfloat4 _MainTex_ST;\nfloat4 _BumpMap_ST;\n\n//
          vertex shader\nv2f_surf vert_surf (appdata_full v) {\n  UNITY_SETUP_INSTANCE_ID(v);\n
          \ v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n  UNITY_TRANSFER_INSTANCE_ID(v,o);\n
          \ UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);\n  o.pos = UnityObjectToClipPos(v.vertex);\n
          \ o.pack0.xy = TRANSFORM_TEX(v.texcoord, _MainTex);\n  o.pack0.zw = TRANSFORM_TEX(v.texcoord,
          _BumpMap);\n  float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;\n
          \ fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);\n  fixed3 worldTangent
          = UnityObjectToWorldDir(v.tangent.xyz);\n  fixed tangentSign = v.tangent.w
          * unity_WorldTransformParams.w;\n  fixed3 worldBinormal = cross(worldNormal,
          worldTangent) * tangentSign;\n  o.tSpace0 = float4(worldTangent.x, worldBinormal.x,
          worldNormal.x, worldPos.x);\n  o.tSpace1 = float4(worldTangent.y, worldBinormal.y,
          worldNormal.y, worldPos.y);\n  o.tSpace2 = float4(worldTangent.z, worldBinormal.z,
          worldNormal.z, worldPos.z);\n  o.color = v.color;\n#ifdef DYNAMICLIGHTMAP_ON\n
          \ o.lmap.zw = v.texcoord2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;\n#else\n
          \ o.lmap.zw = 0;\n#endif\n#ifdef LIGHTMAP_ON\n  o.lmap.xy = v.texcoord1.xy
          * unity_LightmapST.xy + unity_LightmapST.zw;\n  #ifdef DIRLIGHTMAP_OFF\n
          \   o.lmapFadePos.xyz = (mul(unity_ObjectToWorld, v.vertex).xyz - unity_ShadowFadeCenterAndType.xyz)
          * unity_ShadowFadeCenterAndType.w;\n    o.lmapFadePos.w = (-UnityObjectToViewPos(v.vertex).z)
          * (1.0 - unity_ShadowFadeCenterAndType.w);\n  #endif\n#else\n  o.lmap.xy
          = 0;\n    #if UNITY_SHOULD_SAMPLE_SH\n      o.sh = 0;\n      o.sh = ShadeSHPerVertex
          (worldNormal, o.sh);\n    #endif\n#endif\n  return o;\n}\n#ifdef LIGHTMAP_ON\nfloat4
          unity_LightmapFade;\n#endif\nfixed4 unity_Ambient;\n\n// fragment shader\nvoid
          frag_surf (v2f_surf IN,\n    out half4 outGBuffer0 : SV_Target0,\n    out
          half4 outGBuffer1 : SV_Target1,\n    out half4 outGBuffer2 : SV_Target2,\n
          \   out half4 outEmission : SV_Target3\n#if defined(SHADOWS_SHADOWMASK)
          && (UNITY_ALLOWED_MRT_COUNT > 4)\n    , out half4 outShadowMask : SV_Target4\n#endif\n)
          {\n  UNITY_SETUP_INSTANCE_ID(IN);\n  // prepare and unpack data\n  Input
          surfIN;\n  UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n  surfIN.uv_MainTex.x
          = 1.0;\n  surfIN.uv_BumpMap.x = 1.0;\n  surfIN.color.x = 1.0;\n  surfIN.uv_MainTex
          = IN.pack0.xy;\n  surfIN.uv_BumpMap = IN.pack0.zw;\n  float3 worldPos =
          float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);\n  #ifndef USING_DIRECTIONAL_LIGHT\n
          \   fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n
          \   fixed3 lightDir = _WorldSpaceLightPos0.xyz;\n  #endif\n  fixed3 worldViewDir
          = normalize(UnityWorldSpaceViewDir(worldPos));\n  surfIN.color = IN.color;\n
          \ #ifdef UNITY_COMPILER_HLSL\n  SurfaceOutput o = (SurfaceOutput)0;\n  #else\n
          \ SurfaceOutput o;\n  #endif\n  o.Albedo = 0.0;\n  o.Emission = 0.0;\n  o.Specular
          = 0.0;\n  o.Alpha = 0.0;\n  o.Gloss = 0.0;\n  fixed3 normalWorldVertex =
          fixed3(0,0,1);\n\n  // call surface function\n  surf (surfIN, o);\nfixed3
          originalNormal = o.Normal;\n  fixed3 worldN;\n  worldN.x = dot(IN.tSpace0.xyz,
          o.Normal);\n  worldN.y = dot(IN.tSpace1.xyz, o.Normal);\n  worldN.z = dot(IN.tSpace2.xyz,
          o.Normal);\n  o.Normal = worldN;\n  half atten = 1;\n\n  // Setup lighting
          environment\n  UnityGI gi;\n  UNITY_INITIALIZE_OUTPUT(UnityGI, gi);\n  gi.indirect.diffuse
          = 0;\n  gi.indirect.specular = 0;\n  gi.light.color = 0;\n  gi.light.dir
          = half3(0,1,0);\n  // Call GI (lightmaps/SH/reflections) lighting function\n
          \ UnityGIInput giInput;\n  UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);\n
          \ giInput.light = gi.light;\n  giInput.worldPos = worldPos;\n  giInput.worldViewDir
          = worldViewDir;\n  giInput.atten = atten;\n  #if defined(LIGHTMAP_ON) ||
          defined(DYNAMICLIGHTMAP_ON)\n    giInput.lightmapUV = IN.lmap;\n  #else\n
          \   giInput.lightmapUV = 0.0;\n  #endif\n  #if UNITY_SHOULD_SAMPLE_SH\n
          \   giInput.ambient = IN.sh;\n  #else\n    giInput.ambient.rgb = 0.0;\n
          \ #endif\n  giInput.probeHDR[0] = unity_SpecCube0_HDR;\n  giInput.probeHDR[1]
          = unity_SpecCube1_HDR;\n  #if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)\n
          \   giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for
          blending\n  #endif\n  #ifdef UNITY_SPECCUBE_BOX_PROJECTION\n    giInput.boxMax[0]
          = unity_SpecCube0_BoxMax;\n    giInput.probePosition[0] = unity_SpecCube0_ProbePosition;\n
          \   giInput.boxMax[1] = unity_SpecCube1_BoxMax;\n    giInput.boxMin[1] =
          unity_SpecCube1_BoxMin;\n    giInput.probePosition[1] = unity_SpecCube1_ProbePosition;\n
          \ #endif\n  LightingBlinnPhong_GI(o, giInput, gi);\n\n  // call lighting
          function to output g-buffer\n  outEmission = LightingBlinnPhong_Deferred
          (o, worldViewDir, gi, outGBuffer0, outGBuffer1, outGBuffer2);\n  #if defined(SHADOWS_SHADOWMASK)
          && (UNITY_ALLOWED_MRT_COUNT > 4)\n    outShadowMask = UnityGetRawBakedOcclusions
          (IN.lmap.xy, float3(0, 0, 0));\n  #endif\n  #ifndef UNITY_HDR_ON\n  outEmission.rgb
          = exp2(-outEmission.rgb);\n  #endif\n}\n\n\n#endif\n\n\n"
        m_AssetPath: Assets/Houdini/Shaders
        m_PlatformMask: 4294966271
        m_HardwareTierVariantsMask: 0
        m_StartLine: 195
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: 50ca834ae523391965756df6e6a0c31b
        m_FromOther: 0
        m_Language: 0
        m_VariantsUser0:
        - - __
          - INSTANCING_ON
        m_VariantsUser1:
        - - __
          - INSTANCING_ON
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0:
        - []
        - - DYNAMICLIGHTMAP_ON
        - - SHADOWS_SHADOWMASK
        - - DYNAMICLIGHTMAP_ON
          - SHADOWS_SHADOWMASK
        - - LIGHTMAP_ON
        - - LIGHTMAP_ON
          - DYNAMICLIGHTMAP_ON
        - - LIGHTMAP_ON
          - SHADOWS_SHADOWMASK
        - - LIGHTMAP_ON
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SHADOWMASK
        - - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
        - - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SHADOWMASK
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - SHADOWS_SHADOWMASK
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SHADOWMASK
        - - UNITY_HDR_ON
        - - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - UNITY_HDR_ON
          - SHADOWS_SHADOWMASK
        - - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
          - SHADOWS_SHADOWMASK
        - - LIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - UNITY_HDR_ON
          - SHADOWS_SHADOWMASK
        - - LIGHTMAP_ON
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
          - SHADOWS_SHADOWMASK
        - - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
          - SHADOWS_SHADOWMASK
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - UNITY_HDR_ON
          - SHADOWS_SHADOWMASK
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
          - SHADOWS_SHADOWMASK
        m_VariantsBuiltin1:
        - []
        - - DYNAMICLIGHTMAP_ON
        - - SHADOWS_SHADOWMASK
        - - DYNAMICLIGHTMAP_ON
          - SHADOWS_SHADOWMASK
        - - LIGHTMAP_ON
        - - LIGHTMAP_ON
          - DYNAMICLIGHTMAP_ON
        - - LIGHTMAP_ON
          - SHADOWS_SHADOWMASK
        - - LIGHTMAP_ON
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SHADOWMASK
        - - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
        - - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SHADOWMASK
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - SHADOWS_SHADOWMASK
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SHADOWMASK
        - - UNITY_HDR_ON
        - - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - UNITY_HDR_ON
          - SHADOWS_SHADOWMASK
        - - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
          - SHADOWS_SHADOWMASK
        - - LIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - UNITY_HDR_ON
          - SHADOWS_SHADOWMASK
        - - LIGHTMAP_ON
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
          - SHADOWS_SHADOWMASK
        - - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
          - SHADOWS_SHADOWMASK
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - UNITY_HDR_ON
          - SHADOWS_SHADOWMASK
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
          - SHADOWS_SHADOWMASK
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_BaseRequirements: 33
        m_KeywordTargetInfo:
        - keywordName: SHADOWS_SOFT
          requirements: 227
        - keywordName: DIRLIGHTMAP_COMBINED
          requirements: 227
        - keywordName: DIRLIGHTMAP_SEPARATE
          requirements: 227
        - keywordName: DYNAMICLIGHTMAP_ON
          requirements: 227
        - keywordName: SHADOWS_SCREEN
          requirements: 227
        - keywordName: INSTANCING_ON
          requirements: 2048
        - keywordName: PROCEDURAL_INSTANCING_ON
          requirements: 16384
        - keywordName: STEREO_MULTIVIEW_ON
          requirements: 4087
        - keywordName: STEREO_INSTANCING_ON
          requirements: 4087
        m_NonStrippedUserKeywords: INSTANCING_ON
        m_BuiltinKeywords: DIRLIGHTMAP_COMBINED DYNAMICLIGHTMAP_ON LIGHTMAP_ON SHADOWS_SHADOWMASK
          UNITY_HDR_ON
      383441:
        serializedVersion: 2
        m_Code: "#line 214 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          multi_compile_instancing\n#pragma skip_variants FOG_LINEAR FOG_EXP FOG_EXP2\n#pragma
          skip_variants INSTANCING_ON\n#pragma shader_feature EDITOR_VISUALIZATION\n\n#include
          \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n#include
          \"UnityShaderUtilities.cginc\"\n// -------- variant for: <when no other
          keywords are defined>\n#if !defined(INSTANCING_ON)\n// Surface shader code
          generated based on:\n// writes to per-pixel normal: YES\n// writes to emission:
          no\n// writes to occlusion: no\n// needs world space reflection vector:
          no\n// needs world space normal vector: no\n// needs screen space position:
          no\n// needs world space position: no\n// needs view direction: no\n// needs
          world space view direction: no\n// needs world space position for lighting:
          YES\n// needs world space view direction for lighting: YES\n// needs world
          space view direction for lightmaps: no\n// needs vertex color: YES\n// needs
          VFACE: no\n// passes tangent-to-world matrix to pixel shader: YES\n// reads
          from normal: no\n// 1 texcoords actually used\n//   float2 _MainTex\n#define
          UNITY_PASS_META\n#include \"UnityCG.cginc\"\n#include \"Lighting.cginc\"\n\n#define
          INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3
          internalSurfaceTtoW2;\n#define WorldReflectionVector(data,normal) reflect
          (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal),
          dot(data.internalSurfaceTtoW2,normal)))\n#define WorldNormalVector(data,normal)
          fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal),
          dot(data.internalSurfaceTtoW2,normal))\n\n// Original surface shader snippet:\n#line
          11 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n/*
          UNITY: Original start of shader */\n\t\t\t//#pragma surface surf BlinnPhong\n\n\t\t\tsampler2D
          _MainTex;\n\t\t\tsampler2D _BumpMap;\n\t\t\tfixed4 _Color;\n\t\t\thalf _Shininess;\n\n\t\t\tstruct
          Input {\n\t\t\t\tfloat2 uv_MainTex;\n\t\t\t\tfloat2 uv_BumpMap;\n\t\t\t\tfloat4
          color: Color;\n\t\t\t};\n\n\t\t\tvoid surf ( Input IN, inout SurfaceOutput
          o ) {\n\t\t\t\tfixed4 tex = tex2D( _MainTex, IN.uv_MainTex );\n\t\t\t\to.Albedo
          = tex.rgb * _Color.rgb * IN.color.rgb;\n\t\t\t\to.Gloss = tex.a;\n\t\t\t\to.Alpha
          = tex.a * _Color.a;\n\t\t\t\to.Specular = _Shininess;\n\t\t\t\to.Normal
          = UnpackNormal( tex2D( _BumpMap, IN.uv_BumpMap ) );\n\t\t\t}\n\t\t\n#include
          \"UnityMetaPass.cginc\"\n\n// vertex-to-fragment interpolation data\nstruct
          v2f_surf {\n  UNITY_POSITION(pos);\n  float2 pack0 : TEXCOORD0; // _MainTex\n
          \ float4 tSpace0 : TEXCOORD1;\n  float4 tSpace1 : TEXCOORD2;\n  float4 tSpace2
          : TEXCOORD3;\n  fixed4 color : COLOR0;\n  UNITY_VERTEX_INPUT_INSTANCE_ID\n
          \ UNITY_VERTEX_OUTPUT_STEREO\n};\nfloat4 _MainTex_ST;\n\n// vertex shader\nv2f_surf
          vert_surf (appdata_full v) {\n  UNITY_SETUP_INSTANCE_ID(v);\n  v2f_surf
          o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n  UNITY_TRANSFER_INSTANCE_ID(v,o);\n
          \ UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);\n  o.pos = UnityMetaVertexPosition(v.vertex,
          v.texcoord1.xy, v.texcoord2.xy, unity_LightmapST, unity_DynamicLightmapST);\n
          \ o.pack0.xy = TRANSFORM_TEX(v.texcoord, _MainTex);\n  float3 worldPos =
          mul(unity_ObjectToWorld, v.vertex).xyz;\n  fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);\n
          \ fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);\n  fixed tangentSign
          = v.tangent.w * unity_WorldTransformParams.w;\n  fixed3 worldBinormal =
          cross(worldNormal, worldTangent) * tangentSign;\n  o.tSpace0 = float4(worldTangent.x,
          worldBinormal.x, worldNormal.x, worldPos.x);\n  o.tSpace1 = float4(worldTangent.y,
          worldBinormal.y, worldNormal.y, worldPos.y);\n  o.tSpace2 = float4(worldTangent.z,
          worldBinormal.z, worldNormal.z, worldPos.z);\n  o.color = v.color;\n  return
          o;\n}\n\n// fragment shader\nfixed4 frag_surf (v2f_surf IN) : SV_Target
          {\n  UNITY_SETUP_INSTANCE_ID(IN);\n  // prepare and unpack data\n  Input
          surfIN;\n  UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n  surfIN.uv_MainTex.x
          = 1.0;\n  surfIN.uv_BumpMap.x = 1.0;\n  surfIN.color.x = 1.0;\n  surfIN.uv_MainTex
          = IN.pack0.xy;\n  float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);\n
          \ #ifndef USING_DIRECTIONAL_LIGHT\n    fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));\n
          \ #else\n    fixed3 lightDir = _WorldSpaceLightPos0.xyz;\n  #endif\n  surfIN.color
          = IN.color;\n  #ifdef UNITY_COMPILER_HLSL\n  SurfaceOutput o = (SurfaceOutput)0;\n
          \ #else\n  SurfaceOutput o;\n  #endif\n  o.Albedo = 0.0;\n  o.Emission =
          0.0;\n  o.Specular = 0.0;\n  o.Alpha = 0.0;\n  o.Gloss = 0.0;\n  fixed3
          normalWorldVertex = fixed3(0,0,1);\n\n  // call surface function\n  surf
          (surfIN, o);\n  UnityMetaInput metaIN;\n  UNITY_INITIALIZE_OUTPUT(UnityMetaInput,
          metaIN);\n  metaIN.Albedo = o.Albedo;\n  metaIN.Emission = o.Emission;\n
          \ metaIN.SpecularColor = o.Specular;\n  return UnityMetaFragment(metaIN);\n}\n\n\n#endif\n\n\n"
        m_AssetPath: Assets/Houdini/Shaders
        m_PlatformMask: 4294967295
        m_HardwareTierVariantsMask: 0
        m_StartLine: 216
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: 085994e0ef1207d17290a24c4a127e9f
        m_FromOther: 0
        m_Language: 0
        m_VariantsUser0:
        - - _
          - EDITOR_VISUALIZATION
        m_VariantsUser1:
        - - _
          - EDITOR_VISUALIZATION
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0: []
        m_VariantsBuiltin1: []
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_BaseRequirements: 33
        m_KeywordTargetInfo:
        - keywordName: SHADOWS_SOFT
          requirements: 227
        - keywordName: DIRLIGHTMAP_COMBINED
          requirements: 227
        - keywordName: DIRLIGHTMAP_SEPARATE
          requirements: 227
        - keywordName: DYNAMICLIGHTMAP_ON
          requirements: 227
        - keywordName: SHADOWS_SCREEN
          requirements: 227
        - keywordName: INSTANCING_ON
          requirements: 2048
        - keywordName: PROCEDURAL_INSTANCING_ON
          requirements: 16384
        - keywordName: STEREO_MULTIVIEW_ON
          requirements: 4087
        - keywordName: STEREO_INSTANCING_ON
          requirements: 4087
        m_NonStrippedUserKeywords: 
        m_BuiltinKeywords: 
      387594:
        serializedVersion: 2
        m_Code: "#line 194 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          multi_compile_instancing\n#pragma skip_variants FOG_LINEAR FOG_EXP FOG_EXP2\n#pragma
          skip_variants INSTANCING_ON\n#pragma shader_feature EDITOR_VISUALIZATION\n\n#include
          \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n#include
          \"UnityShaderUtilities.cginc\"\n// -------- variant for: <when no other
          keywords are defined>\n#if !defined(INSTANCING_ON)\n// Surface shader code
          generated based on:\n// writes to per-pixel normal: no\n// writes to emission:
          no\n// writes to occlusion: no\n// needs world space reflection vector:
          no\n// needs world space normal vector: no\n// needs screen space position:
          no\n// needs world space position: no\n// needs view direction: no\n// needs
          world space view direction: no\n// needs world space position for lighting:
          YES\n// needs world space view direction for lighting: YES\n// needs world
          space view direction for lightmaps: no\n// needs vertex color: no\n// needs
          VFACE: no\n// passes tangent-to-world matrix to pixel shader: no\n// reads
          from normal: no\n// 1 texcoords actually used\n//   float2 _MainTex\n#define
          UNITY_PASS_META\n#include \"UnityCG.cginc\"\n#include \"Lighting.cginc\"\n\n#define
          INTERNAL_DATA\n#define WorldReflectionVector(data,normal) data.worldRefl\n#define
          WorldNormalVector(data,normal) normal\n\n// Original surface shader snippet:\n#line
          11 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n/*
          UNITY: Original start of shader */\n//#pragma surface surf BlinnPhong\n\nsampler2D
          _MainTex;\nfixed4 _Color;\nhalf _Shininess;\n\nstruct Input {\n    float2
          uv_MainTex;\n};\n\nvoid surf (Input IN, inout SurfaceOutput o) {\n    fixed4
          tex = tex2D(_MainTex, IN.uv_MainTex);\n    o.Albedo = tex.rgb * _Color.rgb;\n
          \   o.Gloss = tex.a;\n    o.Alpha = tex.a * _Color.a;\n    o.Specular =
          _Shininess;\n}\n\n#include \"UnityMetaPass.cginc\"\n\n// vertex-to-fragment
          interpolation data\nstruct v2f_surf {\n  UNITY_POSITION(pos);\n  float2
          pack0 : TEXCOORD0; // _MainTex\n  float3 worldPos : TEXCOORD1;\n  UNITY_VERTEX_INPUT_INSTANCE_ID\n
          \ UNITY_VERTEX_OUTPUT_STEREO\n};\nfloat4 _MainTex_ST;\n\n// vertex shader\nv2f_surf
          vert_surf (appdata_full v) {\n  UNITY_SETUP_INSTANCE_ID(v);\n  v2f_surf
          o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n  UNITY_TRANSFER_INSTANCE_ID(v,o);\n
          \ UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);\n  o.pos = UnityMetaVertexPosition(v.vertex,
          v.texcoord1.xy, v.texcoord2.xy, unity_LightmapST, unity_DynamicLightmapST);\n
          \ o.pack0.xy = TRANSFORM_TEX(v.texcoord, _MainTex);\n  float3 worldPos =
          mul(unity_ObjectToWorld, v.vertex).xyz;\n  fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);\n
          \ o.worldPos = worldPos;\n  return o;\n}\n\n// fragment shader\nfixed4 frag_surf
          (v2f_surf IN) : SV_Target {\n  UNITY_SETUP_INSTANCE_ID(IN);\n  // prepare
          and unpack data\n  Input surfIN;\n  UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n
          \ surfIN.uv_MainTex.x = 1.0;\n  surfIN.uv_MainTex = IN.pack0.xy;\n  float3
          worldPos = IN.worldPos;\n  #ifndef USING_DIRECTIONAL_LIGHT\n    fixed3 lightDir
          = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n    fixed3 lightDir
          = _WorldSpaceLightPos0.xyz;\n  #endif\n  #ifdef UNITY_COMPILER_HLSL\n  SurfaceOutput
          o = (SurfaceOutput)0;\n  #else\n  SurfaceOutput o;\n  #endif\n  o.Albedo
          = 0.0;\n  o.Emission = 0.0;\n  o.Specular = 0.0;\n  o.Alpha = 0.0;\n  o.Gloss
          = 0.0;\n  fixed3 normalWorldVertex = fixed3(0,0,1);\n\n  // call surface
          function\n  surf (surfIN, o);\n  UnityMetaInput metaIN;\n  UNITY_INITIALIZE_OUTPUT(UnityMetaInput,
          metaIN);\n  metaIN.Albedo = o.Albedo;\n  metaIN.Emission = o.Emission;\n
          \ metaIN.SpecularColor = o.Specular;\n  return UnityMetaFragment(metaIN);\n}\n\n\n#endif\n\n\n"
        m_AssetPath: Assets/DefaultResourcesExtra
        m_PlatformMask: 4294967295
        m_HardwareTierVariantsMask: 0
        m_StartLine: 196
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: 085994e0ef1207d17290a24c4a127e9f
        m_FromOther: 1
        m_Language: 0
        m_VariantsUser0:
        - - _
          - EDITOR_VISUALIZATION
        m_VariantsUser1:
        - - _
          - EDITOR_VISUALIZATION
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0: []
        m_VariantsBuiltin1: []
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_BaseRequirements: 33
        m_KeywordTargetInfo:
        - keywordName: SHADOWS_SOFT
          requirements: 227
        - keywordName: DIRLIGHTMAP_COMBINED
          requirements: 227
        - keywordName: DIRLIGHTMAP_SEPARATE
          requirements: 227
        - keywordName: DYNAMICLIGHTMAP_ON
          requirements: 227
        - keywordName: SHADOWS_SCREEN
          requirements: 227
        - keywordName: INSTANCING_ON
          requirements: 2048
        - keywordName: PROCEDURAL_INSTANCING_ON
          requirements: 16384
        - keywordName: STEREO_MULTIVIEW_ON
          requirements: 4087
        - keywordName: STEREO_INSTANCING_ON
          requirements: 4087
        m_NonStrippedUserKeywords: 
        m_BuiltinKeywords: 
    m_MeshComponentsFromSnippets: 143
    m_HasSurfaceShaders: 1
    m_HasFixedFunctionShaders: 0
